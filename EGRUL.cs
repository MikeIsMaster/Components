// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.0.0.433
//    <NameSpace>XmlToHtmlConvertor_EGRUL</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net35</CodeBaseTag><InitializeFields>None</InitializeFields><GenerateUnusedComplexTypes>True</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>True</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>True</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>True</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>True</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>True</sspNullable><sspString>True</sspString><sspCollection>True</sspCollection><sspComplexType>True</sspComplexType><sspSimpleType>True</sspSimpleType><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace ActualXmlElasticsearch.Structures.Egrul
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class EGRUL
    {

        private bool _shouldSerializeДатаВыг;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Structures.search search { get; set; }


        /// <summary>
        /// Сведения о юридическом лице
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвЮЛ")]
        public List<EGRULСвЮЛ> СвЮЛ { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаВыг { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаВыгSpecified { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRUL));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвЮЛ()
        {
            return СвЮЛ != null && СвЮЛ.Count > 0;
        }

        /// <summary>
        /// Test whether ДатаВыг should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаВыг()
        {
            if (_shouldSerializeДатаВыг)
            {
                return true;
            }
            return (ДатаВыг != default(System.DateTime));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRUL object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRUL object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRUL object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRUL obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRUL);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRUL obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRUL Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRUL)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRUL Deserialize(System.IO.Stream s)
        {
            return ((EGRUL)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRUL object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRUL object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRUL object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRUL obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRUL);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRUL obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRUL LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, Encoding.Default);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о юридическом лице
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛ
    {

        private bool _shouldSerializeСпрОПФ;

        private bool _shouldSerializeДатаОГРН;

        private bool _shouldSerializeДатаВып;

        private static XmlSerializer serializer;


        //[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        //public DateTime ДатаПапки { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        //public DateTime ДатаГосреестра { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string НазваниеФайлаZip { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string НазваниеФайлаXml { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ВерсияФайлаXML { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ПолеДляПоиска { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ПолеДляПоискаСРазбивкой { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ПолеДляПоискаСПодсказками { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ОГРНДляПоиска { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ИННДляПоиска { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string Реестр { get; set; }


        /// <summary>
        /// Сведения о наименовании юридического лица
        /// </summary>
        public EGRULСвЮЛСвНаимЮЛ СвНаимЮЛ { get; set; }
        /// <summary>
        /// Сведения об адресе (месте нахождения)
        /// </summary>
        public EGRULСвЮЛСвАдресЮЛ СвАдресЮЛ { get; set; }
        /// <summary>
        /// Сведения об адресе электронной почты юридического лица
        /// </summary>
        public EGRULСвЮЛСвАдрЭлПочты СвАдрЭлПочты { get; set; }
        /// <summary>
        /// Сведения о регистрации (образовании) юридического лица
        /// </summary>
        public EGRULСвЮЛСвОбрЮЛ СвОбрЮЛ { get; set; }
        /// <summary>
        /// Сведения о регистрирующем органе по месту нахождения юридического лица
        /// </summary>
        public EGRULСвЮЛСвРегОрг СвРегОрг { get; set; }
        /// <summary>
        /// Сведения о состоянии (статусе) юридического лица
        /// </summary>
        /// <summary>
        /// Формируется только в случае, если: • Регистрация ЮЛ признана недействительной (код статуса по справочнику СЮЛСТ = «701», «702» или «801») • ЮЛ находится в процессе ликвидации (код статуса по справочнику СЮЛСТ = «101»); • ЮЛ находится в процессе реорганизации (код статуса по справочнику СЮЛСТ больше «120» и меньше «200»); • в отношении ЮЛ в ЕГРЮЛ содержатся следующие сведения (не отмененные и не признанные недействительными): - в ЕГРЮЛ внесена запись о принятом решении о предстоящем исключении недействующего ЮЛ из ЕГРЮЛ (код статуса по справочнику СЮЛСТ = «105») - ЮЛ находится в процессе уменьшения уставного капитала (код статуса по справочнику СЮЛСТ = «111»); - ЮЛ принято решение об изменении места нахождения (код статуса по справочнику СЮЛСТ = «112»). В случае если в отношении ЮЛ внесено несколько статусов с указанными кодами (например, ЮЛ находится в состоянии нескольких реорганизаций), то формируются сведения по каждому из этих статусов
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвСтатус")]
        public List<EGRULСвЮЛСвСтатус> СвСтатус { get; set; }
        /// <summary>
        /// Сведения о прекращении юридического лица
        /// </summary>
        /// <summary>
        /// Формируется только в случае, если код статуса ЮЛ по справочнику СЮЛСТ больше 200 и меньше 700
        /// </summary>
        public EGRULСвЮЛСвПрекрЮЛ СвПрекрЮЛ { get; set; }
        /// <summary>
        /// Сведения об учете в налоговом органе
        /// </summary>
        public EGRULСвЮЛСвУчетНО СвУчетНО { get; set; }
        /// <summary>
        /// Сведения о регистрации юридического лица в качестве страхователя в территориальном органе Пенсионного фонда Российской Федерации
        /// </summary>
        public EGRULСвЮЛСвРегПФ СвРегПФ { get; set; }
        /// <summary>
        /// Сведения о регистрации юридического лица в качестве страхователя в исполнительном органе Фонда социального страхования Российской Федерации
        /// </summary>
        public EGRULСвЮЛСвРегФСС СвРегФСС { get; set; }
        /// <summary>
        /// Сведения о размере указанного в учредительных документах коммерческой организации уставного капитала (складочного капитала, уставного фонда, паевого фонда)
        /// </summary>
        public EGRULСвЮЛСвУстКап СвУстКап { get; set; }
        /// <summary>
        /// Сведения об использовании юридическим лицом типового устава
        /// </summary>
        public EGRULСвЮЛСвТипУстав СвТипУстав { get; set; }
        /// <summary>
        /// Сведения об управляющей организации
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвУпрОрг")]
        public List<EGRULСвЮЛСвУпрОрг> СвУпрОрг { get; set; }
        /// <summary>
        /// Сведения о лице, имеющем право без доверенности действовать от имени юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СведДолжнФЛ")]
        public List<EGRULСвЮЛСведДолжнФЛ> СведДолжнФЛ { get; set; }
        /// <summary>
        /// Сведения об учредителях (участниках) юридического лица
        /// </summary>
        public EGRULСвЮЛСвУчредит СвУчредит { get; set; }
        /// <summary>
        /// Сведения о доле в уставном капитале общества с ограниченной ответственностью, принадлежащей обществу
        /// </summary>
        public ДоляУстКапЕГРЮЛТип СвДоляООО { get; set; }
        /// <summary>
        /// Сведения о держателе реестра акционеров акционерного общества
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвДержРеестрАО")]
        public List<EGRULСвЮЛСвДержРеестрАО> СвДержРеестрАО { get; set; }
        /// <summary>
        /// Сведения о видах экономической деятельности по Общероссийскому классификатору видов экономической деятельности
        /// </summary>
        public EGRULСвЮЛСвОКВЭД СвОКВЭД { get; set; }
        /// <summary>
        /// Сведения о лицензиях, выданных ЮЛ
        /// </summary>
        /// <summary>
        /// Передаются сведения только о действующих лицензиях или лицензиях, действие которых приостановлено. При передаче сведений о ЮЛ, прекратившем деятельность, сведения о лицензиях не передаются
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвЛицензия")]
        public List<EGRULСвЮЛСвЛицензия> СвЛицензия { get; set; }
        /// <summary>
        /// Сведения об обособленных подразделениях юридического лица
        /// </summary>
        public EGRULСвЮЛСвПодразд СвПодразд { get; set; }
        /// <summary>
        /// Сведения об участии в реорганизации
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвРеорг")]
        public List<EGRULСвЮЛСвРеорг> СвРеорг { get; set; }
        /// <summary>
        /// Сведения о правопредшественнике
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвПредш")]
        public List<EGRULСвЮЛСвПредш> СвПредш { get; set; }
        /// <summary>
        /// Сведения о крестьянском (фермерском) хозяйстве, на базе имущества которого создано юридическое лицо
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвКФХПредш")]
        public List<EGRULСвЮЛСвКФХПредш> СвКФХПредш { get; set; }
        /// <summary>
        /// Сведения о правопреемнике
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвПреем")]
        public List<EGRULСвЮЛСвПреем> СвПреем { get; set; }
        /// <summary>
        /// Сведения о крестьянском (фермерском) хозяйстве, которые внесены в ЕГРИП в связи с приведением правового статуса крестьянского (фермерского) хозяйства в соответствие с нормами части первой Гражданского кодекса Российской Федерации
        /// </summary>
        public EGRULСвЮЛСвКФХПреем СвКФХПреем { get; set; }
        /// <summary>
        /// Сведения о записях, внесенных в ЕГРЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвЗапЕГРЮЛ")]
        public List<EGRULСвЮЛСвЗапЕГРЮЛ> СвЗапЕГРЮЛ { get; set; }
        /// <summary>
        /// Дата формирования сведений из ЕГРЮЛ в отношении юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаВып { get; set; }
        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }
        /// <summary>
        /// Дата присвоения ОГРН
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаОГРН { get; set; }
        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }
        /// <summary>
        /// КПП юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП { get; set; }
        /// <summary>
        /// Наименование классификатора, по которому введены сведения об организационно-правовой форме: ОКОПФ, КОПФ
        /// </summary>
        /// <summary>
        /// , где: КОПФ указывается в случае, если сведения об ОПФ были внесены по классификатору КОПФ. В этом случае в реквизите «КодОПФ» указывается 2-х значный код по классификатору КОПФ. ОКОПФ указывается в случае, если сведения об ОПФ были внесены по классификатору ОКОПФ ОК 028 – 99. В этом случае в реквизите «КодОПФ» указывается 2-х значный код по данному классификатору. ОКОПФ указывается в случае, если сведения об ОПФ были внесены по классификатору ОКОПФ ОК 028 – 99, ОК 028-2012, ОК 028-2012 (изм.2/2014). При передаче сведений об ОПФ по классификатору ОКОПФ ОК 028 – 99 в реквизите «КодОПФ» указывается 2-х значный код по данному классификатору. При передаче сведений об ОПФ классификаторам ОК 028-2012, ОК 028-2012 (изм.2/2014) в реквизите «КодОПФ» указывается 5-ти значный код по данным классификаторам. Отсутствует, если сведения об организационно-правовой форме внесены в ЕГРЮЛ без учета классификаторов
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public EGRULСвЮЛСпрОПФ СпрОПФ { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СпрОПФSpecified { get; set; }
        /// <summary>
        /// Код по выбранному классификатору
        /// </summary>
        /// <summary>
        /// Является обязательным при наличии реквизита СпрОПФ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодОПФ { get; set; }
        /// <summary>
        /// Полное наименование организационно-правовой формы
        /// </summary>
        /// <summary>
        /// Передается в случае, если сведения об ОПФ были внесены без учета классификатора
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ПолнНаимОПФ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвСтатус should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвСтатус()
        {
            return СвСтатус != null && СвСтатус.Count > 0;
        }

        /// <summary>
        /// Test whether СвУпрОрг should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвУпрОрг()
        {
            return СвУпрОрг != null && СвУпрОрг.Count > 0;
        }

        /// <summary>
        /// Test whether СведДолжнФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСведДолжнФЛ()
        {
            return СведДолжнФЛ != null && СведДолжнФЛ.Count > 0;
        }

        /// <summary>
        /// Test whether СвДержРеестрАО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвДержРеестрАО()
        {
            return СвДержРеестрАО != null && СвДержРеестрАО.Count > 0;
        }

        /// <summary>
        /// Test whether СвЛицензия should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвЛицензия()
        {
            return СвЛицензия != null && СвЛицензия.Count > 0;
        }

        /// <summary>
        /// Test whether СвРеорг should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРеорг()
        {
            return СвРеорг != null && СвРеорг.Count > 0;
        }

        /// <summary>
        /// Test whether СвПредш should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвПредш()
        {
            return СвПредш != null && СвПредш.Count > 0;
        }

        /// <summary>
        /// Test whether СвКФХПредш should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвКФХПредш()
        {
            return СвКФХПредш != null && СвКФХПредш.Count > 0;
        }

        /// <summary>
        /// Test whether СвПреем should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвПреем()
        {
            return СвПреем != null && СвПреем.Count > 0;
        }

        /// <summary>
        /// Test whether СвЗапЕГРЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвЗапЕГРЮЛ()
        {
            return СвЗапЕГРЮЛ != null && СвЗапЕГРЮЛ.Count > 0;
        }

        /// <summary>
        /// Test whether ДатаВып should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаВып()
        {
            if (_shouldSerializeДатаВып)
            {
                return true;
            }
            return (ДатаВып != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ДатаОГРН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаОГРН()
        {
            if (_shouldSerializeДатаОГРН)
            {
                return true;
            }
            return (ДатаОГРН != default(System.DateTime));
        }

        /// <summary>
        /// Test whether СпрОПФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСпрОПФ()
        {
            if (_shouldSerializeСпрОПФ)
            {
                return true;
            }
            return (СпрОПФ != default(EGRULСвЮЛСпрОПФ));
        }

        /// <summary>
        /// Test whether СвНаимЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНаимЮЛ()
        {
            return (СвНаимЮЛ != null);
        }

        /// <summary>
        /// Test whether СвАдресЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвАдресЮЛ()
        {
            return (СвАдресЮЛ != null);
        }

        /// <summary>
        /// Test whether СвАдрЭлПочты should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвАдрЭлПочты()
        {
            return (СвАдрЭлПочты != null);
        }

        /// <summary>
        /// Test whether СвОбрЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвОбрЮЛ()
        {
            return (СвОбрЮЛ != null);
        }

        /// <summary>
        /// Test whether СвРегОрг should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРегОрг()
        {
            return (СвРегОрг != null);
        }

        /// <summary>
        /// Test whether СвПрекрЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвПрекрЮЛ()
        {
            return (СвПрекрЮЛ != null);
        }

        /// <summary>
        /// Test whether СвУчетНО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвУчетНО()
        {
            return (СвУчетНО != null);
        }

        /// <summary>
        /// Test whether СвРегПФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРегПФ()
        {
            return (СвРегПФ != null);
        }

        /// <summary>
        /// Test whether СвРегФСС should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРегФСС()
        {
            return (СвРегФСС != null);
        }

        /// <summary>
        /// Test whether СвУстКап should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвУстКап()
        {
            return (СвУстКап != null);
        }

        /// <summary>
        /// Test whether СвТипУстав should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвТипУстав()
        {
            return (СвТипУстав != null);
        }

        /// <summary>
        /// Test whether СвУчредит should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвУчредит()
        {
            return (СвУчредит != null);
        }

        /// <summary>
        /// Test whether СвДоляООО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвДоляООО()
        {
            return (СвДоляООО != null);
        }

        /// <summary>
        /// Test whether СвОКВЭД should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвОКВЭД()
        {
            return (СвОКВЭД != null);
        }

        /// <summary>
        /// Test whether СвПодразд should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвПодразд()
        {
            return (СвПодразд != null);
        }

        /// <summary>
        /// Test whether СвКФХПреем should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвКФХПреем()
        {
            return (СвКФХПреем != null);
        }

        /// <summary>
        /// Test whether ОГРН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОГРН()
        {
            return !string.IsNullOrEmpty(ОГРН);
        }

        /// <summary>
        /// Test whether ИНН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИНН()
        {
            return !string.IsNullOrEmpty(ИНН);
        }

        /// <summary>
        /// Test whether КПП should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКПП()
        {
            return !string.IsNullOrEmpty(КПП);
        }

        /// <summary>
        /// Test whether КодОПФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодОПФ()
        {
            return !string.IsNullOrEmpty(КодОПФ);
        }

        /// <summary>
        /// Test whether ПолнНаимОПФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeПолнНаимОПФ()
        {
            return !string.IsNullOrEmpty(ПолнНаимОПФ);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о наименовании юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвНаимЮЛ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Полное наименование юридического лица на русском языке
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }
        /// <summary>
        /// Сокращенное наименование юридического лица на русском языке
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛСокр { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвНаимЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether НаимЮЛПолн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимЮЛПолн()
        {
            return !string.IsNullOrEmpty(НаимЮЛПолн);
        }

        /// <summary>
        /// Test whether НаимЮЛСокр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимЮЛСокр()
        {
            return !string.IsNullOrEmpty(НаимЮЛСокр);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвНаимЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвНаимЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвНаимЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвНаимЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвНаимЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвНаимЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвНаимЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвНаимЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвНаимЮЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвНаимЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвНаимЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвНаимЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвНаимЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвНаимЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвНаимЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвНаимЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвНаимЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// ГРН и дата внесения записи в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ГРНДатаТип
    {

        private bool _shouldSerializeДатаЗаписи;

        private static XmlSerializer serializer;

        /// <summary>
        /// Государственный регистрационный номер записи ЕГРЮЛ
        /// </summary>
        /// <summary>
        /// Может отсутствовать, если запись в ЕГРЮЛ вносилась без присвоения государственного регистрационного номера
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ГРН { get; set; }
        /// <summary>
        /// Дата внесения записи в ЕГРЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаЗаписи { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ГРНДатаТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаЗаписи should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаЗаписи()
        {
            if (_shouldSerializeДатаЗаписи)
            {
                return true;
            }
            return (ДатаЗаписи != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ГРН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРН()
        {
            return !string.IsNullOrEmpty(ГРН);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ГРНДатаТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ГРНДатаТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ГРНДатаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ГРНДатаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ГРНДатаТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ГРНДатаТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ГРНДатаТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ГРНДатаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ГРНДатаТип Deserialize(System.IO.Stream s)
        {
            return ((ГРНДатаТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ГРНДатаТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ГРНДатаТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ГРНДатаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ГРНДатаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ГРНДатаТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ГРНДатаТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ГРНДатаТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Идентификатор записи, ГРН (при наличии) и дата внесения записи в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ИдГРНДатаТип
    {

        private bool _shouldSerializeДатаЗап;

        private static XmlSerializer serializer;

        /// <summary>
        /// Системный идентификатор записи
        /// </summary>
        /// <summary>
        /// При наличии государственного регистрационного номера записи может совпадать с этим номером
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string ИдЗап { get; set; }
        /// <summary>
        /// Государственный регистрационный номер записи
        /// </summary>
        /// <summary>
        /// Может отсутствовать, если запись в ЕГРЮЛ внесена без присвоения государственного регистрационного номера
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ГРН { get; set; }
        /// <summary>
        /// Дата внесения записи в ЕГРЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаЗап { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ИдГРНДатаТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаЗап should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаЗап()
        {
            if (_shouldSerializeДатаЗап)
            {
                return true;
            }
            return (ДатаЗап != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ИдЗап should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИдЗап()
        {
            return !string.IsNullOrEmpty(ИдЗап);
        }

        /// <summary>
        /// Test whether ГРН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРН()
        {
            return !string.IsNullOrEmpty(ГРН);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ИдГРНДатаТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ИдГРНДатаТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ИдГРНДатаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ИдГРНДатаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ИдГРНДатаТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ИдГРНДатаТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ИдГРНДатаТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ИдГРНДатаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ИдГРНДатаТип Deserialize(System.IO.Stream s)
        {
            return ((ИдГРНДатаТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ИдГРНДатаТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ИдГРНДатаТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ИдГРНДатаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ИдГРНДатаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ИдГРНДатаТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ИдГРНДатаТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ИдГРНДатаТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о виде записи, внесенной в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ВидЗапТип
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Код вида записи (причины внесения записи в ЕГРЮЛ) по справочнику СПВЗ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСПВЗ { get; set; }
        /// <summary>
        /// Наименование вида записи (причины внесения записи в ЕГРЮЛ)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимВидЗап { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ВидЗапТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether КодСПВЗ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодСПВЗ()
        {
            return !string.IsNullOrEmpty(КодСПВЗ);
        }

        /// <summary>
        /// Test whether НаимВидЗап should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимВидЗап()
        {
            return !string.IsNullOrEmpty(НаимВидЗап);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ВидЗапТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ВидЗапТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ВидЗапТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ВидЗапТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ВидЗапТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ВидЗапТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ВидЗапТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ВидЗапТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ВидЗапТип Deserialize(System.IO.Stream s)
        {
            return ((ВидЗапТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ВидЗапТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ВидЗапТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ВидЗапТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ВидЗапТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ВидЗапТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ВидЗапТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ВидЗапТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об учете в налоговом органе по месту нахождения обособленного подразделения (филиала/представительства)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class СвУчетНОПодраздТип
    {

        private bool _shouldSerializeДатаПостУч;

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения о налоговом органе по месту нахождения филиала/представительства
        /// </summary>
        public СвНОТип СвНО { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// КПП филиала/представительства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП { get; set; }
        /// <summary>
        /// Дата постановки на учет в налоговом органе
        /// </summary>
        /// <summary>
        /// Для ЮЛ созданных после 01.07.2002 г. является датой регистрации ЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаПостУч { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(СвУчетНОПодраздТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаПостУч should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаПостУч()
        {
            if (_shouldSerializeДатаПостУч)
            {
                return true;
            }
            return (ДатаПостУч != default(System.DateTime));
        }

        /// <summary>
        /// Test whether СвНО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНО()
        {
            return (СвНО != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether КПП should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКПП()
        {
            return !string.IsNullOrEmpty(КПП);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвУчетНОПодраздТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an СвУчетНОПодраздТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвУчетНОПодраздТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out СвУчетНОПодраздТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвУчетНОПодраздТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out СвУчетНОПодраздТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static СвУчетНОПодраздТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((СвУчетНОПодраздТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static СвУчетНОПодраздТип Deserialize(System.IO.Stream s)
        {
            return ((СвУчетНОПодраздТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current СвУчетНОПодраздТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвУчетНОПодраздТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвУчетНОПодраздТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвУчетНОПодраздТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвУчетНОПодраздТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвУчетНОПодраздТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвУчетНОПодраздТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о налоговом органе, в котором юридическое лицо или обособленное подразделение состоит (состояло) на учете
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class СвНОТип
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Код органа по справочнику СОНО
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодНО { get; set; }
        /// <summary>
        /// Наименование налогового органа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимНО { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(СвНОТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether КодНО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодНО()
        {
            return !string.IsNullOrEmpty(КодНО);
        }

        /// <summary>
        /// Test whether НаимНО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимНО()
        {
            return !string.IsNullOrEmpty(НаимНО);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвНОТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an СвНОТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвНОТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out СвНОТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНОТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out СвНОТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static СвНОТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((СвНОТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static СвНОТип Deserialize(System.IO.Stream s)
        {
            return ((СвНОТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current СвНОТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвНОТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвНОТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвНОТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНОТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвНОТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвНОТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о наименовании обособленного подразделения (филиала/представительства)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class СвНаимПодраздТип
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Наименование
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимПолн { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(СвНаимПодраздТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether НаимПолн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимПолн()
        {
            return !string.IsNullOrEmpty(НаимПолн);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвНаимПодраздТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an СвНаимПодраздТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвНаимПодраздТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out СвНаимПодраздТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНаимПодраздТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out СвНаимПодраздТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static СвНаимПодраздТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((СвНаимПодраздТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static СвНаимПодраздТип Deserialize(System.IO.Stream s)
        {
            return ((СвНаимПодраздТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current СвНаимПодраздТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвНаимПодраздТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвНаимПодраздТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвНаимПодраздТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНаимПодраздТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвНаимПодраздТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвНаимПодраздТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о виде деятельности, внесенные в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class СвОКВЭДТип
    {

        private bool _shouldSerializeПрВерсОКВЭД;

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Код по Общероссийскому классификатору видов экономической деятельности
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодОКВЭД { get; set; }
        /// <summary>
        /// Наименование вида деятельности по Общероссийскому классификатору видов экономической деятельности
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимОКВЭД { get; set; }
        /// <summary>
        /// Признак версии Общероссийского классификатора видов экономической деятельности
        /// </summary>
        /// <summary>
        /// , где: 2001 – если код соответствует версии ОКВЭД ОК 029-2001 (КДЕС Ред. 1); 2014 – если код соответствует версии ОКВЭД ОК 029-2014 (КДЕС Ред. 2). Отсутствие данного атрибута в файле означает, что при внесении кода ОКВЭД использовался классификатор ОК 029-2001 (КДЕС Ред. 1)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СвОКВЭДТипПрВерсОКВЭД ПрВерсОКВЭД { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ПрВерсОКВЭДSpecified { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(СвОКВЭДТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ПрВерсОКВЭД should be serialized
        /// </summary>
        public virtual bool ShouldSerializeПрВерсОКВЭД()
        {
            if (_shouldSerializeПрВерсОКВЭД)
            {
                return true;
            }
            return (ПрВерсОКВЭД != default(СвОКВЭДТипПрВерсОКВЭД));
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether КодОКВЭД should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодОКВЭД()
        {
            return !string.IsNullOrEmpty(КодОКВЭД);
        }

        /// <summary>
        /// Test whether НаимОКВЭД should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимОКВЭД()
        {
            return !string.IsNullOrEmpty(НаимОКВЭД);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвОКВЭДТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an СвОКВЭДТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвОКВЭДТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out СвОКВЭДТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОКВЭДТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out СвОКВЭДТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static СвОКВЭДТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((СвОКВЭДТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static СвОКВЭДТип Deserialize(System.IO.Stream s)
        {
            return ((СвОКВЭДТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current СвОКВЭДТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвОКВЭДТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвОКВЭДТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвОКВЭДТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОКВЭДТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвОКВЭДТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвОКВЭДТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum СвОКВЭДТипПрВерсОКВЭД
    {

        [System.Xml.Serialization.XmlEnumAttribute("2001")]
        Item2001,

        [System.Xml.Serialization.XmlEnumAttribute("2014")]
        Item2014,
    }

    /// <summary>
    /// Сведения о нотариальном удостоверении договора залога
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class СвНотУдДогЗалТип
    {

        private bool _shouldSerializeДата;

        private static XmlSerializer serializer;

        /// <summary>
        /// ФИО и (при наличии) ИНН нотариуса, удостоверившего договор залога
        /// </summary>
        public СвФЛЕГРЮЛТип СвНотариус { get; set; }
        /// <summary>
        /// Номер договора залога
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер { get; set; }
        /// <summary>
        /// Дата договора залога
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime Дата { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(СвНотУдДогЗалТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Дата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДата()
        {
            if (_shouldSerializeДата)
            {
                return true;
            }
            return (Дата != default(System.DateTime));
        }

        /// <summary>
        /// Test whether СвНотариус should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНотариус()
        {
            return (СвНотариус != null);
        }

        /// <summary>
        /// Test whether Номер should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНомер()
        {
            return !string.IsNullOrEmpty(Номер);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвНотУдДогЗалТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an СвНотУдДогЗалТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвНотУдДогЗалТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out СвНотУдДогЗалТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНотУдДогЗалТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out СвНотУдДогЗалТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static СвНотУдДогЗалТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((СвНотУдДогЗалТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static СвНотУдДогЗалТип Deserialize(System.IO.Stream s)
        {
            return ((СвНотУдДогЗалТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current СвНотУдДогЗалТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвНотУдДогЗалТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвНотУдДогЗалТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвНотУдДогЗалТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНотУдДогЗалТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвНотУдДогЗалТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвНотУдДогЗалТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о ФИО и (при наличии) ИНН ФЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class СвФЛЕГРЮЛТип
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Фамилия
        /// </summary>
        /// <summary>
        /// Является обязательным при отсутствии имени ФЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Фамилия { get; set; }
        /// <summary>
        /// Имя
        /// </summary>
        /// <summary>
        /// Является обязательным при отсутствии фамилии ФЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Имя { get; set; }
        /// <summary>
        /// Отчество
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Отчество { get; set; }
        /// <summary>
        /// ИНН ФЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИННФЛ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(СвФЛЕГРЮЛТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether Фамилия should be serialized
        /// </summary>
        public virtual bool ShouldSerializeФамилия()
        {
            return !string.IsNullOrEmpty(Фамилия);
        }

        /// <summary>
        /// Test whether Имя should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИмя()
        {
            return !string.IsNullOrEmpty(Имя);
        }

        /// <summary>
        /// Test whether Отчество should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОтчество()
        {
            return !string.IsNullOrEmpty(Отчество);
        }

        /// <summary>
        /// Test whether ИННФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИННФЛ()
        {
            return !string.IsNullOrEmpty(ИННФЛ);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвФЛЕГРЮЛТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an СвФЛЕГРЮЛТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвФЛЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out СвФЛЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвФЛЕГРЮЛТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out СвФЛЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static СвФЛЕГРЮЛТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((СвФЛЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static СвФЛЕГРЮЛТип Deserialize(System.IO.Stream s)
        {
            return ((СвФЛЕГРЮЛТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current СвФЛЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвФЛЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвФЛЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвФЛЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвФЛЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвФЛЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвФЛЕГРЮЛТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об обременении доли участника, внесенные в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class СвОбремТип
    {

        private bool _shouldSerializeВидОбрем;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ГРНДата", typeof(ГРНДатаТип))]
        [System.Xml.Serialization.XmlElementAttribute("ГРНДатаИспр", typeof(ГРНДатаТип))]
        [System.Xml.Serialization.XmlElementAttribute("РешСуд", typeof(РешСудТип))]
        [System.Xml.Serialization.XmlElementAttribute("СвЗалогДержФЛ", typeof(СвОбремТипСвЗалогДержФЛ))]
        [System.Xml.Serialization.XmlElementAttribute("СвЗалогДержЮЛ", typeof(СвОбремТипСвЗалогДержЮЛ))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType1[] ItemsElementName { get; set; }
        /// <summary>
        /// Вид обременения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СвОбремТипВидОбрем ВидОбрем { get; set; }
        /// <summary>
        /// Срок обременения или порядок определения срока
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string СрокОбременения { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(СвОбремТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ВидОбрем should be serialized
        /// </summary>
        public virtual bool ShouldSerializeВидОбрем()
        {
            if (_shouldSerializeВидОбрем)
            {
                return true;
            }
            return (ВидОбрем != default(СвОбремТипВидОбрем));
        }

        /// <summary>
        /// Test whether СрокОбременения should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСрокОбременения()
        {
            return !string.IsNullOrEmpty(СрокОбременения);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвОбремТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an СвОбремТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвОбремТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out СвОбремТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОбремТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out СвОбремТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static СвОбремТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((СвОбремТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static СвОбремТип Deserialize(System.IO.Stream s)
        {
            return ((СвОбремТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current СвОбремТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвОбремТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвОбремТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвОбремТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОбремТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвОбремТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвОбремТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о решении суда
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class РешСудТип
    {

        private bool _shouldSerializeДата;

        private static XmlSerializer serializer;

        /// <summary>
        /// Наименование суда, которым принято решение
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСуда { get; set; }
        /// <summary>
        /// Номер решения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер { get; set; }
        /// <summary>
        /// Дата решения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime Дата { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(РешСудТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Дата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДата()
        {
            if (_shouldSerializeДата)
            {
                return true;
            }
            return (Дата != default(System.DateTime));
        }

        /// <summary>
        /// Test whether НаимСуда should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимСуда()
        {
            return !string.IsNullOrEmpty(НаимСуда);
        }

        /// <summary>
        /// Test whether Номер should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНомер()
        {
            return !string.IsNullOrEmpty(Номер);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current РешСудТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an РешСудТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output РешСудТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out РешСудТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(РешСудТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out РешСудТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static РешСудТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((РешСудТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static РешСудТип Deserialize(System.IO.Stream s)
        {
            return ((РешСудТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current РешСудТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an РешСудТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output РешСудТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out РешСудТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(РешСудТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out РешСудТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static РешСудТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о залогодержателе - ФЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class СвОбремТипСвЗалогДержФЛ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о ФИО и (при наличии) ИНН ФЛ
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ { get; set; }
        /// <summary>
        /// Сведения о рождении ФЛ
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public СвРождЕГРЮЛТип СвРождФЛ { get; set; }
        /// <summary>
        /// Сведения о документе, удостоверяющем личность
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public УдЛичнЕГРЮЛТип УдЛичнФЛ { get; set; }
        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public АдрРФЕГРЮЛТип АдресМЖРФ { get; set; }
        /// <summary>
        /// Сведения об адресе места жительства за пределами территории Российской Федерации
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМЖИн { get; set; }
        /// <summary>
        /// Сведения о нотариальном удостоверении договора залога
        /// </summary>
        public СвНотУдДогЗалТип СвНотУдДогЗал { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(СвОбремТипСвЗалогДержФЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether СвФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвФЛ()
        {
            return (СвФЛ != null);
        }

        /// <summary>
        /// Test whether СвРождФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРождФЛ()
        {
            return (СвРождФЛ != null);
        }

        /// <summary>
        /// Test whether УдЛичнФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeУдЛичнФЛ()
        {
            return (УдЛичнФЛ != null);
        }

        /// <summary>
        /// Test whether АдресМЖРФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдресМЖРФ()
        {
            return (АдресМЖРФ != null);
        }

        /// <summary>
        /// Test whether АдрМЖИн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдрМЖИн()
        {
            return (АдрМЖИн != null);
        }

        /// <summary>
        /// Test whether СвНотУдДогЗал should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНотУдДогЗал()
        {
            return (СвНотУдДогЗал != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвОбремТипСвЗалогДержФЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an СвОбремТипСвЗалогДержФЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвОбремТипСвЗалогДержФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out СвОбремТипСвЗалогДержФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОбремТипСвЗалогДержФЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out СвОбремТипСвЗалогДержФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static СвОбремТипСвЗалогДержФЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((СвОбремТипСвЗалогДержФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static СвОбремТипСвЗалогДержФЛ Deserialize(System.IO.Stream s)
        {
            return ((СвОбремТипСвЗалогДержФЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current СвОбремТипСвЗалогДержФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвОбремТипСвЗалогДержФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвОбремТипСвЗалогДержФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвОбремТипСвЗалогДержФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОбремТипСвЗалогДержФЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвОбремТипСвЗалогДержФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвОбремТипСвЗалогДержФЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о рождении ФЛ, внесенные в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class СвРождЕГРЮЛТип
    {

        private bool _shouldSerializeПрДатаРожд;

        private bool _shouldSerializeДатаРожд;

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Дата рождения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРожд { get; set; }
        /// <summary>
        /// Место рождения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string МестоРожд { get; set; }
        /// <summary>
        /// Признак полноты представляемой даты рождения физического лица
        /// </summary>
        /// <summary>
        /// , где: 1 – только год (сведения о месяце и дне в указанном месяце отсутствуют); 2 – только месяц и код (сведения о дне в указанном месяце отсутствуют); 3 – полная дата. Отсутствие указанного реквизита означает полную дату рождения (соответствует значению ПрДатаРожд=3)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СвРождЕГРЮЛТипПрДатаРожд ПрДатаРожд { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ПрДатаРождSpecified { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(СвРождЕГРЮЛТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаРожд should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаРожд()
        {
            if (_shouldSerializeДатаРожд)
            {
                return true;
            }
            return (ДатаРожд != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ПрДатаРожд should be serialized
        /// </summary>
        public virtual bool ShouldSerializeПрДатаРожд()
        {
            if (_shouldSerializeПрДатаРожд)
            {
                return true;
            }
            return (ПрДатаРожд != default(СвРождЕГРЮЛТипПрДатаРожд));
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether МестоРожд should be serialized
        /// </summary>
        public virtual bool ShouldSerializeМестоРожд()
        {
            return !string.IsNullOrEmpty(МестоРожд);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвРождЕГРЮЛТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an СвРождЕГРЮЛТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвРождЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out СвРождЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвРождЕГРЮЛТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out СвРождЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static СвРождЕГРЮЛТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((СвРождЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static СвРождЕГРЮЛТип Deserialize(System.IO.Stream s)
        {
            return ((СвРождЕГРЮЛТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current СвРождЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвРождЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвРождЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвРождЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвРождЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвРождЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвРождЕГРЮЛТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum СвРождЕГРЮЛТипПрДатаРожд
    {

        [System.Xml.Serialization.XmlEnumAttribute("0")]
        None,

        [System.Xml.Serialization.XmlEnumAttribute("1")]
        OnlyYear,

        [System.Xml.Serialization.XmlEnumAttribute("2")]
        MonthAndYear,

        [System.Xml.Serialization.XmlEnumAttribute("3")]
        FullDate,
    }

    /// <summary>
    /// Сведения о документе, удостоверяющем личность, внесенные в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class УдЛичнЕГРЮЛТип
    {

        private bool _shouldSerializeДатаДок;

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Код вида документа по справочнику СПДУЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодВидДок { get; set; }
        /// <summary>
        /// Наименование вида документа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимДок { get; set; }
        /// <summary>
        /// Серия и номер документа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string СерНомДок { get; set; }
        /// <summary>
        /// Дата выдачи
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаДок { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаДокSpecified { get; set; }
        /// <summary>
        /// Кем выдан
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВыдДок { get; set; }
        /// <summary>
        /// Код подразделения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодВыдДок { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(УдЛичнЕГРЮЛТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаДок should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаДок()
        {
            if (_shouldSerializeДатаДок)
            {
                return true;
            }
            return (ДатаДок != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether КодВидДок should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодВидДок()
        {
            return !string.IsNullOrEmpty(КодВидДок);
        }

        /// <summary>
        /// Test whether НаимДок should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимДок()
        {
            return !string.IsNullOrEmpty(НаимДок);
        }

        /// <summary>
        /// Test whether СерНомДок should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСерНомДок()
        {
            return !string.IsNullOrEmpty(СерНомДок);
        }

        /// <summary>
        /// Test whether ВыдДок should be serialized
        /// </summary>
        public virtual bool ShouldSerializeВыдДок()
        {
            return !string.IsNullOrEmpty(ВыдДок);
        }

        /// <summary>
        /// Test whether КодВыдДок should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодВыдДок()
        {
            return !string.IsNullOrEmpty(КодВыдДок);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current УдЛичнЕГРЮЛТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an УдЛичнЕГРЮЛТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output УдЛичнЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out УдЛичнЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(УдЛичнЕГРЮЛТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out УдЛичнЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static УдЛичнЕГРЮЛТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((УдЛичнЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static УдЛичнЕГРЮЛТип Deserialize(System.IO.Stream s)
        {
            return ((УдЛичнЕГРЮЛТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current УдЛичнЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an УдЛичнЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output УдЛичнЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out УдЛичнЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(УдЛичнЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out УдЛичнЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static УдЛичнЕГРЮЛТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об адресе в РФ, внесенные в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class АдрРФЕГРЮЛТип
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Субъект Российской Федерации
        /// </summary>
        public РегионТип Регион { get; set; }
        /// <summary>
        /// Район (улус и т.п.)
        /// </summary>
        public РайонТип Район { get; set; }
        /// <summary>
        /// Город (волость и т.п.)
        /// </summary>
        public ГородТип Город { get; set; }
        /// <summary>
        /// Населенный пункт (село и т.п.)
        /// </summary>
        public НаселПунктТип НаселПункт { get; set; }
        /// <summary>
        /// Улица (проспект, переулок и т.п.)
        /// </summary>
        public УлицаТип Улица { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Индекс
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Индекс { get; set; }
        /// <summary>
        /// Код субъекта Российской Федерации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодРегион { get; set; }
        /// <summary>
        /// Код адреса по КЛАДР
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодАдрКладр { get; set; }
        /// <summary>
        /// Дом (владение и т.п.)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дом { get; set; }
        /// <summary>
        /// Корпус (строение и т.п.)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Корпус { get; set; }
        /// <summary>
        /// Квартира (офис и т.п.)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Кварт { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(АдрРФЕГРЮЛТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Регион should be serialized
        /// </summary>
        public virtual bool ShouldSerializeРегион()
        {
            return (Регион != null);
        }

        /// <summary>
        /// Test whether Район should be serialized
        /// </summary>
        public virtual bool ShouldSerializeРайон()
        {
            return (Район != null);
        }

        /// <summary>
        /// Test whether Город should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГород()
        {
            return (Город != null);
        }

        /// <summary>
        /// Test whether НаселПункт should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаселПункт()
        {
            return (НаселПункт != null);
        }

        /// <summary>
        /// Test whether Улица should be serialized
        /// </summary>
        public virtual bool ShouldSerializeУлица()
        {
            return (Улица != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether Индекс should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИндекс()
        {
            return !string.IsNullOrEmpty(Индекс);
        }

        /// <summary>
        /// Test whether КодРегион should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодРегион()
        {
            return !string.IsNullOrEmpty(КодРегион);
        }

        /// <summary>
        /// Test whether КодАдрКладр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодАдрКладр()
        {
            return !string.IsNullOrEmpty(КодАдрКладр);
        }

        /// <summary>
        /// Test whether Дом should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДом()
        {
            return !string.IsNullOrEmpty(Дом);
        }

        /// <summary>
        /// Test whether Корпус should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКорпус()
        {
            return !string.IsNullOrEmpty(Корпус);
        }

        /// <summary>
        /// Test whether Кварт should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКварт()
        {
            return !string.IsNullOrEmpty(Кварт);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current АдрРФЕГРЮЛТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an АдрРФЕГРЮЛТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output АдрРФЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out АдрРФЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(АдрРФЕГРЮЛТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out АдрРФЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static АдрРФЕГРЮЛТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((АдрРФЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static АдрРФЕГРЮЛТип Deserialize(System.IO.Stream s)
        {
            return ((АдрРФЕГРЮЛТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current АдрРФЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an АдрРФЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output АдрРФЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out АдрРФЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(АдрРФЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out АдрРФЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static АдрРФЕГРЮЛТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о адресообразующем элементе регион
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class РегионТип
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Тип элемента регион (республика, край и т.п.)
        /// </summary>
        /// <summary>
        /// Принимает значение полного наименования типа адресного объекта в соответствии с Классификатором адресов России (КЛАДР)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТипРегион { get; set; }
        /// <summary>
        /// Наименование (элемент регион)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимРегион { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(РегионТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ТипРегион should be serialized
        /// </summary>
        public virtual bool ShouldSerializeТипРегион()
        {
            return !string.IsNullOrEmpty(ТипРегион);
        }

        /// <summary>
        /// Test whether НаимРегион should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимРегион()
        {
            return !string.IsNullOrEmpty(НаимРегион);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current РегионТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an РегионТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output РегионТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out РегионТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(РегионТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out РегионТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static РегионТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((РегионТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static РегионТип Deserialize(System.IO.Stream s)
        {
            return ((РегионТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current РегионТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an РегионТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output РегионТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out РегионТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(РегионТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out РегионТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static РегионТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведенияо о адресообразующем элементе район
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class РайонТип
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Тип элемента район (улус и т.п.)
        /// </summary>
        /// <summary>
        /// Принимает значение полного наименования типа адресного объекта в соответствии с Классификатором адресов России (КЛАДР)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТипРайон { get; set; }
        /// <summary>
        /// Наименование (элемент район)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимРайон { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(РайонТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ТипРайон should be serialized
        /// </summary>
        public virtual bool ShouldSerializeТипРайон()
        {
            return !string.IsNullOrEmpty(ТипРайон);
        }

        /// <summary>
        /// Test whether НаимРайон should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимРайон()
        {
            return !string.IsNullOrEmpty(НаимРайон);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current РайонТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an РайонТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output РайонТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out РайонТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(РайонТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out РайонТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static РайонТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((РайонТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static РайонТип Deserialize(System.IO.Stream s)
        {
            return ((РайонТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current РайонТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an РайонТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output РайонТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out РайонТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(РайонТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out РайонТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static РайонТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведенияо о адресообразующем элементе город
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ГородТип
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Тип элемента город (волость и т.п.)
        /// </summary>
        /// <summary>
        /// Принимает значение полного наименования типа адресного объекта в соответствии с Классификатором адресов России (КЛАДР)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТипГород { get; set; }
        /// <summary>
        /// Наименование (элемент город)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимГород { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ГородТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ТипГород should be serialized
        /// </summary>
        public virtual bool ShouldSerializeТипГород()
        {
            return !string.IsNullOrEmpty(ТипГород);
        }

        /// <summary>
        /// Test whether НаимГород should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимГород()
        {
            return !string.IsNullOrEmpty(НаимГород);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ГородТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ГородТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ГородТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ГородТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ГородТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ГородТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ГородТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ГородТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ГородТип Deserialize(System.IO.Stream s)
        {
            return ((ГородТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ГородТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ГородТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ГородТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ГородТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ГородТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ГородТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ГородТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведенияо о адресообразующем элементе населенный пункт
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class НаселПунктТип
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Тип элемента населенный пункт (село и т.п.)
        /// </summary>
        /// <summary>
        /// Принимает значение полного наименования типа адресного объекта в соответствии с Классификатором адресов России (КЛАДР)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТипНаселПункт { get; set; }
        /// <summary>
        /// Наименование (элемент населенный пункт)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимНаселПункт { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(НаселПунктТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ТипНаселПункт should be serialized
        /// </summary>
        public virtual bool ShouldSerializeТипНаселПункт()
        {
            return !string.IsNullOrEmpty(ТипНаселПункт);
        }

        /// <summary>
        /// Test whether НаимНаселПункт should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимНаселПункт()
        {
            return !string.IsNullOrEmpty(НаимНаселПункт);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current НаселПунктТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an НаселПунктТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output НаселПунктТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out НаселПунктТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(НаселПунктТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out НаселПунктТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static НаселПунктТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((НаселПунктТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static НаселПунктТип Deserialize(System.IO.Stream s)
        {
            return ((НаселПунктТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current НаселПунктТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an НаселПунктТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output НаселПунктТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out НаселПунктТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(НаселПунктТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out НаселПунктТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static НаселПунктТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о адресообразующем элементе улица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class УлицаТип
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Тип адресного объекта улица (проспект, переулок и т.п.)
        /// </summary>
        /// <summary>
        /// Принимает значение полного наименования типа адресного объекта в соответствии с Классификатором адресов России (КЛАДР)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТипУлица { get; set; }
        /// <summary>
        /// Наименование (элемент улица)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимУлица { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(УлицаТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ТипУлица should be serialized
        /// </summary>
        public virtual bool ShouldSerializeТипУлица()
        {
            return !string.IsNullOrEmpty(ТипУлица);
        }

        /// <summary>
        /// Test whether НаимУлица should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимУлица()
        {
            return !string.IsNullOrEmpty(НаимУлица);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current УлицаТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an УлицаТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output УлицаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out УлицаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(УлицаТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out УлицаТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static УлицаТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((УлицаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static УлицаТип Deserialize(System.IO.Stream s)
        {
            return ((УлицаТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current УлицаТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an УлицаТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output УлицаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out УлицаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(УлицаТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out УлицаТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static УлицаТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об адресе за пределами территории РФ, внесенные в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class АдрИнЕГРЮЛТип
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Код страны
        /// </summary>
        /// <summary>
        /// Принимает значение в соответствии с Общероссийским классификатором стран мира (ОКСМ)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОКСМ { get; set; }
        /// <summary>
        /// Наименование страны
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСтран { get; set; }
        /// <summary>
        /// Адрес
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string АдрИн { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(АдрИнЕГРЮЛТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether ОКСМ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОКСМ()
        {
            return !string.IsNullOrEmpty(ОКСМ);
        }

        /// <summary>
        /// Test whether НаимСтран should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимСтран()
        {
            return !string.IsNullOrEmpty(НаимСтран);
        }

        /// <summary>
        /// Test whether АдрИн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдрИн()
        {
            return !string.IsNullOrEmpty(АдрИн);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current АдрИнЕГРЮЛТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an АдрИнЕГРЮЛТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output АдрИнЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out АдрИнЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(АдрИнЕГРЮЛТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out АдрИнЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static АдрИнЕГРЮЛТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((АдрИнЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static АдрИнЕГРЮЛТип Deserialize(System.IO.Stream s)
        {
            return ((АдрИнЕГРЮЛТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current АдрИнЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an АдрИнЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output АдрИнЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out АдрИнЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(АдрИнЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out АдрИнЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static АдрИнЕГРЮЛТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о залогодержателе - ЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class СвОбремТипСвЗалогДержЮЛ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о наименовании и (при наличии) ОГРН и ИНН ЮЛ
        /// </summary>
        public СвЮЛЕГРЮЛТип НаимИННЮЛ { get; set; }
        /// <summary>
        /// Сведения о регистрации в стране происхождения
        /// </summary>
        /// <summary>
        /// Формируется при наличии указанных сведений в ЕГРЮЛ в отношении управляющей организации - иностранного ЮЛ
        /// </summary>
        public СвРегИнЮЛЕГРЮЛТип СвРегИн { get; set; }
        /// <summary>
        /// Сведения о нотариальном удостоверении договора залога
        /// </summary>
        public СвНотУдДогЗалТип СвНотУдДогЗал { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(СвОбремТипСвЗалогДержЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether НаимИННЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимИННЮЛ()
        {
            return (НаимИННЮЛ != null);
        }

        /// <summary>
        /// Test whether СвРегИн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРегИн()
        {
            return (СвРегИн != null);
        }

        /// <summary>
        /// Test whether СвНотУдДогЗал should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНотУдДогЗал()
        {
            return (СвНотУдДогЗал != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвОбремТипСвЗалогДержЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an СвОбремТипСвЗалогДержЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвОбремТипСвЗалогДержЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out СвОбремТипСвЗалогДержЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОбремТипСвЗалогДержЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out СвОбремТипСвЗалогДержЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static СвОбремТипСвЗалогДержЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((СвОбремТипСвЗалогДержЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static СвОбремТипСвЗалогДержЮЛ Deserialize(System.IO.Stream s)
        {
            return ((СвОбремТипСвЗалогДержЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current СвОбремТипСвЗалогДержЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвОбремТипСвЗалогДержЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвОбремТипСвЗалогДержЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвОбремТипСвЗалогДержЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОбремТипСвЗалогДержЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвОбремТипСвЗалогДержЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвОбремТипСвЗалогДержЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о наименовании и (при наличии) ИНН и ОГРН ЮЛ - учредителя (участника), управляющей организации, залогодержателя, управляющего долей участника, внесенные в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class СвЮЛЕГРЮЛТип
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }
        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }
        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(СвЮЛЕГРЮЛТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether ОГРН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОГРН()
        {
            return !string.IsNullOrEmpty(ОГРН);
        }

        /// <summary>
        /// Test whether ИНН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИНН()
        {
            return !string.IsNullOrEmpty(ИНН);
        }

        /// <summary>
        /// Test whether НаимЮЛПолн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимЮЛПолн()
        {
            return !string.IsNullOrEmpty(НаимЮЛПолн);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвЮЛЕГРЮЛТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an СвЮЛЕГРЮЛТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвЮЛЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out СвЮЛЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвЮЛЕГРЮЛТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out СвЮЛЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static СвЮЛЕГРЮЛТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((СвЮЛЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static СвЮЛЕГРЮЛТип Deserialize(System.IO.Stream s)
        {
            return ((СвЮЛЕГРЮЛТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current СвЮЛЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвЮЛЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвЮЛЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвЮЛЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвЮЛЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвЮЛЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвЮЛЕГРЮЛТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о регистрации иностранного ЮЛ в стране происхождения, внесенные в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class СвРегИнЮЛЕГРЮЛТип
    {

        private bool _shouldSerializeДатаРег;

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Код страны происхождения
        /// </summary>
        /// <summary>
        /// Принимает значение в соответствии с Общероссийским классификатором стран мира (ОКСМ)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОКСМ { get; set; }
        /// <summary>
        /// Наименование страны происхождения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСтран { get; set; }
        /// <summary>
        /// Дата регистрации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРег { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаРегSpecified { get; set; }
        /// <summary>
        /// Регистрационный номер
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string РегНомер { get; set; }
        /// <summary>
        /// Наименование регистрирующего органа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимРегОрг { get; set; }
        /// <summary>
        /// Адрес (место нахождения) в стране происхождения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string АдрСтр { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(СвРегИнЮЛЕГРЮЛТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаРег should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаРег()
        {
            if (_shouldSerializeДатаРег)
            {
                return true;
            }
            return (ДатаРег != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether ОКСМ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОКСМ()
        {
            return !string.IsNullOrEmpty(ОКСМ);
        }

        /// <summary>
        /// Test whether НаимСтран should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимСтран()
        {
            return !string.IsNullOrEmpty(НаимСтран);
        }

        /// <summary>
        /// Test whether РегНомер should be serialized
        /// </summary>
        public virtual bool ShouldSerializeРегНомер()
        {
            return !string.IsNullOrEmpty(РегНомер);
        }

        /// <summary>
        /// Test whether НаимРегОрг should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимРегОрг()
        {
            return !string.IsNullOrEmpty(НаимРегОрг);
        }

        /// <summary>
        /// Test whether АдрСтр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдрСтр()
        {
            return !string.IsNullOrEmpty(АдрСтр);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвРегИнЮЛЕГРЮЛТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an СвРегИнЮЛЕГРЮЛТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвРегИнЮЛЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out СвРегИнЮЛЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвРегИнЮЛЕГРЮЛТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out СвРегИнЮЛЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static СвРегИнЮЛЕГРЮЛТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((СвРегИнЮЛЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static СвРегИнЮЛЕГРЮЛТип Deserialize(System.IO.Stream s)
        {
            return ((СвРегИнЮЛЕГРЮЛТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current СвРегИнЮЛЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвРегИнЮЛЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвРегИнЮЛЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвРегИнЮЛЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвРегИнЮЛЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвРегИнЮЛЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвРегИнЮЛЕГРЮЛТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema = false)]
    public enum ItemsChoiceType1
    {

        /// <remarks/>
        ГРНДата,

        /// <remarks/>
        ГРНДатаИспр,

        /// <remarks/>
        РешСуд,

        /// <remarks/>
        СвЗалогДержФЛ,

        /// <remarks/>
        СвЗалогДержЮЛ,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum СвОбремТипВидОбрем
    {

        ЗАЛОГ,

        [System.Xml.Serialization.XmlEnumAttribute("ИНОЕ ОБРЕМЕНЕНИЕ")]
        ИНОЕОБРЕМЕНЕНИЕ,
    }

    /// <summary>
    /// Доля в уставном капитале (складочном капитале, уставном фонде, паевом фонде), внесенная в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ДоляУстКапЕГРЮЛТип
    {

        private bool _shouldSerializeНоминСтоим;

        private static XmlSerializer serializer;

        /// <summary>
        /// Размер доли (в процентах или в виде дроби - десятичной или простой)
        /// </summary>
        public ДоляУстКапЕГРЮЛТипРазмерДоли РазмерДоли { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Номинальная стоимость доли в рублях
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal НоминСтоим { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ДоляУстКапЕГРЮЛТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether НоминСтоим should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНоминСтоим()
        {
            if (_shouldSerializeНоминСтоим)
            {
                return true;
            }
            return (НоминСтоим != default(decimal));
        }

        /// <summary>
        /// Test whether РазмерДоли should be serialized
        /// </summary>
        public virtual bool ShouldSerializeРазмерДоли()
        {
            return (РазмерДоли != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДоляУстКапЕГРЮЛТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ДоляУстКапЕГРЮЛТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДоляУстКапЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ДоляУстКапЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ДоляУстКапЕГРЮЛТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ДоляУстКапЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ДоляУстКапЕГРЮЛТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ДоляУстКапЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ДоляУстКапЕГРЮЛТип Deserialize(System.IO.Stream s)
        {
            return ((ДоляУстКапЕГРЮЛТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ДоляУстКапЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ДоляУстКапЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДоляУстКапЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДоляУстКапЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ДоляУстКапЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ДоляУстКапЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ДоляУстКапЕГРЮЛТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Размер доли (в процентах или в виде дроби - десятичной или простой)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ДоляУстКапЕГРЮЛТипРазмерДоли
    {

        private static XmlSerializer serializer;



        //[System.Xml.Serialization.XmlElementAttribute("Процент", typeof(string))]
        //[System.Xml.Serialization.XmlElementAttribute("ДробДесят", typeof(string))]
        //[System.Xml.Serialization.XmlElementAttribute("ФормулаДроби", typeof(string))]

        [System.Xml.Serialization.XmlElementAttribute("Процент", typeof(decimal))]
        [System.Xml.Serialization.XmlElementAttribute("ДробДесят", typeof(decimal))]
        [System.Xml.Serialization.XmlElementAttribute("ДробПрост", typeof(ДробьТип))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType[] ItemsElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ДоляУстКапЕГРЮЛТипРазмерДоли));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДоляУстКапЕГРЮЛТипРазмерДоли object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ДоляУстКапЕГРЮЛТипРазмерДоли object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДоляУстКапЕГРЮЛТипРазмерДоли object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ДоляУстКапЕГРЮЛТипРазмерДоли obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ДоляУстКапЕГРЮЛТипРазмерДоли);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ДоляУстКапЕГРЮЛТипРазмерДоли obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ДоляУстКапЕГРЮЛТипРазмерДоли Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ДоляУстКапЕГРЮЛТипРазмерДоли)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ДоляУстКапЕГРЮЛТипРазмерДоли Deserialize(System.IO.Stream s)
        {
            return ((ДоляУстКапЕГРЮЛТипРазмерДоли)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ДоляУстКапЕГРЮЛТипРазмерДоли object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ДоляУстКапЕГРЮЛТипРазмерДоли object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДоляУстКапЕГРЮЛТипРазмерДоли object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДоляУстКапЕГРЮЛТипРазмерДоли obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ДоляУстКапЕГРЮЛТипРазмерДоли);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ДоляУстКапЕГРЮЛТипРазмерДоли obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ДоляУстКапЕГРЮЛТипРазмерДоли LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Представление простой дроби
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ДробьТип
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Числитель простой дроби
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string Числит { get; set; }
        /// <summary>
        /// Знаменатель простой дроби
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string Знаменат { get; set; }

        /// <summary>
        /// Создан вручную элемент для корректной вставки в ElasticSearch параметр ДробДесят
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string ДробДесят { get; set; }

        /// <summary>
        /// Создан вручную элемент для корректной вставки в ElasticSearch параметр Процент
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string Процент { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ДробьТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Числит should be serialized
        /// </summary>
        public virtual bool ShouldSerializeЧислит()
        {
            return !string.IsNullOrEmpty(Числит);
        }

        /// <summary>
        /// Test whether Знаменат should be serialized
        /// </summary>
        public virtual bool ShouldSerializeЗнаменат()
        {
            return !string.IsNullOrEmpty(Знаменат);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДробьТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ДробьТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДробьТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ДробьТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ДробьТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ДробьТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ДробьТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ДробьТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ДробьТип Deserialize(System.IO.Stream s)
        {
            return ((ДробьТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ДробьТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ДробьТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДробьТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДробьТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ДробьТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ДробьТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ДробьТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema = false)]
    public enum ItemsChoiceType
    {

        /// <remarks/>
        ДробДесят,

        /// <remarks/>
        ДробПрост,

        /// <remarks/>
        Процент,
    }

    /// <summary>
    /// Сведения о недостоверности данных об учредителе (участнике)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class СвНедДанУчрТип
    {

        private bool _shouldSerializeПризнНедДанУчр;

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения о решении суда, на основании которого указанные сведения признаны недостоверными
        /// </summary>
        /// <summary>
        /// Формируется в случае, если значение реквизита ПризнНедДанУчр = 3
        /// </summary>
        public РешСудТип РешСудНедДанУчр { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Признак недостоверности данных
        /// </summary>
        /// <summary>
        /// , где: 1 - признак недостоверности, внесенный в ЕГРЮЛ на основании заявления по форме Р34001 самого физического лица (если сведения о недостоверности сведений об учредителе (участнике) внесены на основании записи с кодом СПВЗ 17022); 2 - признак недостоверности, внесенный в ЕГРЮЛ по результатам проверки достоверности содержащихся в ЕГРЮЛ сведений о юридическом лице (если сведения о недостоверности сведений об учредителе (участнике) внесены на основании записи с кодом СПВЗ 17023); 3 - признак недостоверности, внесенный в ЕГРЮЛ на основании решения суда (если сведения о недостоверности сведений об учредителе (участнике) внесены на основании записи с кодом СПВЗ 16006)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СвНедДанУчрТипПризнНедДанУчр ПризнНедДанУчр { get; set; }
        /// <summary>
        /// Текст о недостоверности сведений, выводимый в выписке в строке с наименованием «Дополнительные сведения»
        /// </summary>
        /// <summary>
        /// Принимает значение: •	«сведения недостоверны (заявление физического лица о недостоверности сведений о нем)» - если сведения о недостоверности внесены по заявлению самого ФЛ (Р34001) (ПризнНедДанУчр =1), •	«сведения недостоверны (результаты проверки достоверности содержащихся в ЕГРЮЛ сведений о юридическом лице)» - если сведения о недостоверности внесены по данным, выявленным НО (ПризнНедДанУчр=2), •	«сведения недостоверны (решение суда)» - если сведения о недостоверности внесены на основании решения суда (ПризнНедДанУчр=3), Выводится в выписке в строке с наименованием «Дополнительные сведения»
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТекстНедДанУчр { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(СвНедДанУчрТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ПризнНедДанУчр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeПризнНедДанУчр()
        {
            if (_shouldSerializeПризнНедДанУчр)
            {
                return true;
            }
            return (ПризнНедДанУчр != default(СвНедДанУчрТипПризнНедДанУчр));
        }

        /// <summary>
        /// Test whether РешСудНедДанУчр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeРешСудНедДанУчр()
        {
            return (РешСудНедДанУчр != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether ТекстНедДанУчр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeТекстНедДанУчр()
        {
            return !string.IsNullOrEmpty(ТекстНедДанУчр);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвНедДанУчрТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an СвНедДанУчрТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвНедДанУчрТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out СвНедДанУчрТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНедДанУчрТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out СвНедДанУчрТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static СвНедДанУчрТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((СвНедДанУчрТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static СвНедДанУчрТип Deserialize(System.IO.Stream s)
        {
            return ((СвНедДанУчрТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current СвНедДанУчрТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвНедДанУчрТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвНедДанУчрТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвНедДанУчрТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНедДанУчрТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвНедДанУчрТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвНедДанУчрТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum СвНедДанУчрТипПризнНедДанУчр
    {

        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    /// <summary>
    /// Сведения о контактном телефоне
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class СвНомТелТип
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Контактный телефон
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомТел { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(СвНомТелТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether НомТел should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНомТел()
        {
            return !string.IsNullOrEmpty(НомТел);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвНомТелТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an СвНомТелТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвНомТелТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out СвНомТелТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНомТелТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out СвНомТелТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static СвНомТелТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((СвНомТелТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static СвНомТелТип Deserialize(System.IO.Stream s)
        {
            return ((СвНомТелТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current СвНомТелТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвНомТелТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвНомТелТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвНомТелТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНомТелТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвНомТелТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвНомТелТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о регистрирующем органе
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class СвРегОргТип
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Код органа по справочнику СОНО
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодНО { get; set; }
        /// <summary>
        /// Наименование регистрирующего (налогового) органа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимНО { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(СвРегОргТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether КодНО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодНО()
        {
            return !string.IsNullOrEmpty(КодНО);
        }

        /// <summary>
        /// Test whether НаимНО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимНО()
        {
            return !string.IsNullOrEmpty(НаимНО);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвРегОргТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an СвРегОргТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвРегОргТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out СвРегОргТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвРегОргТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out СвРегОргТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static СвРегОргТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((СвРегОргТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static СвРегОргТип Deserialize(System.IO.Stream s)
        {
            return ((СвРегОргТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current СвРегОргТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвРегОргТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвРегОргТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвРегОргТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвРегОргТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвРегОргТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвРегОргТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об адресе (месте нахождения)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвАдресЮЛ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Адрес (место нахождения) юридического лица
        /// </summary>
        public АдрРФЕГРЮЛТип АдресРФ { get; set; }
        /// <summary>
        /// Сведения о недостоверности адреса
        /// </summary>
        /// <summary>
        /// Формируется только если в ЕГРЮЛ внесены сведения о недостоверности адреса, а сам адрес ЮЛ еще не изменен
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедАдресЮЛ")]
        public List<EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ> СвНедАдресЮЛ { get; set; }
        /// <summary>
        /// Сведения о недостоверности адреса или отсутствии связи с ЮЛ по указанному адресу
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СведОтсутАдресЮЛ")]
        public List<EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ> СведОтсутАдресЮЛ { get; set; }
        /// <summary>
        /// Сведения о принятии юридическим лицом решения об изменении места нахождения
        /// </summary>
        /// <summary>
        /// Формируется только если в ЕГРЮЛ внесены сведения о принятии такого решения, а сам адрес ЮЛ еще не изменен
        /// </summary>
        public EGRULСвЮЛСвАдресЮЛСвРешИзмМН СвРешИзмМН { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвАдресЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвНедАдресЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНедАдресЮЛ()
        {
            return СвНедАдресЮЛ != null && СвНедАдресЮЛ.Count > 0;
        }

        /// <summary>
        /// Test whether СведОтсутАдресЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСведОтсутАдресЮЛ()
        {
            return СведОтсутАдресЮЛ != null && СведОтсутАдресЮЛ.Count > 0;
        }

        /// <summary>
        /// Test whether АдресРФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдресРФ()
        {
            return (АдресРФ != null);
        }

        /// <summary>
        /// Test whether СвРешИзмМН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРешИзмМН()
        {
            return (СвРешИзмМН != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвАдресЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвАдресЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвАдресЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвАдресЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвАдресЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвАдресЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвАдресЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвАдресЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвАдресЮЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвАдресЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвАдресЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвАдресЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвАдресЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвАдресЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвАдресЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвАдресЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвАдресЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о недостоверности адреса
    /// </summary>
    /// <summary>
    /// Формируется только если в ЕГРЮЛ внесены сведения о недостоверности адреса, а сам адрес ЮЛ еще не изменен
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ
    {

        private bool _shouldSerializeПризнНедАдресЮЛ;

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения о решении суда, на основании которого адрес признан недостоверным
        /// </summary>
        /// <summary>
        /// Формируется в случае, если значение реквизита ПризнНедАдресЮЛ = 3
        /// </summary>
        public РешСудТип РешСудНедАдр { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Признак недостоверности адреса
        /// </summary>
        /// <summary>
        /// , где: 2 - признак недостоверности, внесенный в ЕГРЮЛ по результатам проверки достоверности содержащихся в ЕГРЮЛ сведений о юридическом лице (если сведения о недостоверности сведений об адресе внесены на основании записи с кодом СПВЗ 17023); 3 - признак недостоверности, внесенный в ЕГРЮЛ на основании решения суда (если сведения о недостоверности сведений об адресе внесены на основании записи с кодом СПВЗ 16006)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛПризнНедАдресЮЛ ПризнНедАдресЮЛ { get; set; }
        /// <summary>
        /// Текст о недостоверности сведений, выводимый в выписке в строке с наименованием «Дополнительные сведения»
        /// </summary>
        /// <summary>
        /// Принимает значение: •	«сведения недостоверны (результаты проверки достоверности содержащихся в ЕГРЮЛ сведений о юридическом лице)» - если сведения о недостоверности внесены по данным, выявленным НО (ПризнНедАдресЮЛ=2): •	«сведения недостоверны (решение суда)» - если сведения о недостоверности внесены на основании решения суда (ПризнНедАдресЮЛ=3). Выводится в выписке в строке с наименованием «Дополнительные сведения»
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТекстНедАдресЮЛ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ПризнНедАдресЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeПризнНедАдресЮЛ()
        {
            if (_shouldSerializeПризнНедАдресЮЛ)
            {
                return true;
            }
            return (ПризнНедАдресЮЛ != default(EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛПризнНедАдресЮЛ));
        }

        /// <summary>
        /// Test whether РешСудНедАдр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeРешСудНедАдр()
        {
            return (РешСудНедАдр != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether ТекстНедАдресЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeТекстНедАдресЮЛ()
        {
            return !string.IsNullOrEmpty(ТекстНедАдресЮЛ);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum EGRULСвЮЛСвАдресЮЛСвНедАдресЮЛПризнНедАдресЮЛ
    {

        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2 = 2,

        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3 = 3,
    }

    /// <summary>
    /// Сведения о недостоверности адреса или отсутствии связи с ЮЛ по указанному адресу
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ
    {

        private bool _shouldSerializeПризнНедАдресЮЛ;

        private bool _shouldSerializeПризнОтсутАдресЮЛ;

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения о решении суда, на основании которого адрес признан недостоверным
        /// </summary>
        /// <summary>
        /// Формируется в случае, если значение реквизита ПризнОтсутАдресЮЛ = 3
        /// </summary>
        public РешСудТип РешСудНедАдр { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Признак невозможности взаимодействия с юридическим лицом по содержащемуся в ЕГРЮЛ адресу
        /// </summary>
        /// <summary>
        /// , где: 1 - связь с юридическим лицом по указанному в ЕГРЮЛ адресу отсутствует; 2 - адрес, указанный юридическим лицом при государственной регистрации, не существует 3 - сведения об адресе являются недостоверными на основании решения суда
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛПризнОтсутАдресЮЛ ПризнОтсутАдресЮЛ { get; set; }
        /// <summary>
        /// Признак недостоверности адреса
        /// </summary>
        /// <summary>
        /// , где: 2 - признак недостоверности, внесенный в ЕГРЮЛ по результатам проверки достоверности содержащихся в ЕГРЮЛ сведений о юридическом лице (если сведения о недостоверности сведений об адресе внесены на основании записи с кодом СПВЗ 17023); 3 - признак недостоверности, внесенный в ЕГРЮЛ на основании решения суда (если сведения о недостоверности сведений об адресе внесены на основании записи с кодом СПВЗ 16006)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛПризнНедАдресЮЛ ПризнНедАдресЮЛ { get; set; }
        /// <summary>
        /// Текст о недостоверности сведений, выводимый в выписке в строке с наименованием «Дополнительные сведения»
        /// </summary>
        /// <summary>
        /// Принимает значение: •	«сведения недостоверны (результаты проверки достоверности содержащихся в ЕГРЮЛ сведений о юридическом лице)» - если сведения о недостоверности внесены по данным, выявленным НО (ПризнНедАдресЮЛ=2): •	«сведения недостоверны (решение суда)» - если сведения о недостоверности внесены на основании решения суда (ПризнНедАдресЮЛ=3). Выводится в выписке в строке с наименованием «Дополнительные сведения»
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТекстНедАдресЮЛ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ПризнОтсутАдресЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeПризнОтсутАдресЮЛ()
        {
            if (_shouldSerializeПризнОтсутАдресЮЛ)
            {
                return true;
            }
            return (ПризнОтсутАдресЮЛ != default(EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛПризнОтсутАдресЮЛ));
        }

        /// <summary>
        /// Test whether ПризнНедАдресЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeПризнНедАдресЮЛ()
        {
            if (_shouldSerializeПризнНедАдресЮЛ)
            {
                return true;
            }
            return (ПризнНедАдресЮЛ != default(EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛПризнНедАдресЮЛ));
        }

        /// <summary>
        /// Test whether РешСудНедАдр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeРешСудНедАдр()
        {
            return (РешСудНедАдр != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether ТекстНедАдресЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeТекстНедАдресЮЛ()
        {
            return !string.IsNullOrEmpty(ТекстНедАдресЮЛ);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛПризнОтсутАдресЮЛ
    {

        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum EGRULСвЮЛСвАдресЮЛСведОтсутАдресЮЛПризнНедАдресЮЛ
    {

        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    /// <summary>
    /// Сведения о принятии юридическим лицом решения об изменении места нахождения
    /// </summary>
    /// <summary>
    /// Формируется только если в ЕГРЮЛ внесены сведения о принятии такого решения, а сам адрес ЮЛ еще не изменен
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвАдресЮЛСвРешИзмМН
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Субъект Российской Федерации
        /// </summary>
        /// <summary>
        /// Выгружаются сведения о субъекте РФ по новому месту нахождения ЮЛ из принятого решения об изменении места нахождения
        /// </summary>
        public РегионТип Регион { get; set; }
        /// <summary>
        /// Район (улус и т.п.)
        /// </summary>
        /// <summary>
        /// Выгружаются сведения о районе по новому месту нахождения ЮЛ из принятого решения об изменении места нахождения (при наличии в заявлении о принятом решении об изменении места нахождения ЮЛ)
        /// </summary>
        public РайонТип Район { get; set; }
        /// <summary>
        /// Город (волость и т.п.)
        /// </summary>
        /// <summary>
        /// Выгружаются сведения о городе по новому месту нахождения ЮЛ из принятого решения об изменении места нахождения (при наличии в заявлении о принятом решении об изменении места нахождения ЮЛ)
        /// </summary>
        public ГородТип Город { get; set; }
        /// <summary>
        /// Населенный пункт (село и т.п.)
        /// </summary>
        /// <summary>
        /// Выгружаются сведения о населенном пункте по новому месту нахождения ЮЛ из принятого решения об изменении места нахождения (при наличии в заявлении о принятом решении об изменении места нахождения ЮЛ)
        /// </summary>
        public НаселПунктТип НаселПункт { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Текст, выводимый в выписке в строке с наименованием «Дополнительные сведения»
        /// </summary>
        /// <summary>
        /// Принимает значение: Юридическим лицом принято решение об изменении места нахождения. Выводится в выписке в строке с наименованием «Дополнительные сведения»
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТекстРешИзмМН { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвАдресЮЛСвРешИзмМН));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Регион should be serialized
        /// </summary>
        public virtual bool ShouldSerializeРегион()
        {
            return (Регион != null);
        }

        /// <summary>
        /// Test whether Район should be serialized
        /// </summary>
        public virtual bool ShouldSerializeРайон()
        {
            return (Район != null);
        }

        /// <summary>
        /// Test whether Город should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГород()
        {
            return (Город != null);
        }

        /// <summary>
        /// Test whether НаселПункт should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаселПункт()
        {
            return (НаселПункт != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether ТекстРешИзмМН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeТекстРешИзмМН()
        {
            return !string.IsNullOrEmpty(ТекстРешИзмМН);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвАдресЮЛСвРешИзмМН object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвАдресЮЛСвРешИзмМН object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвАдресЮЛСвРешИзмМН object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвАдресЮЛСвРешИзмМН obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвАдресЮЛСвРешИзмМН);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвАдресЮЛСвРешИзмМН obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвАдресЮЛСвРешИзмМН Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвАдресЮЛСвРешИзмМН)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвАдресЮЛСвРешИзмМН Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвАдресЮЛСвРешИзмМН)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвАдресЮЛСвРешИзмМН object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвАдресЮЛСвРешИзмМН object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвАдресЮЛСвРешИзмМН object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвАдресЮЛСвРешИзмМН obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвАдресЮЛСвРешИзмМН);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвАдресЮЛСвРешИзмМН obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвАдресЮЛСвРешИзмМН LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об адресе электронной почты юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвАдрЭлПочты
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        [System.Xml.Serialization.XmlAttributeAttribute("E-mail")]
        public string Email { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвАдрЭлПочты));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether Email should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEmail()
        {
            return !string.IsNullOrEmpty(Email);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвАдрЭлПочты object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвАдрЭлПочты object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвАдрЭлПочты object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвАдрЭлПочты obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвАдрЭлПочты);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвАдрЭлПочты obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвАдрЭлПочты Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвАдрЭлПочты)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвАдрЭлПочты Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвАдрЭлПочты)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвАдрЭлПочты object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвАдрЭлПочты object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвАдрЭлПочты object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвАдрЭлПочты obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвАдрЭлПочты);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвАдрЭлПочты obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвАдрЭлПочты LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о регистрации (образовании) юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвОбрЮЛ
    {

        private bool _shouldSerializeДатаРег;

        private bool _shouldSerializeДатаОГРН;

        private static XmlSerializer serializer;

        /// <summary>
        /// Способ образования юридического лица
        /// </summary>
        public EGRULСвЮЛСвОбрЮЛСпОбрЮЛ СпОбрЮЛ { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }
        /// <summary>
        /// Дата присвоения ОГРН
        /// </summary>
        /// <summary>
        /// Для ЮЛ, созданных после 01.07.2002 г., является датой регистрации ЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаОГРН { get; set; }
        /// <summary>
        /// Регистрационный номер, присвоенный российскому юридическому лицу до 1 июля 2002 года, или регистрационный номер юридического лица на территории Республики Крым или территории города федерального значения Севастополя на день принятия в РФ и образования в составе РФ новых субъектов - Республики Крым и города федерального значения Севастополя
        /// </summary>
        /// <summary>
        /// Формируется только в отношении российских ЮЛ, созданных до 1 июля 2002 года, а также в отношении ЮЛ зарегистрированных на территории Республики Крым или территории города федерального значения Севастополя на день принятия в РФ и образования в составе РФ новых субъектов - Республики Крым и города федерального значения Севастополя (значение реквизита «КодСпОбрЮЛ» в элементе «СпОбрЮЛ» =«03») Не формируется в отношении российских организаций, созданных с 1 июля 2002 года (значение реквизита «КодСпОбрЮЛ» в элементе «СпОбрЮЛ» больше «03»)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string РегНом { get; set; }
        /// <summary>
        /// Дата регистрации юридического лица
        /// </summary>
        /// <summary>
        /// Формируется только в отношении российских ЮЛ, созданных до 1 июля 2002 года, а также в отношении ЮЛ зарегистрированных на территории Республики Крым или территории города федерального значения Севастополя на день принятия в РФ и образования в составе РФ новых субъектов - Республики Крым и города федерального значения Севастополя (значение реквизита «КодСпОбрЮЛ» в элементе «СпОбрЮЛ» =«03») Не формируется в отношении российских организаций, созданных с 1 июля 2002 года (значение реквизита «КодСпОбрЮЛ» в элементе «СпОбрЮЛ» больше «03»)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРег { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаРегSpecified { get; set; }
        /// <summary>
        /// Наименование органа, зарегистрировавшего юридическое лицо
        /// </summary>
        /// <summary>
        /// Формируется только в отношении российских ЮЛ, созданных до 1 июля 2002 года, а также в отношении ЮЛ зарегистрированных на территории Республики Крым или территории города федерального значения Севастополя на день принятия в РФ и образования в составе РФ новых субъектов - Республики Крым и города федерального значения Севастополя (значение реквизита «КодСпОбрЮЛ» в элементе «СпОбрЮЛ» =«03») Не формируется в отношении российских организаций, созданных с 1 июля 2002 года (значение реквизита «КодСпОбрЮЛ» в элементе «СпОбрЮЛ» больше «03»)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимРО { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвОбрЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаОГРН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаОГРН()
        {
            if (_shouldSerializeДатаОГРН)
            {
                return true;
            }
            return (ДатаОГРН != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ДатаРег should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаРег()
        {
            if (_shouldSerializeДатаРег)
            {
                return true;
            }
            return (ДатаРег != default(System.DateTime));
        }

        /// <summary>
        /// Test whether СпОбрЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСпОбрЮЛ()
        {
            return (СпОбрЮЛ != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether ОГРН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОГРН()
        {
            return !string.IsNullOrEmpty(ОГРН);
        }

        /// <summary>
        /// Test whether РегНом should be serialized
        /// </summary>
        public virtual bool ShouldSerializeРегНом()
        {
            return !string.IsNullOrEmpty(РегНом);
        }

        /// <summary>
        /// Test whether НаимРО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимРО()
        {
            return !string.IsNullOrEmpty(НаимРО);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвОбрЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвОбрЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвОбрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвОбрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвОбрЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвОбрЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвОбрЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвОбрЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвОбрЮЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвОбрЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвОбрЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвОбрЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвОбрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвОбрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвОбрЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвОбрЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвОбрЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Способ образования юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвОбрЮЛСпОбрЮЛ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Код способа образования по справочнику СЮЛНД
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСпОбрЮЛ { get; set; }
        /// <summary>
        /// Наименование способа образования юридического лица
        /// </summary>
        /// <summary>
        /// Отсутствует в случае, если в реквизите КодСпОбрЮЛ передается код =«03» (Сведения о регистрации на территории Республики Крым или территории города федерального значения Севастополя на день принятия в Российскую Федерацию Республики Крым и образования в составе Российской Федерации новых субъектов - Республики Крым и города федерального значения Севастополя)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСпОбрЮЛ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвОбрЮЛСпОбрЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether КодСпОбрЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодСпОбрЮЛ()
        {
            return !string.IsNullOrEmpty(КодСпОбрЮЛ);
        }

        /// <summary>
        /// Test whether НаимСпОбрЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимСпОбрЮЛ()
        {
            return !string.IsNullOrEmpty(НаимСпОбрЮЛ);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвОбрЮЛСпОбрЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвОбрЮЛСпОбрЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвОбрЮЛСпОбрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвОбрЮЛСпОбрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвОбрЮЛСпОбрЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвОбрЮЛСпОбрЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвОбрЮЛСпОбрЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвОбрЮЛСпОбрЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвОбрЮЛСпОбрЮЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвОбрЮЛСпОбрЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвОбрЮЛСпОбрЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвОбрЮЛСпОбрЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвОбрЮЛСпОбрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвОбрЮЛСпОбрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвОбрЮЛСпОбрЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвОбрЮЛСпОбрЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвОбрЮЛСпОбрЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о регистрирующем органе по месту нахождения юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвРегОрг
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// Код органа по справочнику СОУН
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодНО { get; set; }
        /// <summary>
        /// Наименование регистрирующего (налогового) органа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимНО { get; set; }
        /// <summary>
        /// Адрес регистрирующего органа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string АдрРО { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвРегОрг));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether КодНО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодНО()
        {
            return !string.IsNullOrEmpty(КодНО);
        }

        /// <summary>
        /// Test whether НаимНО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимНО()
        {
            return !string.IsNullOrEmpty(НаимНО);
        }

        /// <summary>
        /// Test whether АдрРО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдрРО()
        {
            return !string.IsNullOrEmpty(АдрРО);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвРегОрг object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвРегОрг object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвРегОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвРегОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвРегОрг);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвРегОрг obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвРегОрг Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвРегОрг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвРегОрг Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвРегОрг)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвРегОрг object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвРегОрг object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвРегОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвРегОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвРегОрг);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвРегОрг obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвРегОрг LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о состоянии (статусе) юридического лица
    /// </summary>
    /// <summary>
    /// Формируется только в случае, если: • Регистрация ЮЛ признана недействительной (код статуса по справочнику СЮЛСТ = «701», «702» или «801») • ЮЛ находится в процессе ликвидации (код статуса по справочнику СЮЛСТ = «101»); • ЮЛ находится в процессе реорганизации (код статуса по справочнику СЮЛСТ больше «120» и меньше «200»); • в отношении ЮЛ в ЕГРЮЛ содержатся следующие сведения (не отмененные и не признанные недействительными): - в ЕГРЮЛ внесена запись о принятом решении о предстоящем исключении недействующего ЮЛ из ЕГРЮЛ (код статуса по справочнику СЮЛСТ = «105») - ЮЛ находится в процессе уменьшения уставного капитала (код статуса по справочнику СЮЛСТ = «111»); - ЮЛ принято решение об изменении места нахождения (код статуса по справочнику СЮЛСТ = «112»). В случае если в отношении ЮЛ внесено несколько статусов с указанными кодами (например, ЮЛ находится в состоянии нескольких реорганизаций), то формируются сведения по каждому из этих статусов
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвСтатус
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения о правоспособности (статусе) юридического лица
        /// </summary>
        public EGRULСвЮЛСвСтатусСвСтатус СвСтатус { get; set; }
        /// <summary>
        /// Сведения о решении о предстоящем исключении недействующего ЮЛ из ЕГРЮЛ и его публикации
        /// </summary>
        /// <summary>
        /// Формируется только в случае, если передается код статуса ЮЛ по справочнику СЮЛСТ=105
        /// </summary>
        public EGRULСвЮЛСвСтатусСвРешИсклЮЛ СвРешИсклЮЛ { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвСтатус));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвСтатус should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвСтатус()
        {
            return (СвСтатус != null);
        }

        /// <summary>
        /// Test whether СвРешИсклЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРешИсклЮЛ()
        {
            return (СвРешИсклЮЛ != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвСтатус object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвСтатус object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвСтатус);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвСтатус obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвСтатус Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвСтатус Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвСтатус)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвСтатус object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвСтатус object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвСтатус);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвСтатус obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвСтатус LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о правоспособности (статусе) юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвСтатусСвСтатус
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Код статуса юридического лица по справочнику СЮЛСТ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСтатусЮЛ { get; set; }
        /// <summary>
        /// Наименование статуса юридического лица по справочнику СЮЛСТ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСтатусЮЛ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвСтатусСвСтатус));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether КодСтатусЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодСтатусЮЛ()
        {
            return !string.IsNullOrEmpty(КодСтатусЮЛ);
        }

        /// <summary>
        /// Test whether НаимСтатусЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимСтатусЮЛ()
        {
            return !string.IsNullOrEmpty(НаимСтатусЮЛ);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвСтатусСвСтатус object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвСтатусСвСтатус object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвСтатусСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвСтатусСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвСтатусСвСтатус);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвСтатусСвСтатус obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвСтатусСвСтатус Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвСтатусСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвСтатусСвСтатус Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвСтатусСвСтатус)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвСтатусСвСтатус object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвСтатусСвСтатус object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвСтатусСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвСтатусСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвСтатусСвСтатус);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвСтатусСвСтатус obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвСтатусСвСтатус LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о решении о предстоящем исключении недействующего ЮЛ из ЕГРЮЛ и его публикации
    /// </summary>
    /// <summary>
    /// Формируется только в случае, если передается код статуса ЮЛ по справочнику СЮЛСТ=105
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвСтатусСвРешИсклЮЛ
    {

        private bool _shouldSerializeДатаПубликации;

        private bool _shouldSerializeДатаРеш;

        private static XmlSerializer serializer;

        /// <summary>
        /// Дата решения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРеш { get; set; }
        /// <summary>
        /// Номер решения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомерРеш { get; set; }
        /// <summary>
        /// Дата публикации решения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаПубликации { get; set; }
        /// <summary>
        /// Номер журнала, в котором опубликовано решение
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомерЖурнала { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвСтатусСвРешИсклЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаРеш should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаРеш()
        {
            if (_shouldSerializeДатаРеш)
            {
                return true;
            }
            return (ДатаРеш != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ДатаПубликации should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаПубликации()
        {
            if (_shouldSerializeДатаПубликации)
            {
                return true;
            }
            return (ДатаПубликации != default(System.DateTime));
        }

        /// <summary>
        /// Test whether НомерРеш should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНомерРеш()
        {
            return !string.IsNullOrEmpty(НомерРеш);
        }

        /// <summary>
        /// Test whether НомерЖурнала should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНомерЖурнала()
        {
            return !string.IsNullOrEmpty(НомерЖурнала);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвСтатусСвРешИсклЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвСтатусСвРешИсклЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвСтатусСвРешИсклЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвСтатусСвРешИсклЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвСтатусСвРешИсклЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвСтатусСвРешИсклЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвСтатусСвРешИсклЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвСтатусСвРешИсклЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвСтатусСвРешИсклЮЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвСтатусСвРешИсклЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвСтатусСвРешИсклЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвСтатусСвРешИсклЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвСтатусСвРешИсклЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвСтатусСвРешИсклЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвСтатусСвРешИсклЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвСтатусСвРешИсклЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвСтатусСвРешИсклЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о прекращении юридического лица
    /// </summary>
    /// <summary>
    /// Формируется только в случае, если код статуса ЮЛ по справочнику СЮЛСТ больше 200 и меньше 700
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвПрекрЮЛ
    {

        private bool _shouldSerializeДатаПрекрЮЛ;

        private static XmlSerializer serializer;

        /// <summary>
        /// Способ прекращения юридического лица
        /// </summary>
        public EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ СпПрекрЮЛ { get; set; }
        /// <summary>
        /// Сведения о регистрирующем (налоговом) органе, внесшем запись о прекращении юридического лица
        /// </summary>
        public СвРегОргТип СвРегОрг { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// Дата прекращения юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаПрекрЮЛ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвПрекрЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаПрекрЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаПрекрЮЛ()
        {
            if (_shouldSerializeДатаПрекрЮЛ)
            {
                return true;
            }
            return (ДатаПрекрЮЛ != default(System.DateTime));
        }

        /// <summary>
        /// Test whether СпПрекрЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСпПрекрЮЛ()
        {
            return (СпПрекрЮЛ != null);
        }

        /// <summary>
        /// Test whether СвРегОрг should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРегОрг()
        {
            return (СвРегОрг != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвПрекрЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвПрекрЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПрекрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвПрекрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПрекрЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвПрекрЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвПрекрЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвПрекрЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвПрекрЮЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвПрекрЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвПрекрЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвПрекрЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПрекрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПрекрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПрекрЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПрекрЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвПрекрЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Способ прекращения юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Код способа прекращения по справочнику СЮЛПД
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСпПрекрЮЛ { get; set; }
        /// <summary>
        /// Наименование способа прекращения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСпПрекрЮЛ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether КодСпПрекрЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодСпПрекрЮЛ()
        {
            return !string.IsNullOrEmpty(КодСпПрекрЮЛ);
        }

        /// <summary>
        /// Test whether НаимСпПрекрЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимСпПрекрЮЛ()
        {
            return !string.IsNullOrEmpty(НаимСпПрекрЮЛ);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвПрекрЮЛСпПрекрЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об учете в налоговом органе
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУчетНО
    {

        private bool _shouldSerializeДатаПостУч;

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения о налоговом органе, в котором юридическое лицо состоит (для ЮЛ, прекративших деятельность - состояло) на учете
        /// </summary>
        public СвНОТип СвНО { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }
        /// <summary>
        /// КПП юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП { get; set; }
        /// <summary>
        /// Дата постановки на учет в налоговом органе
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаПостУч { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУчетНО));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаПостУч should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаПостУч()
        {
            if (_shouldSerializeДатаПостУч)
            {
                return true;
            }
            return (ДатаПостУч != default(System.DateTime));
        }

        /// <summary>
        /// Test whether СвНО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНО()
        {
            return (СвНО != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether ИНН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИНН()
        {
            return !string.IsNullOrEmpty(ИНН);
        }

        /// <summary>
        /// Test whether КПП should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКПП()
        {
            return !string.IsNullOrEmpty(КПП);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчетНО object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУчетНО object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчетНО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУчетНО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчетНО);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУчетНО obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчетНО Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУчетНО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУчетНО Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУчетНО)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчетНО object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУчетНО object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчетНО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчетНО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчетНО);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчетНО obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчетНО LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о регистрации юридического лица в качестве страхователя в территориальном органе Пенсионного фонда Российской Федерации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвРегПФ
    {

        private bool _shouldSerializeДатаРег;

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения о территориальном органе Пенсионного фонда Российской Федерации
        /// </summary>
        public EGRULСвЮЛСвРегПФСвОргПФ СвОргПФ { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Регистрационный номер в территориальном органе Пенсионного фонда Российской Федерации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string РегНомПФ { get; set; }
        /// <summary>
        /// Дата регистрации юридического лица в качестве страхователя
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРег { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвРегПФ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаРег should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаРег()
        {
            if (_shouldSerializeДатаРег)
            {
                return true;
            }
            return (ДатаРег != default(System.DateTime));
        }

        /// <summary>
        /// Test whether СвОргПФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвОргПФ()
        {
            return (СвОргПФ != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether РегНомПФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeРегНомПФ()
        {
            return !string.IsNullOrEmpty(РегНомПФ);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвРегПФ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвРегПФ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвРегПФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвРегПФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвРегПФ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвРегПФ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвРегПФ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвРегПФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвРегПФ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвРегПФ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвРегПФ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвРегПФ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвРегПФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвРегПФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвРегПФ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвРегПФ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвРегПФ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о территориальном органе Пенсионного фонда Российской Федерации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвРегПФСвОргПФ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Код по справочнику СТОПФ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодПФ { get; set; }
        /// <summary>
        /// Наименование
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимПФ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвРегПФСвОргПФ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether КодПФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодПФ()
        {
            return !string.IsNullOrEmpty(КодПФ);
        }

        /// <summary>
        /// Test whether НаимПФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимПФ()
        {
            return !string.IsNullOrEmpty(НаимПФ);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвРегПФСвОргПФ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвРегПФСвОргПФ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвРегПФСвОргПФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвРегПФСвОргПФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвРегПФСвОргПФ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвРегПФСвОргПФ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвРегПФСвОргПФ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвРегПФСвОргПФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвРегПФСвОргПФ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвРегПФСвОргПФ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвРегПФСвОргПФ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвРегПФСвОргПФ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвРегПФСвОргПФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвРегПФСвОргПФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвРегПФСвОргПФ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвРегПФСвОргПФ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвРегПФСвОргПФ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о регистрации юридического лица в качестве страхователя в исполнительном органе Фонда социального страхования Российской Федерации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвРегФСС
    {

        private bool _shouldSerializeДатаРег;

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения об исполнительном органе Фонда социального страхования Российской Федерации
        /// </summary>
        public EGRULСвЮЛСвРегФСССвОргФСС СвОргФСС { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Регистрационный номер в исполнительном органе Фонда социального страхования Российской Федерации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string РегНомФСС { get; set; }
        /// <summary>
        /// Дата регистрации юридического лица в качестве страхователя
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРег { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвРегФСС));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаРег should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаРег()
        {
            if (_shouldSerializeДатаРег)
            {
                return true;
            }
            return (ДатаРег != default(System.DateTime));
        }

        /// <summary>
        /// Test whether СвОргФСС should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвОргФСС()
        {
            return (СвОргФСС != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether РегНомФСС should be serialized
        /// </summary>
        public virtual bool ShouldSerializeРегНомФСС()
        {
            return !string.IsNullOrEmpty(РегНомФСС);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвРегФСС object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвРегФСС object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвРегФСС object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвРегФСС obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвРегФСС);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвРегФСС obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвРегФСС Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвРегФСС)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвРегФСС Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвРегФСС)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвРегФСС object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвРегФСС object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвРегФСС object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвРегФСС obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвРегФСС);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвРегФСС obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвРегФСС LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об исполнительном органе Фонда социального страхования Российской Федерации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвРегФСССвОргФСС
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Код по справочнику СТОФСС
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодФСС { get; set; }
        /// <summary>
        /// Наименование
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимФСС { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвРегФСССвОргФСС));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether КодФСС should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодФСС()
        {
            return !string.IsNullOrEmpty(КодФСС);
        }

        /// <summary>
        /// Test whether НаимФСС should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимФСС()
        {
            return !string.IsNullOrEmpty(НаимФСС);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвРегФСССвОргФСС object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвРегФСССвОргФСС object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвРегФСССвОргФСС object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвРегФСССвОргФСС obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвРегФСССвОргФСС);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвРегФСССвОргФСС obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвРегФСССвОргФСС Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвРегФСССвОргФСС)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвРегФСССвОргФСС Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвРегФСССвОргФСС)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвРегФСССвОргФСС object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвРегФСССвОргФСС object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвРегФСССвОргФСС object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвРегФСССвОргФСС obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвРегФСССвОргФСС);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвРегФСССвОргФСС obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвРегФСССвОргФСС LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о размере указанного в учредительных документах коммерческой организации уставного капитала (складочного капитала, уставного фонда, паевого фонда)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУстКап
    {

        private bool _shouldSerializeСумКап;

        private bool _shouldSerializeНаимВидКап;

        private static XmlSerializer serializer;

        /// <summary>
        /// Доля рубля в капитале
        /// </summary>
        /// <summary>
        /// Указывается в случае, если сумма уставного капитала включает в себя часть рубля в виде простой дроби
        /// </summary>
        public ДробьТип ДоляРубля { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Сведения о нахождении хозяйственного общества в процессе уменьшения уставного капитала
        /// </summary>
        /// <summary>
        /// Формируется только в случае, если хозяйственным обществом принято решение об уменьшении уставного капитала и оно не отменено и уставный капитал еще не уменьшен
        /// </summary>
        public EGRULСвЮЛСвУстКапСведУмУК СведУмУК { get; set; }
        /// <summary>
        /// Наименование вида капитала
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public EGRULСвЮЛСвУстКапНаимВидКап НаимВидКап { get; set; }
        /// <summary>
        /// Размер в рублях
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СумКап { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУстКап));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether НаимВидКап should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимВидКап()
        {
            if (_shouldSerializeНаимВидКап)
            {
                return true;
            }
            return (НаимВидКап != default(EGRULСвЮЛСвУстКапНаимВидКап));
        }

        /// <summary>
        /// Test whether СумКап should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСумКап()
        {
            if (_shouldSerializeСумКап)
            {
                return true;
            }
            return (СумКап != default(decimal));
        }

        /// <summary>
        /// Test whether ДоляРубля should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДоляРубля()
        {
            return (ДоляРубля != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether СведУмУК should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСведУмУК()
        {
            return (СведУмУК != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУстКап object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУстКап object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУстКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУстКап obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУстКап);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУстКап obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУстКап Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУстКап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУстКап Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУстКап)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУстКап object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУстКап object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУстКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУстКап obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУстКап);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУстКап obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУстКап LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о нахождении хозяйственного общества в процессе уменьшения уставного капитала
    /// </summary>
    /// <summary>
    /// Формируется только в случае, если хозяйственным обществом принято решение об уменьшении уставного капитала и оно не отменено и уставный капитал еще не уменьшен
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУстКапСведУмУК
    {

        private bool _shouldSerializeДатаРеш;

        private bool _shouldSerializeВелУмУК;

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Величина, на которую уменьшается уставный капитал (в рублях)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ВелУмУК { get; set; }
        /// <summary>
        /// Дата принятия решения об уменьшении уставного капитала
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРеш { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУстКапСведУмУК));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ВелУмУК should be serialized
        /// </summary>
        public virtual bool ShouldSerializeВелУмУК()
        {
            if (_shouldSerializeВелУмУК)
            {
                return true;
            }
            return (ВелУмУК != default(decimal));
        }

        /// <summary>
        /// Test whether ДатаРеш should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаРеш()
        {
            if (_shouldSerializeДатаРеш)
            {
                return true;
            }
            return (ДатаРеш != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУстКапСведУмУК object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУстКапСведУмУК object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУстКапСведУмУК object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУстКапСведУмУК obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУстКапСведУмУК);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУстКапСведУмУК obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУстКапСведУмУК Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУстКапСведУмУК)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУстКапСведУмУК Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУстКапСведУмУК)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУстКапСведУмУК object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУстКапСведУмУК object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУстКапСведУмУК object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУстКапСведУмУК obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУстКапСведУмУК);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУстКапСведУмУК obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУстКапСведУмУК LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum EGRULСвЮЛСвУстКапНаимВидКап
    {

        [System.Xml.Serialization.XmlEnumAttribute("УСТАВНЫЙ КАПИТАЛ")]
        УСТАВНЫЙКАПИТАЛ,

        [System.Xml.Serialization.XmlEnumAttribute("СКЛАДОЧНЫЙ КАПИТАЛ")]
        СКЛАДОЧНЫЙКАПИТАЛ,

        [System.Xml.Serialization.XmlEnumAttribute("УСТАВНЫЙ ФОНД")]
        УСТАВНЫЙФОНД,

        [System.Xml.Serialization.XmlEnumAttribute("ПАЕВЫЕ ВЗНОСЫ")]
        ПАЕВЫЕВЗНОСЫ,

        [System.Xml.Serialization.XmlEnumAttribute("ПАЕВОЙ ФОНД")]
        ПАЕВОЙФОНД,
    }

    /// <summary>
    /// Сведения об использовании юридическим лицом типового устава
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвТипУстав
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения о нормативном правовом акте об утверждении типового устава
        /// </summary>
        public EGRULСвЮЛСвТипУставСвНПАУтвТУ СвНПАУтвТУ { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвТипУстав));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвНПАУтвТУ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНПАУтвТУ()
        {
            return (СвНПАУтвТУ != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвТипУстав object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвТипУстав object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвТипУстав object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвТипУстав obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвТипУстав);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвТипУстав obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвТипУстав Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвТипУстав)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвТипУстав Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвТипУстав)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвТипУстав object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвТипУстав object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвТипУстав object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвТипУстав obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвТипУстав);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвТипУстав obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвТипУстав LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о нормативном правовом акте об утверждении типового устава
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвТипУставСвНПАУтвТУ
    {

        private bool _shouldSerializeДатаНПА;

        private static XmlSerializer serializer;

        /// <summary>
        /// Наименование государственного органа, утвердившего типовой устав
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимГОУтвТУ { get; set; }
        /// <summary>
        /// Вид нормативного правового акта об утверждении типового устава
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВидНПА { get; set; }
        /// <summary>
        /// Наименование нормативного правового акта об утверждении типового устава
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимНПА { get; set; }
        /// <summary>
        /// Номер нормативного правового акта об утверждении типового устава
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомерНПА { get; set; }
        /// <summary>
        /// Дата нормативного правового акта об утверждении типового устава
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаНПА { get; set; }
        /// <summary>
        /// Номер приложения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомерПрил { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвТипУставСвНПАУтвТУ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаНПА should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаНПА()
        {
            if (_shouldSerializeДатаНПА)
            {
                return true;
            }
            return (ДатаНПА != default(System.DateTime));
        }

        /// <summary>
        /// Test whether НаимГОУтвТУ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимГОУтвТУ()
        {
            return !string.IsNullOrEmpty(НаимГОУтвТУ);
        }

        /// <summary>
        /// Test whether ВидНПА should be serialized
        /// </summary>
        public virtual bool ShouldSerializeВидНПА()
        {
            return !string.IsNullOrEmpty(ВидНПА);
        }

        /// <summary>
        /// Test whether НаимНПА should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимНПА()
        {
            return !string.IsNullOrEmpty(НаимНПА);
        }

        /// <summary>
        /// Test whether НомерНПА should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНомерНПА()
        {
            return !string.IsNullOrEmpty(НомерНПА);
        }

        /// <summary>
        /// Test whether НомерПрил should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНомерПрил()
        {
            return !string.IsNullOrEmpty(НомерПрил);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвТипУставСвНПАУтвТУ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвТипУставСвНПАУтвТУ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвТипУставСвНПАУтвТУ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвТипУставСвНПАУтвТУ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвТипУставСвНПАУтвТУ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвТипУставСвНПАУтвТУ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвТипУставСвНПАУтвТУ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвТипУставСвНПАУтвТУ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвТипУставСвНПАУтвТУ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвТипУставСвНПАУтвТУ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвТипУставСвНПАУтвТУ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвТипУставСвНПАУтвТУ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвТипУставСвНПАУтвТУ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвТипУставСвНПАУтвТУ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвТипУставСвНПАУтвТУ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвТипУставСвНПАУтвТУ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвТипУставСвНПАУтвТУ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об управляющей организации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУпрОрг
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о наименовании и (при наличии) ОГРН и ИНН ЮЛ - управляющей организации
        /// </summary>
        public СвЮЛЕГРЮЛТип НаимИННЮЛ { get; set; }
        /// <summary>
        /// Сведения о регистрации в стране происхождения
        /// </summary>
        /// <summary>
        /// Формируется при наличии указанных сведений в ЕГРЮЛ в отношении управляющей организации - иностранном ЮЛ
        /// </summary>
        public СвРегИнЮЛЕГРЮЛТип СвРегИн { get; set; }
        /// <summary>
        /// Сведения о недостоверности данных об управляющей организации
        /// </summary>
        /// <summary>
        /// Формируется только если в ЕГРЮЛ внесены сведения о недостоверности сведений о данной управляющей организации
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедДанУпрОрг")]
        public List<EGRULСвЮЛСвУпрОргСвНедДанУпрОрг> СвНедДанУпрОрг { get; set; }
        /// <summary>
        /// Сведения о наименовании представительства или филиала в Российской Федерации, через которое иностранное ЮЛ осуществляет полномочия управляющей организации
        /// </summary>
        /// <summary>
        /// Формируется только при наличии в ЕГРЮЛ сведений о наименовании представительства или филиала, через которое иностранное ЮЛ осуществляет полномочия управляющей организации
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвПредЮЛ")]
        public List<EGRULСвЮЛСвУпрОргСвПредЮЛ> СвПредЮЛ { get; set; }
        /// <summary>
        /// Сведения об адресе управляющей организации в Российской Федерации
        /// </summary>
        public АдрРФЕГРЮЛТип СвАдрРФ { get; set; }
        /// <summary>
        /// Сведения о контактном телефоне
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНомТел")]
        public List<СвНомТелТип> СвНомТел { get; set; }
        /// <summary>
        /// Сведения о лице, через которое иностранное юридическое лицо осуществляет полномочия управляющей организации
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ПредИнЮЛ")]
        public List<EGRULСвЮЛСвУпрОргПредИнЮЛ> ПредИнЮЛ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУпрОрг));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвНедДанУпрОрг should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНедДанУпрОрг()
        {
            return СвНедДанУпрОрг != null && СвНедДанУпрОрг.Count > 0;
        }

        /// <summary>
        /// Test whether СвПредЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвПредЮЛ()
        {
            return СвПредЮЛ != null && СвПредЮЛ.Count > 0;
        }

        /// <summary>
        /// Test whether СвНомТел should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНомТел()
        {
            return СвНомТел != null && СвНомТел.Count > 0;
        }

        /// <summary>
        /// Test whether ПредИнЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeПредИнЮЛ()
        {
            return ПредИнЮЛ != null && ПредИнЮЛ.Count > 0;
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether НаимИННЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимИННЮЛ()
        {
            return (НаимИННЮЛ != null);
        }

        /// <summary>
        /// Test whether СвРегИн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРегИн()
        {
            return (СвРегИн != null);
        }

        /// <summary>
        /// Test whether СвАдрРФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвАдрРФ()
        {
            return (СвАдрРФ != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУпрОрг object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУпрОрг object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУпрОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУпрОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУпрОрг);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУпрОрг obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУпрОрг Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУпрОрг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУпрОрг Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУпрОрг)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУпрОрг object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУпрОрг object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУпрОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУпрОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУпрОрг);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУпрОрг obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУпрОрг LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о недостоверности данных об управляющей организации
    /// </summary>
    /// <summary>
    /// Формируется только если в ЕГРЮЛ внесены сведения о недостоверности сведений о данной управляющей организации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУпрОргСвНедДанУпрОрг
    {

        private bool _shouldSerializeПризнНедДанУпрОрг;

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения о решении суда, на основании которого указанные сведения признаны недостоверными
        /// </summary>
        /// <summary>
        /// Формируется в случае, если значение реквизита ПризнНедДанУпрОрг=3
        /// </summary>
        public РешСудТип РешСудНедДанУпрОрг { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Признак недостоверности данных
        /// </summary>
        /// <summary>
        /// , где: 2 - признак недостоверности, внесенный в ЕГРЮЛ по результатам проверки достоверности содержащихся в ЕГРЮЛ сведений о юридическом лице (если сведения о недостоверности сведений об управляющей организации внесены на основании записи с кодом СПВЗ 17023); 3 - признак недостоверности, внесенный в ЕГРЮЛ на основании решения суда (если сведения о недостоверности сведений об управляющей организации внесены на основании записи с кодом СПВЗ 16006)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public EGRULСвЮЛСвУпрОргСвНедДанУпрОргПризнНедДанУпрОрг ПризнНедДанУпрОрг { get; set; }
        /// <summary>
        /// Текст о недостоверности сведений, выводимый в выписке в строке с наименованием «Дополнительные сведения»
        /// </summary>
        /// <summary>
        /// Принимает значение: •	«сведения недостоверны (результаты проверки достоверности содержащихся в ЕГРЮЛ сведений о юридическом лице)» - если сведения о недостоверности внесены по данным, выявленным НО (ПризнНедДанУпрОрг=2), • «сведения недостоверны (решение суда)» - если сведения о недостоверности внесены на основании решения суда (ПризнНедДанУпрОрг=3). Выводится в выписке в строке с наименованием «Дополнительные сведения»
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТекстНедДанУпрОрг { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУпрОргСвНедДанУпрОрг));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ПризнНедДанУпрОрг should be serialized
        /// </summary>
        public virtual bool ShouldSerializeПризнНедДанУпрОрг()
        {
            if (_shouldSerializeПризнНедДанУпрОрг)
            {
                return true;
            }
            return (ПризнНедДанУпрОрг != default(EGRULСвЮЛСвУпрОргСвНедДанУпрОргПризнНедДанУпрОрг));
        }

        /// <summary>
        /// Test whether РешСудНедДанУпрОрг should be serialized
        /// </summary>
        public virtual bool ShouldSerializeРешСудНедДанУпрОрг()
        {
            return (РешСудНедДанУпрОрг != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether ТекстНедДанУпрОрг should be serialized
        /// </summary>
        public virtual bool ShouldSerializeТекстНедДанУпрОрг()
        {
            return !string.IsNullOrEmpty(ТекстНедДанУпрОрг);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУпрОргСвНедДанУпрОрг object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУпрОргСвНедДанУпрОрг object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУпрОргСвНедДанУпрОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУпрОргСвНедДанУпрОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУпрОргСвНедДанУпрОрг);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУпрОргСвНедДанУпрОрг obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУпрОргСвНедДанУпрОрг Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУпрОргСвНедДанУпрОрг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУпрОргСвНедДанУпрОрг Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУпрОргСвНедДанУпрОрг)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУпрОргСвНедДанУпрОрг object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУпрОргСвНедДанУпрОрг object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУпрОргСвНедДанУпрОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУпрОргСвНедДанУпрОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУпрОргСвНедДанУпрОрг);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУпрОргСвНедДанУпрОрг obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУпрОргСвНедДанУпрОрг LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum EGRULСвЮЛСвУпрОргСвНедДанУпрОргПризнНедДанУпрОрг
    {

        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    /// <summary>
    /// Сведения о наименовании представительства или филиала в Российской Федерации, через которое иностранное ЮЛ осуществляет полномочия управляющей организации
    /// </summary>
    /// <summary>
    /// Формируется только при наличии в ЕГРЮЛ сведений о наименовании представительства или филиала, через которое иностранное ЮЛ осуществляет полномочия управляющей организации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУпрОргСвПредЮЛ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Полное наименование представительства или филиала в Российской Федерации, через которое иностранное ЮЛ осуществляет полномочия управляющей организации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимПредЮЛ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУпрОргСвПредЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether НаимПредЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимПредЮЛ()
        {
            return !string.IsNullOrEmpty(НаимПредЮЛ);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУпрОргСвПредЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУпрОргСвПредЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУпрОргСвПредЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУпрОргСвПредЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУпрОргСвПредЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУпрОргСвПредЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУпрОргСвПредЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУпрОргСвПредЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУпрОргСвПредЮЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУпрОргСвПредЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУпрОргСвПредЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУпрОргСвПредЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУпрОргСвПредЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУпрОргСвПредЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУпрОргСвПредЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУпрОргСвПредЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУпрОргСвПредЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о лице, через которое иностранное юридическое лицо осуществляет полномочия управляющей организации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУпрОргПредИнЮЛ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о ФИО и (при наличии) ИНН ФЛ
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ { get; set; }
        /// <summary>
        /// Сведения о контактном телефоне ФЛ
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНомТел")]
        public List<СвНомТелТип> СвНомТел { get; set; }
        /// <summary>
        /// Сведения о рождении ФЛ
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public СвРождЕГРЮЛТип СвРождФЛ { get; set; }
        /// <summary>
        /// Сведения о документе, удостоверяющем личность
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public УдЛичнЕГРЮЛТип УдЛичнФЛ { get; set; }
        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public АдрРФЕГРЮЛТип АдресМЖРФ { get; set; }
        /// <summary>
        /// Сведения об адресе места жительства за пределами территории Российской Федерации
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМЖИн { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУпрОргПредИнЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвНомТел should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНомТел()
        {
            return СвНомТел != null && СвНомТел.Count > 0;
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether СвФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвФЛ()
        {
            return (СвФЛ != null);
        }

        /// <summary>
        /// Test whether СвРождФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРождФЛ()
        {
            return (СвРождФЛ != null);
        }

        /// <summary>
        /// Test whether УдЛичнФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeУдЛичнФЛ()
        {
            return (УдЛичнФЛ != null);
        }

        /// <summary>
        /// Test whether АдресМЖРФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдресМЖРФ()
        {
            return (АдресМЖРФ != null);
        }

        /// <summary>
        /// Test whether АдрМЖИн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдрМЖИн()
        {
            return (АдрМЖИн != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУпрОргПредИнЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУпрОргПредИнЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУпрОргПредИнЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУпрОргПредИнЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУпрОргПредИнЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУпрОргПредИнЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУпрОргПредИнЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУпрОргПредИнЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУпрОргПредИнЮЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУпрОргПредИнЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУпрОргПредИнЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУпрОргПредИнЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУпрОргПредИнЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУпрОргПредИнЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУпрОргПредИнЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУпрОргПредИнЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУпрОргПредИнЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о лице, имеющем право без доверенности действовать от имени юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСведДолжнФЛ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о ФИО и (при наличии) ИНН ФЛ
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ { get; set; }
        /// <summary>
        /// Сведения о должности ФЛ
        /// </summary>
        public EGRULСвЮЛСведДолжнФЛСвДолжн СвДолжн { get; set; }
        /// <summary>
        /// Сведения о контактном телефоне ФЛ
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНомТел")]
        public List<СвНомТелТип> СвНомТел { get; set; }
        /// <summary>
        /// Сведения о недостоверности данных о лице, имеющем право без доверенности действовать от имени юридического лица
        /// </summary>
        /// <summary>
        /// Формируется только если в ЕГРЮЛ внесены сведения о недостоверности сведений о данном лице, имеющем право действовать без доверенности от имени юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедДанДолжнФЛ")]
        public List<EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ> СвНедДанДолжнФЛ { get; set; }
        /// <summary>
        /// Сведения о рождении ФЛ
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public СвРождЕГРЮЛТип СвРождФЛ { get; set; }
        /// <summary>
        /// Сведения о документе, удостоверяющем личность
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public УдЛичнЕГРЮЛТип УдЛичнФЛ { get; set; }
        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public АдрРФЕГРЮЛТип АдресМЖРФ { get; set; }
        /// <summary>
        /// Сведения об адресе места жительства за пределами территории Российской Федерации
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМЖИн { get; set; }
        /// <summary>
        /// Сведения о дисквалификации
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвДискв")]
        public List<EGRULСвЮЛСведДолжнФЛСвДискв> СвДискв { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСведДолжнФЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвНомТел should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНомТел()
        {
            return СвНомТел != null && СвНомТел.Count > 0;
        }

        /// <summary>
        /// Test whether СвНедДанДолжнФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНедДанДолжнФЛ()
        {
            return СвНедДанДолжнФЛ != null && СвНедДанДолжнФЛ.Count > 0;
        }

        /// <summary>
        /// Test whether СвДискв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвДискв()
        {
            return СвДискв != null && СвДискв.Count > 0;
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether СвФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвФЛ()
        {
            return (СвФЛ != null);
        }

        /// <summary>
        /// Test whether СвДолжн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвДолжн()
        {
            return (СвДолжн != null);
        }

        /// <summary>
        /// Test whether СвРождФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРождФЛ()
        {
            return (СвРождФЛ != null);
        }

        /// <summary>
        /// Test whether УдЛичнФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeУдЛичнФЛ()
        {
            return (УдЛичнФЛ != null);
        }

        /// <summary>
        /// Test whether АдресМЖРФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдресМЖРФ()
        {
            return (АдресМЖРФ != null);
        }

        /// <summary>
        /// Test whether АдрМЖИн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдрМЖИн()
        {
            return (АдрМЖИн != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСведДолжнФЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСведДолжнФЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСведДолжнФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСведДолжнФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСведДолжнФЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСведДолжнФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСведДолжнФЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСведДолжнФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСведДолжнФЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСведДолжнФЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСведДолжнФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСведДолжнФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСведДолжнФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСведДолжнФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСведДолжнФЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСведДолжнФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСведДолжнФЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о должности ФЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСведДолжнФЛСвДолжн
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Основной государственный регистрационный номер индивидуального предпринимателя - управляющего юридическим лицом
        /// </summary>
        /// <summary>
        /// Формируется только для управляющего - индивидуального предпринимателя при наличии этих сведений в ЕГРЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРНИП { get; set; }
        /// <summary>
        /// Вид должностного лица по справочнику СКФЛЮЛ (указывается код по справочнику)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВидДолжн { get; set; }
        /// <summary>
        /// Наименование вида должностного лица по справочнику СКФЛЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимВидДолжн { get; set; }
        /// <summary>
        /// Наименование должности
        /// </summary>
        /// <summary>
        /// При отсутствии наименования должности указывается наименование вида должностного лица по справочнику СКФЛЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимДолжн { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСведДолжнФЛСвДолжн));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether ОГРНИП should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОГРНИП()
        {
            return !string.IsNullOrEmpty(ОГРНИП);
        }

        /// <summary>
        /// Test whether ВидДолжн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeВидДолжн()
        {
            return !string.IsNullOrEmpty(ВидДолжн);
        }

        /// <summary>
        /// Test whether НаимВидДолжн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимВидДолжн()
        {
            return !string.IsNullOrEmpty(НаимВидДолжн);
        }

        /// <summary>
        /// Test whether НаимДолжн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимДолжн()
        {
            return !string.IsNullOrEmpty(НаимДолжн);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСведДолжнФЛСвДолжн object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСведДолжнФЛСвДолжн object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСведДолжнФЛСвДолжн object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСведДолжнФЛСвДолжн obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСведДолжнФЛСвДолжн);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСведДолжнФЛСвДолжн obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСведДолжнФЛСвДолжн Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСведДолжнФЛСвДолжн)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСведДолжнФЛСвДолжн Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСведДолжнФЛСвДолжн)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСведДолжнФЛСвДолжн object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСведДолжнФЛСвДолжн object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСведДолжнФЛСвДолжн object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСведДолжнФЛСвДолжн obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСведДолжнФЛСвДолжн);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСведДолжнФЛСвДолжн obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСведДолжнФЛСвДолжн LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о недостоверности данных о лице, имеющем право без доверенности действовать от имени юридического лица
    /// </summary>
    /// <summary>
    /// Формируется только если в ЕГРЮЛ внесены сведения о недостоверности сведений о данном лице, имеющем право действовать без доверенности от имени юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ
    {

        private bool _shouldSerializeПризнНедДанДолжнФЛ;

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения о решении суда, на основании которого указанные сведения признаны недостоверными
        /// </summary>
        /// <summary>
        /// Формируется в случае, если значение реквизита ПризнНедДанУпрОрг=3
        /// </summary>
        public РешСудТип РешСудНедДанДолжнФЛ { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Признак недостоверности данных
        /// </summary>
        /// <summary>
        /// , где: 1 - признак недостоверности, внесенный в ЕГРЮЛ на основании заявления по форме Р34001 самого физического лица (если сведения о недостоверности сведений о лице, имеющем право действовать без доверенности от имени юридического лица, внесены на основании записи с кодом СПВЗ 17022); 2 - признак недостоверности, внесенный в ЕГРЮЛ по результатам проверки достоверности содержащихся в ЕГРЮЛ сведений о юридическом лице (если сведения о недостоверности сведений о лице, имеющем право действовать без доверенности от имени юридического лица, внесены на основании записи с кодом СПВЗ 17023); 3 - признак недостоверности, внесенный в ЕГРЮЛ на основании решения суда (если сведения о недостоверности сведений о лице, имеющем право действовать без доверенности от имени юридического лица, внесены на основании записи с кодом СПВЗ 16006)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛПризнНедДанДолжнФЛ ПризнНедДанДолжнФЛ { get; set; }
        /// <summary>
        /// Текст о недостоверности сведений, выводимый в выписке в строке с наименованием «Дополнительные сведения»
        /// </summary>
        /// <summary>
        /// Принимает значение: •	«сведения недостоверны (заявление физического лица о недостоверности сведений о нем)» - если сведения о недостоверности внесены по заявлению самого ФЛ (Р34001) (ПризнНедДанДолжнФЛ =1), •	«сведения недостоверны (результаты проверки достоверности содержащихся в ЕГРЮЛ сведений о юридическом лице)» - если сведения о недостоверности внесены по данным, выявленным НО (ПризнНедДанДолжнФЛ =2), •	«сведения недостоверны (решение суда)» - если сведения о недостоверности внесены на основании решения суда (ПризнНедДанДолжнФЛ =3). Выводится в выписке в строке с наименованием «Дополнительные сведения»
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТекстНедДанДолжнФЛ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ПризнНедДанДолжнФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeПризнНедДанДолжнФЛ()
        {
            if (_shouldSerializeПризнНедДанДолжнФЛ)
            {
                return true;
            }
            return (ПризнНедДанДолжнФЛ != default(EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛПризнНедДанДолжнФЛ));
        }

        /// <summary>
        /// Test whether РешСудНедДанДолжнФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeРешСудНедДанДолжнФЛ()
        {
            return (РешСудНедДанДолжнФЛ != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether ТекстНедДанДолжнФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeТекстНедДанДолжнФЛ()
        {
            return !string.IsNullOrEmpty(ТекстНедДанДолжнФЛ);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum EGRULСвЮЛСведДолжнФЛСвНедДанДолжнФЛПризнНедДанДолжнФЛ
    {

        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    /// <summary>
    /// Сведения о дисквалификации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСведДолжнФЛСвДискв
    {

        private bool _shouldSerializeДатаРеш;

        private bool _shouldSerializeДатаОкончДискв;

        private bool _shouldSerializeДатаНачДискв;

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Дата начала дисквалификации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаНачДискв { get; set; }
        /// <summary>
        /// Дата окончания дисквалификации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаОкончДискв { get; set; }
        /// <summary>
        /// Дата вынесения судебным органом постановления о дисквалификации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРеш { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСведДолжнФЛСвДискв));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаНачДискв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаНачДискв()
        {
            if (_shouldSerializeДатаНачДискв)
            {
                return true;
            }
            return (ДатаНачДискв != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ДатаОкончДискв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаОкончДискв()
        {
            if (_shouldSerializeДатаОкончДискв)
            {
                return true;
            }
            return (ДатаОкончДискв != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ДатаРеш should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаРеш()
        {
            if (_shouldSerializeДатаРеш)
            {
                return true;
            }
            return (ДатаРеш != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСведДолжнФЛСвДискв object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСведДолжнФЛСвДискв object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСведДолжнФЛСвДискв object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСведДолжнФЛСвДискв obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСведДолжнФЛСвДискв);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСведДолжнФЛСвДискв obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСведДолжнФЛСвДискв Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСведДолжнФЛСвДискв)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСведДолжнФЛСвДискв Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСведДолжнФЛСвДискв)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСведДолжнФЛСвДискв object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСведДолжнФЛСвДискв object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСведДолжнФЛСвДискв object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСведДолжнФЛСвДискв obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСведДолжнФЛСвДискв);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСведДолжнФЛСвДискв obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСведДолжнФЛСвДискв LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об учредителях (участниках) юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУчредит
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения об учредителе (участнике) - российском юридическом лице
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("УчрЮЛРос")]
        public List<EGRULСвЮЛСвУчредитУчрЮЛРос> УчрЮЛРос { get; set; }
        /// <summary>
        /// Сведения об учредителе (участнике) - иностранном юридическом лице
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("УчрЮЛИн")]
        public List<EGRULСвЮЛСвУчредитУчрЮЛИн> УчрЮЛИн { get; set; }
        /// <summary>
        /// Сведения об учредителе (участнике) - физическом лице
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("УчрФЛ")]
        public List<EGRULСвЮЛСвУчредитУчрФЛ> УчрФЛ { get; set; }
        /// <summary>
        /// Сведения об учредителе (участнике) - Российской Федерации, субъекте Российской Федерации, муниципальном образовании
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("УчрРФСубМО")]
        public List<EGRULСвЮЛСвУчредитУчрРФСубМО> УчрРФСубМО { get; set; }
        /// <summary>
        /// Сведения о паевом инвестиционном фонде, в состав имущества которого включена доля в уставном капитале
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("УчрПИФ")]
        public List<EGRULСвЮЛСвУчредитУчрПИФ> УчрПИФ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУчредит));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether УчрЮЛРос should be serialized
        /// </summary>
        public virtual bool ShouldSerializeУчрЮЛРос()
        {
            return УчрЮЛРос != null && УчрЮЛРос.Count > 0;
        }

        /// <summary>
        /// Test whether УчрЮЛИн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeУчрЮЛИн()
        {
            return УчрЮЛИн != null && УчрЮЛИн.Count > 0;
        }

        /// <summary>
        /// Test whether УчрФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeУчрФЛ()
        {
            return УчрФЛ != null && УчрФЛ.Count > 0;
        }

        /// <summary>
        /// Test whether УчрРФСубМО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeУчрРФСубМО()
        {
            return УчрРФСубМО != null && УчрРФСубМО.Count > 0;
        }

        /// <summary>
        /// Test whether УчрПИФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeУчрПИФ()
        {
            return УчрПИФ != null && УчрПИФ.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредит object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУчредит object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредит object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредит obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредит);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредит obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредит Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУчредит)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУчредит Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУчредит)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредит object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУчредит object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредит object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредит obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредит);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредит obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредит LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об учредителе (участнике) - российском юридическом лице
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУчредитУчрЮЛРос
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о наименовании и (при наличии) ОГРН и ИНН ЮЛ
        /// </summary>
        public СвЮЛЕГРЮЛТип НаимИННЮЛ { get; set; }
        /// <summary>
        /// Сведения о регистрации учредителя (участника) до 01.07.2002 г
        /// </summary>
        /// <summary>
        /// Формируется только при отсутствии у ЮЛ ОГРН и наличии сведений о регистрации до 01.07.2002 г
        /// </summary>
        public EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые СвРегСтарые { get; set; }
        /// <summary>
        /// Сведения о недостоверности данных об учредителе (участнике)
        /// </summary>
        /// <summary>
        /// Формируется только если в ЕГРЮЛ внесены сведения о недостоверности сведений о данном учредителе (участнике)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедДанУчр")]
        public List<СвНедДанУчрТип> СвНедДанУчр { get; set; }
        /// <summary>
        /// Сведения о доле учредителя (участника)
        /// </summary>
        public ДоляУстКапЕГРЮЛТип ДоляУстКап { get; set; }
        /// <summary>
        /// Сведения об обременении доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
        public List<СвОбремТип> СвОбрем { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУчредитУчрЮЛРос));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвНедДанУчр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНедДанУчр()
        {
            return СвНедДанУчр != null && СвНедДанУчр.Count > 0;
        }

        /// <summary>
        /// Test whether СвОбрем should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвОбрем()
        {
            return СвОбрем != null && СвОбрем.Count > 0;
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether НаимИННЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимИННЮЛ()
        {
            return (НаимИННЮЛ != null);
        }

        /// <summary>
        /// Test whether СвРегСтарые should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРегСтарые()
        {
            return (СвРегСтарые != null);
        }

        /// <summary>
        /// Test whether ДоляУстКап should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДоляУстКап()
        {
            return (ДоляУстКап != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрЮЛРос object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУчредитУчрЮЛРос object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрЮЛРос object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрЮЛРос obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрЮЛРос);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрЮЛРос obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрЮЛРос Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУчредитУчрЮЛРос)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУчредитУчрЮЛРос Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУчредитУчрЮЛРос)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрЮЛРос object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУчредитУчрЮЛРос object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрЮЛРос object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрЮЛРос obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрЮЛРос);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрЮЛРос obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрЮЛРос LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о регистрации учредителя (участника) до 01.07.2002 г
    /// </summary>
    /// <summary>
    /// Формируется только при отсутствии у ЮЛ ОГРН и наличии сведений о регистрации до 01.07.2002 г
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые
    {

        private bool _shouldSerializeДатаРег;

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Регистрационный номер, присвоенный юридическому лицу до 1 июля 2002 года
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string РегНом { get; set; }
        /// <summary>
        /// Дата регистрации юридического лица до 1 июля 2002 года
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРег { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаРегSpecified { get; set; }
        /// <summary>
        /// Наименование органа, зарегистрировавшего юридическое лицо до 1 июля 2002 года
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимРО { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаРег should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаРег()
        {
            if (_shouldSerializeДатаРег)
            {
                return true;
            }
            return (ДатаРег != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether РегНом should be serialized
        /// </summary>
        public virtual bool ShouldSerializeРегНом()
        {
            return !string.IsNullOrEmpty(РегНом);
        }

        /// <summary>
        /// Test whether НаимРО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимРО()
        {
            return !string.IsNullOrEmpty(НаимРО);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрЮЛРосСвРегСтарые LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об учредителе (участнике) - иностранном юридическом лице
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУчредитУчрЮЛИн
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о наименовании и (при наличии) ИНН ЮЛ
        /// </summary>
        public СвЮЛЕГРЮЛТип НаимИННЮЛ { get; set; }
        /// <summary>
        /// Сведения о регистрации в стране происхождения
        /// </summary>
        /// <summary>
        /// Формируется при наличии указанных сведений в ЕГРЮЛ в отношении учредителя (участника) - иностранного ЮЛ
        /// </summary>
        public СвРегИнЮЛЕГРЮЛТип СвРегИн { get; set; }
        /// <summary>
        /// Сведения о недостоверности данных об учредителе (участнике)
        /// </summary>
        /// <summary>
        /// Формируется только если в ЕГРЮЛ внесены сведения о недостоверности сведений о данном учредителе (участнике)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедДанУчр")]
        public List<СвНедДанУчрТип> СвНедДанУчр { get; set; }
        /// <summary>
        /// Сведения о доле учредителя (участника)
        /// </summary>
        public ДоляУстКапЕГРЮЛТип ДоляУстКап { get; set; }
        /// <summary>
        /// Сведения об обременении доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
        public List<СвОбремТип> СвОбрем { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУчредитУчрЮЛИн));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвНедДанУчр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНедДанУчр()
        {
            return СвНедДанУчр != null && СвНедДанУчр.Count > 0;
        }

        /// <summary>
        /// Test whether СвОбрем should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвОбрем()
        {
            return СвОбрем != null && СвОбрем.Count > 0;
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether НаимИННЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимИННЮЛ()
        {
            return (НаимИННЮЛ != null);
        }

        /// <summary>
        /// Test whether СвРегИн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРегИн()
        {
            return (СвРегИн != null);
        }

        /// <summary>
        /// Test whether ДоляУстКап should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДоляУстКап()
        {
            return (ДоляУстКап != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрЮЛИн object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУчредитУчрЮЛИн object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрЮЛИн object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрЮЛИн obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрЮЛИн);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрЮЛИн obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрЮЛИн Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУчредитУчрЮЛИн)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУчредитУчрЮЛИн Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУчредитУчрЮЛИн)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрЮЛИн object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУчредитУчрЮЛИн object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрЮЛИн object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрЮЛИн obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрЮЛИн);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрЮЛИн obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрЮЛИн LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об учредителе (участнике) - физическом лице
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУчредитУчрФЛ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о ФИО и (при наличии) ИНН ФЛ
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ { get; set; }
        /// <summary>
        /// Сведения о недостоверности данных об учредителе (участнике)
        /// </summary>
        /// <summary>
        /// Формируется только если в ЕГРЮЛ внесены сведения о недостоверности сведений о данном учредителе (участнике)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедДанУчр")]
        public List<СвНедДанУчрТип> СвНедДанУчр { get; set; }
        /// <summary>
        /// Сведения о рождении ФЛ
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public СвРождЕГРЮЛТип СвРождФЛ { get; set; }
        /// <summary>
        /// Сведения о документе, удостоверяющем личность
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public УдЛичнЕГРЮЛТип УдЛичнФЛ { get; set; }
        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public АдрРФЕГРЮЛТип АдресМЖРФ { get; set; }
        /// <summary>
        /// Сведения об адресе места жительства за пределами территории Российской Федерации
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМЖИн { get; set; }
        /// <summary>
        /// Сведения о доле учредителя (участника)
        /// </summary>
        public ДоляУстКапЕГРЮЛТип ДоляУстКап { get; set; }
        /// <summary>
        /// Сведения об обременении доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
        public List<СвОбремТип> СвОбрем { get; set; }
        /// <summary>
        /// Сведения о доверительном управляющем - ЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвДовУпрЮЛ")]
        public List<EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ> СвДовУпрЮЛ { get; set; }
        /// <summary>
        /// Сведения о доверительном управляющем - ФЛ
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвДовУпрФЛ")]
        public List<EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ> СвДовУпрФЛ { get; set; }
        /// <summary>
        /// Сведения о лице, осуществляющем управление долей, переходящей в порядке наследования
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ЛицоУпрНасл")]
        public List<EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл> ЛицоУпрНасл { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУчредитУчрФЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвНедДанУчр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНедДанУчр()
        {
            return СвНедДанУчр != null && СвНедДанУчр.Count > 0;
        }

        /// <summary>
        /// Test whether СвОбрем should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвОбрем()
        {
            return СвОбрем != null && СвОбрем.Count > 0;
        }

        /// <summary>
        /// Test whether СвДовУпрЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвДовУпрЮЛ()
        {
            return СвДовУпрЮЛ != null && СвДовУпрЮЛ.Count > 0;
        }

        /// <summary>
        /// Test whether СвДовУпрФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвДовУпрФЛ()
        {
            return СвДовУпрФЛ != null && СвДовУпрФЛ.Count > 0;
        }

        /// <summary>
        /// Test whether ЛицоУпрНасл should be serialized
        /// </summary>
        public virtual bool ShouldSerializeЛицоУпрНасл()
        {
            return ЛицоУпрНасл != null && ЛицоУпрНасл.Count > 0;
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether СвФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвФЛ()
        {
            return (СвФЛ != null);
        }

        /// <summary>
        /// Test whether СвРождФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРождФЛ()
        {
            return (СвРождФЛ != null);
        }

        /// <summary>
        /// Test whether УдЛичнФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeУдЛичнФЛ()
        {
            return (УдЛичнФЛ != null);
        }

        /// <summary>
        /// Test whether АдресМЖРФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдресМЖРФ()
        {
            return (АдресМЖРФ != null);
        }

        /// <summary>
        /// Test whether АдрМЖИн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдрМЖИн()
        {
            return (АдрМЖИн != null);
        }

        /// <summary>
        /// Test whether ДоляУстКап should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДоляУстКап()
        {
            return (ДоляУстКап != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрФЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУчредитУчрФЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрФЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрФЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУчредитУчрФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУчредитУчрФЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУчредитУчрФЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУчредитУчрФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрФЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрФЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о доверительном управляющем - ЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о наименовании и (при наличии) ОГРН и ИНН ЮЛ
        /// </summary>
        public СвЮЛЕГРЮЛТип НаимИННДовУпр { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether НаимИННДовУпр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимИННДовУпр()
        {
            return (НаимИННДовУпр != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о доверительном управляющем - ФЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о ФИО и (при наличии) ИНН ФЛ
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ { get; set; }
        /// <summary>
        /// Сведения о рождении ФЛ
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public СвРождЕГРЮЛТип СвРождФЛ { get; set; }
        /// <summary>
        /// Сведения о документе, удостоверяющем личность
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public УдЛичнЕГРЮЛТип УдЛичнФЛ { get; set; }
        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public АдрРФЕГРЮЛТип АдресМЖРФ { get; set; }
        /// <summary>
        /// Сведения об адресе места жительства за пределами территории Российской Федерации
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМЖИн { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether СвФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвФЛ()
        {
            return (СвФЛ != null);
        }

        /// <summary>
        /// Test whether СвРождФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРождФЛ()
        {
            return (СвРождФЛ != null);
        }

        /// <summary>
        /// Test whether УдЛичнФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeУдЛичнФЛ()
        {
            return (УдЛичнФЛ != null);
        }

        /// <summary>
        /// Test whether АдресМЖРФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдресМЖРФ()
        {
            return (АдресМЖРФ != null);
        }

        /// <summary>
        /// Test whether АдрМЖИн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдрМЖИн()
        {
            return (АдрМЖИн != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрФЛСвДовУпрФЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о лице, осуществляющем управление долей, переходящей в порядке наследования
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл
    {

        private bool _shouldSerializeДатаОткрНасл;

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о ФИО и (при наличии) ИНН ФЛ
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ { get; set; }
        /// <summary>
        /// Сведения о рождении ФЛ
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public СвРождЕГРЮЛТип СвРождФЛ { get; set; }
        /// <summary>
        /// Сведения о документе, удостоверяющем личность
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public УдЛичнЕГРЮЛТип УдЛичнФЛ { get; set; }
        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public АдрРФЕГРЮЛТип АдресМЖРФ { get; set; }
        /// <summary>
        /// Сведения об адресе места жительства за пределами территории Российской Федерации
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМЖИн { get; set; }
        /// <summary>
        /// Дата открытия наследства (дата смерти участника)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаОткрНасл { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаОткрНасл should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаОткрНасл()
        {
            if (_shouldSerializeДатаОткрНасл)
            {
                return true;
            }
            return (ДатаОткрНасл != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether СвФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвФЛ()
        {
            return (СвФЛ != null);
        }

        /// <summary>
        /// Test whether СвРождФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРождФЛ()
        {
            return (СвРождФЛ != null);
        }

        /// <summary>
        /// Test whether УдЛичнФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeУдЛичнФЛ()
        {
            return (УдЛичнФЛ != null);
        }

        /// <summary>
        /// Test whether АдресМЖРФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдресМЖРФ()
        {
            return (АдресМЖРФ != null);
        }

        /// <summary>
        /// Test whether АдрМЖИн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдрМЖИн()
        {
            return (АдрМЖИн != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрФЛЛицоУпрНасл LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об учредителе (участнике) - Российской Федерации, субъекте Российской Федерации, муниципальном образовании
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУчредитУчрРФСубМО
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о виде учредителя (участника) и (при необходимости) наименовании муниципального образования и региона
        /// </summary>
        public EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр ВидНаимУчр { get; set; }
        /// <summary>
        /// Сведения о недостоверности данных об учредителе (участнике)
        /// </summary>
        /// <summary>
        /// Формируется только если в ЕГРЮЛ внесены сведения о недостоверности сведений о данном учредителе (участнике)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедДанУчр")]
        public List<СвНедДанУчрТип> СвНедДанУчр { get; set; }
        /// <summary>
        /// Сведения о доле учредителя (участника)
        /// </summary>
        public ДоляУстКапЕГРЮЛТип ДоляУстКап { get; set; }
        /// <summary>
        /// Сведения об органе государственной власти, органе местного самоуправления или о юридическом лице, осуществляющем права учредителя (участника)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОргОсущПр")]
        public List<EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр> СвОргОсущПр { get; set; }
        /// <summary>
        /// Сведения о физическом лице, осуществляющем права учредителя (участника)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвФЛОсущПр")]
        public List<EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр> СвФЛОсущПр { get; set; }
        /// <summary>
        /// Сведения об обременении доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
        public List<СвОбремТип> СвОбрем { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУчредитУчрРФСубМО));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвНедДанУчр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНедДанУчр()
        {
            return СвНедДанУчр != null && СвНедДанУчр.Count > 0;
        }

        /// <summary>
        /// Test whether СвОргОсущПр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвОргОсущПр()
        {
            return СвОргОсущПр != null && СвОргОсущПр.Count > 0;
        }

        /// <summary>
        /// Test whether СвФЛОсущПр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвФЛОсущПр()
        {
            return СвФЛОсущПр != null && СвФЛОсущПр.Count > 0;
        }

        /// <summary>
        /// Test whether СвОбрем should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвОбрем()
        {
            return СвОбрем != null && СвОбрем.Count > 0;
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether ВидНаимУчр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeВидНаимУчр()
        {
            return (ВидНаимУчр != null);
        }

        /// <summary>
        /// Test whether ДоляУстКап should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДоляУстКап()
        {
            return (ДоляУстКап != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрРФСубМО object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУчредитУчрРФСубМО object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрРФСубМО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрРФСубМО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрРФСубМО);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрРФСубМО obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрРФСубМО Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУчредитУчрРФСубМО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУчредитУчрРФСубМО Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУчредитУчрРФСубМО)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрРФСубМО object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУчредитУчрРФСубМО object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрРФСубМО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрРФСубМО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрРФСубМО);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрРФСубМО obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрРФСубМО LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о виде учредителя (участника) и (при необходимости) наименовании муниципального образования и региона
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр
    {

        private bool _shouldSerializeКодУчрРФСубМО;

        private static XmlSerializer serializer;

        /// <summary>
        /// Код вида учредителя
        /// </summary>
        /// <summary>
        /// , где: 1 - если учредителем (участником) является Российская Федерация; 2 - если учредителем (участником) является субъект Российской организации; 3 - если учредителем (участником) является муниципальное образование
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчрКодУчрРФСубМО КодУчрРФСубМО { get; set; }
        /// <summary>
        /// Наименование муниципального образования
        /// </summary>
        /// <summary>
        /// Является обязательным, если значение атрибута КодУчрРФСубМО=3
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимМО { get; set; }
        /// <summary>
        /// Код субъекта Российской Федерации, который является учредителем (участником) юридического лица или на территории которого находится муниципальное образование, которое является учредителем (участником) юридического лица
        /// </summary>
        /// <summary>
        /// Является обязательным, если значение атрибута КодУчрРФСубМО=2 или 3
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодРегион { get; set; }
        /// <summary>
        /// Наименование субъекта Российской Федерации
        /// </summary>
        /// <summary>
        /// Является обязательным, если значение атрибута КодУчрРФСубМО=2 или 3
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимРегион { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether КодУчрРФСубМО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодУчрРФСубМО()
        {
            if (_shouldSerializeКодУчрРФСубМО)
            {
                return true;
            }
            return (КодУчрРФСубМО != default(EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчрКодУчрРФСубМО));
        }

        /// <summary>
        /// Test whether НаимМО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимМО()
        {
            return !string.IsNullOrEmpty(НаимМО);
        }

        /// <summary>
        /// Test whether КодРегион should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодРегион()
        {
            return !string.IsNullOrEmpty(КодРегион);
        }

        /// <summary>
        /// Test whether НаимРегион should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимРегион()
        {
            return !string.IsNullOrEmpty(НаимРегион);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчр LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum EGRULСвЮЛСвУчредитУчрРФСубМОВидНаимУчрКодУчрРФСубМО
    {

        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    /// <summary>
    /// Сведения об органе государственной власти, органе местного самоуправления или о юридическом лице, осуществляющем права учредителя (участника)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о наименовании и (при наличии) ОГРН и ИНН органа государственной власти, органа местного самоуправления или ЮЛ
        /// </summary>
        public СвЮЛЕГРЮЛТип НаимИННЮЛ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether НаимИННЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимИННЮЛ()
        {
            return (НаимИННЮЛ != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о физическом лице, осуществляющем права учредителя (участника)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о ФИО и (при наличии) ИНН ФЛ
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ { get; set; }
        /// <summary>
        /// Сведения о рождении ФЛ
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public СвРождЕГРЮЛТип СвРождФЛ { get; set; }
        /// <summary>
        /// Сведения о документе, удостоверяющем личность
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public УдЛичнЕГРЮЛТип УдЛичнФЛ { get; set; }
        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public АдрРФЕГРЮЛТип АдресМЖРФ { get; set; }
        /// <summary>
        /// Сведения об адресе места жительства за пределами территории Российской Федерации
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМЖИн { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether СвФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвФЛ()
        {
            return (СвФЛ != null);
        }

        /// <summary>
        /// Test whether СвРождФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРождФЛ()
        {
            return (СвРождФЛ != null);
        }

        /// <summary>
        /// Test whether УдЛичнФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeУдЛичнФЛ()
        {
            return (УдЛичнФЛ != null);
        }

        /// <summary>
        /// Test whether АдресМЖРФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдресМЖРФ()
        {
            return (АдресМЖРФ != null);
        }

        /// <summary>
        /// Test whether АдрМЖИн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдрМЖИн()
        {
            return (АдрМЖИн != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о паевом инвестиционном фонде, в состав имущества которого включена доля в уставном капитале
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУчредитУчрПИФ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о названии (индивидуальном обозначении) паевого инвестиционного фонда
        /// </summary>
        public EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ СвНаимПИФ { get; set; }
        /// <summary>
        /// Сведения о недостоверности данных об учредителе (участнике)
        /// </summary>
        /// <summary>
        /// Формируется только если в ЕГРЮЛ внесены сведения о недостоверности сведений о данном учредителе (участнике)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедДанУчр")]
        public List<СвНедДанУчрТип> СвНедДанУчр { get; set; }
        /// <summary>
        /// Сведения об управляющей компании паевого инвестиционного фонда
        /// </summary>
        [System.Xml.Serialization.XmlArrayItemAttribute("ГРНДатаПерв", typeof(ГРНДатаТип), IsNullable = false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("УпрКомпПиф", typeof(СвЮЛЕГРЮЛТип), IsNullable = false)]
        public List<object> СвУпрКомпПИФ { get; set; }
        /// <summary>
        /// Сведения о доле учредителя (участника)
        /// </summary>
        public ДоляУстКапЕГРЮЛТип ДоляУстКап { get; set; }
        /// <summary>
        /// Сведения об обременении доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
        public List<СвОбремТип> СвОбрем { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУчредитУчрПИФ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвНедДанУчр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНедДанУчр()
        {
            return СвНедДанУчр != null && СвНедДанУчр.Count > 0;
        }

        /// <summary>
        /// Test whether СвУпрКомпПИФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвУпрКомпПИФ()
        {
            return СвУпрКомпПИФ != null && СвУпрКомпПИФ.Count > 0;
        }

        /// <summary>
        /// Test whether СвОбрем should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвОбрем()
        {
            return СвОбрем != null && СвОбрем.Count > 0;
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether СвНаимПИФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНаимПИФ()
        {
            return (СвНаимПИФ != null);
        }

        /// <summary>
        /// Test whether ДоляУстКап should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДоляУстКап()
        {
            return (ДоляУстКап != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрПИФ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУчредитУчрПИФ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрПИФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрПИФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрПИФ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрПИФ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрПИФ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУчредитУчрПИФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУчредитУчрПИФ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУчредитУчрПИФ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрПИФ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУчредитУчрПИФ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрПИФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрПИФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрПИФ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрПИФ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрПИФ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о названии (индивидуальном обозначении) паевого инвестиционного фонда
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Название (индивидуальное обозначение) паевого инвестиционного фонда
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимПИФ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether НаимПИФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимПИФ()
        {
            return !string.IsNullOrEmpty(НаимПИФ);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвУчредитУчрПИФСвНаимПИФ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о держателе реестра акционеров акционерного общества
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвДержРеестрАО
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Наименование и (при наличии) ОГРН и ИНН держателе реестра акционеров акционерного общества
        /// </summary>
        public СвЮЛЕГРЮЛТип ДержРеестрАО { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвДержРеестрАО));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether ДержРеестрАО should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДержРеестрАО()
        {
            return (ДержРеестрАО != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвДержРеестрАО object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвДержРеестрАО object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвДержРеестрАО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвДержРеестрАО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвДержРеестрАО);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвДержРеестрАО obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвДержРеестрАО Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвДержРеестрАО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвДержРеестрАО Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвДержРеестрАО)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвДержРеестрАО object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвДержРеестрАО object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвДержРеестрАО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвДержРеестрАО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвДержРеестрАО);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвДержРеестрАО obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвДержРеестрАО LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о видах экономической деятельности по Общероссийскому классификатору видов экономической деятельности
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвОКВЭД
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения об основном виде деятельности
        /// </summary>
        public СвОКВЭДТип СвОКВЭДОсн { get; set; }
        /// <summary>
        /// Сведения о дополнительном виде деятельности
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОКВЭДДоп")]
        public List<СвОКВЭДТип> СвОКВЭДДоп { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвОКВЭД));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвОКВЭДДоп should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвОКВЭДДоп()
        {
            return СвОКВЭДДоп != null && СвОКВЭДДоп.Count > 0;
        }

        /// <summary>
        /// Test whether СвОКВЭДОсн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвОКВЭДОсн()
        {
            return (СвОКВЭДОсн != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвОКВЭД object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвОКВЭД object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвОКВЭД object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвОКВЭД obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвОКВЭД);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвОКВЭД obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвОКВЭД Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвОКВЭД)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвОКВЭД Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвОКВЭД)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвОКВЭД object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвОКВЭД object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвОКВЭД object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвОКВЭД obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвОКВЭД);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвОКВЭД obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвОКВЭД LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о лицензиях, выданных ЮЛ
    /// </summary>
    /// <summary>
    /// Передаются сведения только о действующих лицензиях или лицензиях, действие которых приостановлено. При передаче сведений о ЮЛ, прекратившем деятельность, сведения о лицензиях не передаются
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвЛицензия
    {

        private bool _shouldSerializeДатаОкончЛиц;

        private bool _shouldSerializeДатаНачЛиц;

        private bool _shouldSerializeДатаЛиц;

        private static XmlSerializer serializer;

        /// <summary>
        /// Наименование лицензируемого вида деятельности, на который выдана лицензия
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("НаимЛицВидДеят")]
        public List<string> НаимЛицВидДеят { get; set; }
        /// <summary>
        /// Сведения об адресе места осуществления лицензируемого вида деятельности
        /// </summary>
        /// <summary>
        /// Элемент не формируется, если конкретное место осуществления лицензируемого вида деятельности в лицензии не указано или указано в географических координатах. При наличии - сведения указываются в отношении каждого адреса места осуществления лицензируемого вида деятельности, внесенного в ЕГРЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("МестоДейстЛиц")]
        public List<string> МестоДейстЛиц { get; set; }
        /// <summary>
        /// Наименование лицензирующего органа, выдавшего или переоформившего лицензию
        /// </summary>
        /// <summary>
        /// Формируется в случае наличия указанных сведений в ЕГРЮЛ
        /// </summary>
        public string ЛицОргВыдЛиц { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Сведения о приостановлении действия лицензии
        /// </summary>
        /// <summary>
        /// Формируется в случае, если на момент выдачи сведений в ЕГРЮЛ имеются сведения о том, что лицензия приостановлена
        /// </summary>
        public EGRULСвЮЛСвЛицензияСвПриостЛиц СвПриостЛиц { get; set; }
        /// <summary>
        /// Серия лицензии
        /// </summary>
        /// <summary>
        /// Является обязательным, если выданная лицензия имеет такой реквизит
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string СерЛиц { get; set; }
        /// <summary>
        /// Номер лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомЛиц { get; set; }
        /// <summary>
        /// Вид лицензии
        /// </summary>
        /// <summary>
        /// Является обязательным, если выданная лицензия имеет такой реквизит
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВидЛиц { get; set; }
        /// <summary>
        /// Дата лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаЛиц { get; set; }
        /// <summary>
        /// Дата начала действия лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаНачЛиц { get; set; }
        /// <summary>
        /// Дата окончания действия лицензии
        /// </summary>
        /// <summary>
        /// Является обязательным, если выданная лицензия имеет такой реквизит
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаОкончЛиц { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаОкончЛицSpecified { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвЛицензия));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether НаимЛицВидДеят should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимЛицВидДеят()
        {
            return НаимЛицВидДеят != null && НаимЛицВидДеят.Count > 0;
        }

        /// <summary>
        /// Test whether МестоДейстЛиц should be serialized
        /// </summary>
        public virtual bool ShouldSerializeМестоДейстЛиц()
        {
            return МестоДейстЛиц != null && МестоДейстЛиц.Count > 0;
        }

        /// <summary>
        /// Test whether ДатаЛиц should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаЛиц()
        {
            if (_shouldSerializeДатаЛиц)
            {
                return true;
            }
            return (ДатаЛиц != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ДатаНачЛиц should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаНачЛиц()
        {
            if (_shouldSerializeДатаНачЛиц)
            {
                return true;
            }
            return (ДатаНачЛиц != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ДатаОкончЛиц should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаОкончЛиц()
        {
            if (_shouldSerializeДатаОкончЛиц)
            {
                return true;
            }
            return (ДатаОкончЛиц != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether СвПриостЛиц should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвПриостЛиц()
        {
            return (СвПриостЛиц != null);
        }

        /// <summary>
        /// Test whether ЛицОргВыдЛиц should be serialized
        /// </summary>
        public virtual bool ShouldSerializeЛицОргВыдЛиц()
        {
            return !string.IsNullOrEmpty(ЛицОргВыдЛиц);
        }

        /// <summary>
        /// Test whether СерЛиц should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСерЛиц()
        {
            return !string.IsNullOrEmpty(СерЛиц);
        }

        /// <summary>
        /// Test whether НомЛиц should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНомЛиц()
        {
            return !string.IsNullOrEmpty(НомЛиц);
        }

        /// <summary>
        /// Test whether ВидЛиц should be serialized
        /// </summary>
        public virtual bool ShouldSerializeВидЛиц()
        {
            return !string.IsNullOrEmpty(ВидЛиц);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвЛицензия object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвЛицензия object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЛицензия object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвЛицензия obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЛицензия);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвЛицензия obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвЛицензия Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвЛицензия)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвЛицензия Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвЛицензия)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвЛицензия object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвЛицензия object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЛицензия object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЛицензия obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЛицензия);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЛицензия obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвЛицензия LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о приостановлении действия лицензии
    /// </summary>
    /// <summary>
    /// Формируется в случае, если на момент выдачи сведений в ЕГРЮЛ имеются сведения о том, что лицензия приостановлена
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвЛицензияСвПриостЛиц
    {

        private bool _shouldSerializeДатаПриостЛиц;

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Дата приостановления действия лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаПриостЛиц { get; set; }
        /// <summary>
        /// Наименование лицензирующего органа, приостановившего действие лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ЛицОргПриостЛиц { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвЛицензияСвПриостЛиц));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаПриостЛиц should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаПриостЛиц()
        {
            if (_shouldSerializeДатаПриостЛиц)
            {
                return true;
            }
            return (ДатаПриостЛиц != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether ЛицОргПриостЛиц should be serialized
        /// </summary>
        public virtual bool ShouldSerializeЛицОргПриостЛиц()
        {
            return !string.IsNullOrEmpty(ЛицОргПриостЛиц);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвЛицензияСвПриостЛиц object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвЛицензияСвПриостЛиц object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЛицензияСвПриостЛиц object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвЛицензияСвПриостЛиц obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЛицензияСвПриостЛиц);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвЛицензияСвПриостЛиц obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвЛицензияСвПриостЛиц Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвЛицензияСвПриостЛиц)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвЛицензияСвПриостЛиц Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвЛицензияСвПриостЛиц)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвЛицензияСвПриостЛиц object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвЛицензияСвПриостЛиц object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЛицензияСвПриостЛиц object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЛицензияСвПриостЛиц obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЛицензияСвПриостЛиц);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЛицензияСвПриостЛиц obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвЛицензияСвПриостЛиц LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об обособленных подразделениях юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвПодразд
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения о филиалах юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвФилиал")]
        public List<EGRULСвЮЛСвПодраздСвФилиал> СвФилиал { get; set; }
        /// <summary>
        /// Сведения о представительствах юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвПредстав")]
        public List<EGRULСвЮЛСвПодраздСвПредстав> СвПредстав { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвПодразд));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвФилиал should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвФилиал()
        {
            return СвФилиал != null && СвФилиал.Count > 0;
        }

        /// <summary>
        /// Test whether СвПредстав should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвПредстав()
        {
            return СвПредстав != null && СвПредстав.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвПодразд object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвПодразд object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПодразд object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвПодразд obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПодразд);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвПодразд obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвПодразд Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвПодразд)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвПодразд Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвПодразд)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвПодразд object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвПодразд object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПодразд object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПодразд obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПодразд);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПодразд obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвПодразд LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о филиалах юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвПодраздСвФилиал
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном филиале
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о наименовании филиала
        /// </summary>
        public СвНаимПодраздТип СвНаим { get; set; }
        /// <summary>
        /// Адрес (место расположения) на территории Российской Федерации
        /// </summary>
        public АдрРФЕГРЮЛТип АдрМНРФ { get; set; }
        /// <summary>
        /// Адрес (место расположения) за пределами территории Российской Федерации
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМНИн { get; set; }
        /// <summary>
        /// Сведения об учете в налоговом органе по месту нахождения филиала
        /// </summary>
        public СвУчетНОПодраздТип СвУчетНОФилиал { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвПодраздСвФилиал));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether СвНаим should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНаим()
        {
            return (СвНаим != null);
        }

        /// <summary>
        /// Test whether АдрМНРФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдрМНРФ()
        {
            return (АдрМНРФ != null);
        }

        /// <summary>
        /// Test whether АдрМНИн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдрМНИн()
        {
            return (АдрМНИн != null);
        }

        /// <summary>
        /// Test whether СвУчетНОФилиал should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвУчетНОФилиал()
        {
            return (СвУчетНОФилиал != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвПодраздСвФилиал object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвПодраздСвФилиал object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПодраздСвФилиал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвПодраздСвФилиал obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПодраздСвФилиал);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвПодраздСвФилиал obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвПодраздСвФилиал Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвПодраздСвФилиал)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвПодраздСвФилиал Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвПодраздСвФилиал)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвПодраздСвФилиал object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвПодраздСвФилиал object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПодраздСвФилиал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПодраздСвФилиал obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПодраздСвФилиал);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПодраздСвФилиал obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвПодраздСвФилиал LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о представительствах юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвПодраздСвПредстав
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном представительстве
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв { get; set; }
        /// <summary>
        /// Сведения о наименовании представительства
        /// </summary>
        public СвНаимПодраздТип СвНаим { get; set; }
        /// <summary>
        /// Адрес (место расположения) на территории Российской Федерации
        /// </summary>
        public АдрРФЕГРЮЛТип АдрМНРФ { get; set; }
        /// <summary>
        /// Адрес (место расположения) за пределами территории Российской Федерации
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМНИн { get; set; }
        /// <summary>
        /// Сведения об учете в налоговом органе по месту нахождения представительства
        /// </summary>
        public СвУчетНОПодраздТип СвУчетНОПредстав { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвПодраздСвПредстав));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДатаПерв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаПерв()
        {
            return (ГРНДатаПерв != null);
        }

        /// <summary>
        /// Test whether СвНаим should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвНаим()
        {
            return (СвНаим != null);
        }

        /// <summary>
        /// Test whether АдрМНРФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдрМНРФ()
        {
            return (АдрМНРФ != null);
        }

        /// <summary>
        /// Test whether АдрМНИн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдрМНИн()
        {
            return (АдрМНИн != null);
        }

        /// <summary>
        /// Test whether СвУчетНОПредстав should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвУчетНОПредстав()
        {
            return (СвУчетНОПредстав != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвПодраздСвПредстав object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвПодраздСвПредстав object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПодраздСвПредстав object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвПодраздСвПредстав obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПодраздСвПредстав);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвПодраздСвПредстав obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвПодраздСвПредстав Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвПодраздСвПредстав)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвПодраздСвПредстав Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвПодраздСвПредстав)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвПодраздСвПредстав object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвПодраздСвПредстав object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПодраздСвПредстав object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПодраздСвПредстав obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПодраздСвПредстав);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПодраздСвПредстав obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвПодраздСвПредстав LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об участии в реорганизации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвРеорг
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения о форме реорганизации (статусе) юридического лица
        /// </summary>
        public EGRULСвЮЛСвРеоргСвСтатус СвСтатус { get; set; }
        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей сведения о начале реорганизации
        /// </summary>
        public ГРНДатаТип ГРНДата { get; set; }
        /// <summary>
        /// ГРН и дата внесения записи, которой в ЕГРЮЛ внесены сведения об изменении состава участвующих в реорганизации юридических лиц
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ГРНДатаИзмСостРеоргЮЛ")]
        public List<ГРНДатаТип> ГРНДатаИзмСостРеоргЮЛ { get; set; }
        /// <summary>
        /// Сведения о юридических лицах, участвующих в реорганизации
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвРеоргЮЛ")]
        public List<EGRULСвЮЛСвРеоргСвРеоргЮЛ> СвРеоргЮЛ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвРеорг));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДатаИзмСостРеоргЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИзмСостРеоргЮЛ()
        {
            return ГРНДатаИзмСостРеоргЮЛ != null && ГРНДатаИзмСостРеоргЮЛ.Count > 0;
        }

        /// <summary>
        /// Test whether СвРеоргЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРеоргЮЛ()
        {
            return СвРеоргЮЛ != null && СвРеоргЮЛ.Count > 0;
        }

        /// <summary>
        /// Test whether СвСтатус should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвСтатус()
        {
            return (СвСтатус != null);
        }

        /// <summary>
        /// Test whether ГРНДата should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДата()
        {
            return (ГРНДата != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвРеорг object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвРеорг object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвРеорг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвРеорг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвРеорг);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвРеорг obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвРеорг Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвРеорг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвРеорг Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвРеорг)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвРеорг object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвРеорг object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвРеорг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвРеорг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвРеорг);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвРеорг obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвРеорг LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о форме реорганизации (статусе) юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвРеоргСвСтатус
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Код формы реорганизации (статуса) юридического лица по справочнику СЮЛСТ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСтатусЮЛ { get; set; }
        /// <summary>
        /// Наименование формы реорганизации (статуса) юридического лица по справочнику СЮЛСТ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСтатусЮЛ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвРеоргСвСтатус));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether КодСтатусЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодСтатусЮЛ()
        {
            return !string.IsNullOrEmpty(КодСтатусЮЛ);
        }

        /// <summary>
        /// Test whether НаимСтатусЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимСтатусЮЛ()
        {
            return !string.IsNullOrEmpty(НаимСтатусЮЛ);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвРеоргСвСтатус object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвРеоргСвСтатус object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвРеоргСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвРеоргСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвРеоргСвСтатус);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвРеоргСвСтатус obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвРеоргСвСтатус Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвРеоргСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвРеоргСвСтатус Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвРеоргСвСтатус)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвРеоргСвСтатус object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвРеоргСвСтатус object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвРеоргСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвРеоргСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвРеоргСвСтатус);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвРеоргСвСтатус obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвРеоргСвСтатус LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о юридических лицах, участвующих в реорганизации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвРеоргСвРеоргЮЛ
    {

        private bool _shouldSerializeСостЮЛпосле;

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }
        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }
        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }
        /// <summary>
        /// Состояние юридического лица после завершения реорганизации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public EGRULСвЮЛСвРеоргСвРеоргЮЛСостЮЛпосле СостЮЛпосле { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СостЮЛпослеSpecified { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвРеоргСвРеоргЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СостЮЛпосле should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСостЮЛпосле()
        {
            if (_shouldSerializeСостЮЛпосле)
            {
                return true;
            }
            return (СостЮЛпосле != default(EGRULСвЮЛСвРеоргСвРеоргЮЛСостЮЛпосле));
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether ОГРН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОГРН()
        {
            return !string.IsNullOrEmpty(ОГРН);
        }

        /// <summary>
        /// Test whether ИНН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИНН()
        {
            return !string.IsNullOrEmpty(ИНН);
        }

        /// <summary>
        /// Test whether НаимЮЛПолн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимЮЛПолн()
        {
            return !string.IsNullOrEmpty(НаимЮЛПолн);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвРеоргСвРеоргЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвРеоргСвРеоргЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвРеоргСвРеоргЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвРеоргСвРеоргЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвРеоргСвРеоргЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвРеоргСвРеоргЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвРеоргСвРеоргЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвРеоргСвРеоргЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвРеоргСвРеоргЮЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвРеоргСвРеоргЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвРеоргСвРеоргЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвРеоргСвРеоргЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвРеоргСвРеоргЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвРеоргСвРеоргЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвРеоргСвРеоргЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвРеоргСвРеоргЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвРеоргСвРеоргЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum EGRULСвЮЛСвРеоргСвРеоргЮЛСостЮЛпосле
    {

        [System.Xml.Serialization.XmlEnumAttribute("ПРЕКРАТИТ ДЕЯТЕЛЬНОСТЬ ПОСЛЕ РЕОРГАНИЗАЦИИ")]
        ПРЕКРАТИТДЕЯТЕЛЬНОСТЬПОСЛЕРЕОРГАНИЗАЦИИ,

        [System.Xml.Serialization.XmlEnumAttribute("ПРОДОЛЖИТ ДЕЯТЕЛЬНОСТЬ ПОСЛЕ РЕОРГАНИЗАЦИИ")]
        ПРОДОЛЖИТДЕЯТЕЛЬНОСТЬПОСЛЕРЕОРГАНИЗАЦИИ,
    }

    /// <summary>
    /// Сведения о правопредшественнике
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвПредш
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ГРНДата", typeof(ГРНДатаТип))]
        [System.Xml.Serialization.XmlElementAttribute("ГРНДатаИспр", typeof(ГРНДатаТип))]
        [System.Xml.Serialization.XmlElementAttribute("СвЮЛсложнРеорг", typeof(EGRULСвЮЛСвПредшСвЮЛсложнРеорг))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType2[] ItemsElementName { get; set; }
        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }
        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }
        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвПредш));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ОГРН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОГРН()
        {
            return !string.IsNullOrEmpty(ОГРН);
        }

        /// <summary>
        /// Test whether ИНН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИНН()
        {
            return !string.IsNullOrEmpty(ИНН);
        }

        /// <summary>
        /// Test whether НаимЮЛПолн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимЮЛПолн()
        {
            return !string.IsNullOrEmpty(НаимЮЛПолн);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвПредш object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвПредш object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПредш object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвПредш obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПредш);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвПредш obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвПредш Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвПредш)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвПредш Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвПредш)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвПредш object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвПредш object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПредш object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПредш obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПредш);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПредш obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвПредш LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о ЮЛ, путем реорганизации которого был создан правопредшественник при реорганизации в форме выделения или разделения с одновременным присоединением или слиянием
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвПредшСвЮЛсложнРеорг
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }
        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }
        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвПредшСвЮЛсложнРеорг));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ОГРН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОГРН()
        {
            return !string.IsNullOrEmpty(ОГРН);
        }

        /// <summary>
        /// Test whether ИНН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИНН()
        {
            return !string.IsNullOrEmpty(ИНН);
        }

        /// <summary>
        /// Test whether НаимЮЛПолн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимЮЛПолн()
        {
            return !string.IsNullOrEmpty(НаимЮЛПолн);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвПредшСвЮЛсложнРеорг object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвПредшСвЮЛсложнРеорг object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПредшСвЮЛсложнРеорг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвПредшСвЮЛсложнРеорг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПредшСвЮЛсложнРеорг);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвПредшСвЮЛсложнРеорг obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвПредшСвЮЛсложнРеорг Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвПредшСвЮЛсложнРеорг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвПредшСвЮЛсложнРеорг Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвПредшСвЮЛсложнРеорг)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвПредшСвЮЛсложнРеорг object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвПредшСвЮЛсложнРеорг object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПредшСвЮЛсложнРеорг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПредшСвЮЛсложнРеорг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПредшСвЮЛсложнРеорг);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПредшСвЮЛсложнРеорг obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвПредшСвЮЛсложнРеорг LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema = false)]
    public enum ItemsChoiceType2
    {

        /// <remarks/>
        ГРНДата,

        /// <remarks/>
        ГРНДатаИспр,

        /// <remarks/>
        СвЮЛсложнРеорг,
    }

    /// <summary>
    /// Сведения о крестьянском (фермерском) хозяйстве, на базе имущества которого создано юридическое лицо
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвКФХПредш
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения о ФИО и (при наличии) ИНН главы КФХ
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ { get; set; }
        /// <summary>
        /// ОГРНИП крестьянского (фермерского) хозяйства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРНИП { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвКФХПредш));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвФЛ()
        {
            return (СвФЛ != null);
        }

        /// <summary>
        /// Test whether ОГРНИП should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОГРНИП()
        {
            return !string.IsNullOrEmpty(ОГРНИП);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвКФХПредш object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвКФХПредш object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвКФХПредш object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвКФХПредш obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвКФХПредш);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвКФХПредш obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвКФХПредш Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвКФХПредш)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвКФХПредш Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвКФХПредш)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвКФХПредш object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвКФХПредш object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвКФХПредш object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвКФХПредш obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвКФХПредш);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвКФХПредш obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвКФХПредш LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о правопреемнике
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвПреем
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ГРНДата", typeof(ГРНДатаТип))]
        [System.Xml.Serialization.XmlElementAttribute("ГРНДатаИспр", typeof(ГРНДатаТип))]
        [System.Xml.Serialization.XmlElementAttribute("СвЮЛсложнРеорг", typeof(EGRULСвЮЛСвПреемСвЮЛсложнРеорг))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType3[] ItemsElementName { get; set; }
        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }
        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }
        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвПреем));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ОГРН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОГРН()
        {
            return !string.IsNullOrEmpty(ОГРН);
        }

        /// <summary>
        /// Test whether ИНН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИНН()
        {
            return !string.IsNullOrEmpty(ИНН);
        }

        /// <summary>
        /// Test whether НаимЮЛПолн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимЮЛПолн()
        {
            return !string.IsNullOrEmpty(НаимЮЛПолн);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвПреем object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвПреем object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПреем object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвПреем obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПреем);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвПреем obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвПреем Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвПреем)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвПреем Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвПреем)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвПреем object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвПреем object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПреем object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПреем obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПреем);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПреем obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвПреем LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о ЮЛ, которое было создано в форме слияния с участием правопреемника, или к которому присоединился правопреемник при реорганизации в форме выделения или разделения с одновременным присоединением или слиянием
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвПреемСвЮЛсложнРеорг
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }
        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }
        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвПреемСвЮЛсложнРеорг));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ОГРН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОГРН()
        {
            return !string.IsNullOrEmpty(ОГРН);
        }

        /// <summary>
        /// Test whether ИНН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИНН()
        {
            return !string.IsNullOrEmpty(ИНН);
        }

        /// <summary>
        /// Test whether НаимЮЛПолн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимЮЛПолн()
        {
            return !string.IsNullOrEmpty(НаимЮЛПолн);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвПреемСвЮЛсложнРеорг object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвПреемСвЮЛсложнРеорг object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПреемСвЮЛсложнРеорг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвПреемСвЮЛсложнРеорг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПреемСвЮЛсложнРеорг);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвПреемСвЮЛсложнРеорг obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвПреемСвЮЛсложнРеорг Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвПреемСвЮЛсложнРеорг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвПреемСвЮЛсложнРеорг Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвПреемСвЮЛсложнРеорг)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвПреемСвЮЛсложнРеорг object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвПреемСвЮЛсложнРеорг object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвПреемСвЮЛсложнРеорг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПреемСвЮЛсложнРеорг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвПреемСвЮЛсложнРеорг);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвПреемСвЮЛсложнРеорг obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвПреемСвЮЛсложнРеорг LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema = false)]
    public enum ItemsChoiceType3
    {

        /// <remarks/>
        ГРНДата,

        /// <remarks/>
        ГРНДатаИспр,

        /// <remarks/>
        СвЮЛсложнРеорг,
    }

    /// <summary>
    /// Сведения о крестьянском (фермерском) хозяйстве, которые внесены в ЕГРИП в связи с приведением правового статуса крестьянского (фермерского) хозяйства в соответствие с нормами части первой Гражданского кодекса Российской Федерации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвКФХПреем
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения о ФИО и (при наличии) ИНН главы КФХ
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ { get; set; }
        /// <summary>
        /// ОГРНИП крестьянского (фермерского) хозяйства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРНИП { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвКФХПреем));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвФЛ()
        {
            return (СвФЛ != null);
        }

        /// <summary>
        /// Test whether ОГРНИП should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОГРНИП()
        {
            return !string.IsNullOrEmpty(ОГРНИП);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвКФХПреем object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвКФХПреем object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвКФХПреем object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвКФХПреем obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвКФХПреем);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвКФХПреем obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвКФХПреем Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвКФХПреем)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвКФХПреем Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвКФХПреем)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвКФХПреем object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвКФХПреем object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвКФХПреем object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвКФХПреем obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвКФХПреем);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвКФХПреем obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвКФХПреем LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о записях, внесенных в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвЗапЕГРЮЛ
    {

        private bool _shouldSerializeДатаЗап;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ВидЗап", typeof(ВидЗапТип))]
        [System.Xml.Serialization.XmlElementAttribute("ГРНДатаИспрПред", typeof(ИдГРНДатаТип))]
        [System.Xml.Serialization.XmlElementAttribute("ГРНДатаНедПред", typeof(ИдГРНДатаТип))]
        [System.Xml.Serialization.XmlElementAttribute("СвЗаявФЛ", typeof(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ))]
        [System.Xml.Serialization.XmlElementAttribute("СвРегОрг", typeof(СвРегОргТип))]
        [System.Xml.Serialization.XmlElementAttribute("СвСвид", typeof(EGRULСвЮЛСвЗапЕГРЮЛСвСвид))]
        [System.Xml.Serialization.XmlElementAttribute("СвСтатусЗап", typeof(EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап))]
        [System.Xml.Serialization.XmlElementAttribute("СведПредДок", typeof(EGRULСвЮЛСвЗапЕГРЮЛСведПредДок))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType5[] ItemsElementName { get; set; }
        /// <summary>
        /// Системный идентификатор записи
        /// </summary>
        /// <summary>
        /// При наличии государственного регистрационного номера записи может совпадать с этим номером
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string ИдЗап { get; set; }
        /// <summary>
        /// Государственный регистрационный номер записи
        /// </summary>
        /// <summary>
        /// Может отсутствовать, если запись в ЕГРЮЛ внесена без присвоения государственного регистрационного номера
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ГРН { get; set; }
        /// <summary>
        /// Дата внесения записи в ЕГРЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаЗап { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвЗапЕГРЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаЗап should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаЗап()
        {
            if (_shouldSerializeДатаЗап)
            {
                return true;
            }
            return (ДатаЗап != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ИдЗап should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИдЗап()
        {
            return !string.IsNullOrEmpty(ИдЗап);
        }

        /// <summary>
        /// Test whether ГРН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРН()
        {
            return !string.IsNullOrEmpty(ГРН);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвЗапЕГРЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвЗапЕГРЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвЗапЕГРЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвЗапЕГРЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о заявителе
    /// </summary>
    /// <summary>
    /// Формируется при наличии указанных сведений и формировании выписки для правоохранительных органов или для внутреннего использования в органах ФНС России
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Заявитель
        /// </summary>
        public EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв ВидЗаяв { get; set; }
        /// <summary>
        /// Сведения о юридическом лице, от имени которого действует заявитель
        /// </summary>
        /// <summary>
        /// Формируется только при наличии сведений о наименовании юридического лица, от имени которого действует заявитель
        /// </summary>
        public EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ СвЮЛ { get; set; }
        /// <summary>
        /// Сведения об управляющей компании
        /// </summary>
        /// <summary>
        /// Формируется, если заявитель выступает от управляющей организации ЮЛ и в ЕГРЮЛ внесены сведения о ее наименовании
        /// </summary>
        public EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг СвУпрОрг { get; set; }
        /// <summary>
        /// Сведения о ФЛ - заявителе
        /// </summary>
        public EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ СвФЛ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ВидЗаяв should be serialized
        /// </summary>
        public virtual bool ShouldSerializeВидЗаяв()
        {
            return (ВидЗаяв != null);
        }

        /// <summary>
        /// Test whether СвЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвЮЛ()
        {
            return (СвЮЛ != null);
        }

        /// <summary>
        /// Test whether СвУпрОрг should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвУпрОрг()
        {
            return (СвУпрОрг != null);
        }

        /// <summary>
        /// Test whether СвФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвФЛ()
        {
            return (СвФЛ != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Заявитель
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Код по справочнику СЗОЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСЗОЮЛ { get; set; }
        /// <summary>
        /// Наименование по справочнику СЗОЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСЗОЮЛ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether КодСЗОЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодСЗОЮЛ()
        {
            return !string.IsNullOrEmpty(КодСЗОЮЛ);
        }

        /// <summary>
        /// Test whether НаимСЗОЮЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимСЗОЮЛ()
        {
            return !string.IsNullOrEmpty(НаимСЗОЮЛ);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о юридическом лице, от имени которого действует заявитель
    /// </summary>
    /// <summary>
    /// Формируется только при наличии сведений о наименовании юридического лица, от имени которого действует заявитель
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }
        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }
        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ОГРН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОГРН()
        {
            return !string.IsNullOrEmpty(ОГРН);
        }

        /// <summary>
        /// Test whether ИНН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИНН()
        {
            return !string.IsNullOrEmpty(ИНН);
        }

        /// <summary>
        /// Test whether НаимЮЛПолн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимЮЛПолн()
        {
            return !string.IsNullOrEmpty(НаимЮЛПолн);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об управляющей компании
    /// </summary>
    /// <summary>
    /// Формируется, если заявитель выступает от управляющей организации ЮЛ и в ЕГРЮЛ внесены сведения о ее наименовании
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }
        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }
        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ОГРН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОГРН()
        {
            return !string.IsNullOrEmpty(ОГРН);
        }

        /// <summary>
        /// Test whether ИНН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИНН()
        {
            return !string.IsNullOrEmpty(ИНН);
        }

        /// <summary>
        /// Test whether НаимЮЛПолн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимЮЛПолн()
        {
            return !string.IsNullOrEmpty(НаимЮЛПолн);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о ФЛ - заявителе
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Сведения о ФИО и (при наличии) ИНН ФЛ
        /// </summary>
        public EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН СвФИОИНН { get; set; }
        /// <summary>
        /// Сведения о рождении
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд СвРожд { get; set; }
        /// <summary>
        /// Сведения о документе, удостоверяющем личность
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ УдЛичнФЛ { get; set; }
        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ АдресМЖРФ { get; set; }
        /// <summary>
        /// Сведения об адресе места жительства за пределами Российской Федерации
        /// </summary>
        /// <summary>
        /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
        /// </summary>
        public EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн АдрМЖИн { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether СвФИОИНН should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвФИОИНН()
        {
            return (СвФИОИНН != null);
        }

        /// <summary>
        /// Test whether СвРожд should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСвРожд()
        {
            return (СвРожд != null);
        }

        /// <summary>
        /// Test whether УдЛичнФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeУдЛичнФЛ()
        {
            return (УдЛичнФЛ != null);
        }

        /// <summary>
        /// Test whether АдресМЖРФ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдресМЖРФ()
        {
            return (АдресМЖРФ != null);
        }

        /// <summary>
        /// Test whether АдрМЖИн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдрМЖИн()
        {
            return (АдрМЖИн != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о ФИО и (при наличии) ИНН ФЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Фамилия
        /// </summary>
        /// <summary>
        /// Является обязательным при отсутствии имени ФЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Фамилия { get; set; }
        /// <summary>
        /// Имя
        /// </summary>
        /// <summary>
        /// Является обязательным при отсутствии фамилии ФЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Имя { get; set; }
        /// <summary>
        /// Отчество
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Отчество { get; set; }
        /// <summary>
        /// ИНН ФЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИННФЛ { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether Фамилия should be serialized
        /// </summary>
        public virtual bool ShouldSerializeФамилия()
        {
            return !string.IsNullOrEmpty(Фамилия);
        }

        /// <summary>
        /// Test whether Имя should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИмя()
        {
            return !string.IsNullOrEmpty(Имя);
        }

        /// <summary>
        /// Test whether Отчество should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОтчество()
        {
            return !string.IsNullOrEmpty(Отчество);
        }

        /// <summary>
        /// Test whether ИННФЛ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИННФЛ()
        {
            return !string.IsNullOrEmpty(ИННФЛ);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о рождении
    /// </summary>
    /// <summary>
    /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд
    {

        private bool _shouldSerializeПрДатаРожд;

        private bool _shouldSerializeДатаРожд;

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Дата рождения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРожд { get; set; }
        /// <summary>
        /// Место рождения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string МестоРожд { get; set; }
        /// <summary>
        /// Признак полноты представляемой даты рождения физического лица
        /// </summary>
        /// <summary>
        /// , где: 1 – только год (сведения о месяце и дне в указанном месяце отсутствуют); 2 – только месяц и год (сведения о дне в указанном месяце отсутствуют); 3 – полная дата. Отсутствие указанного реквизита означает полную дату рождения (соответствует значению ПрДатаРожд=3)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРождПрДатаРожд ПрДатаРожд { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ПрДатаРождSpecified { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаРожд should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаРожд()
        {
            if (_shouldSerializeДатаРожд)
            {
                return true;
            }
            return (ДатаРожд != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ПрДатаРожд should be serialized
        /// </summary>
        public virtual bool ShouldSerializeПрДатаРожд()
        {
            if (_shouldSerializeПрДатаРожд)
            {
                return true;
            }
            return (ПрДатаРожд != default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРождПрДатаРожд));
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether МестоРожд should be serialized
        /// </summary>
        public virtual bool ShouldSerializeМестоРожд()
        {
            return !string.IsNullOrEmpty(МестоРожд);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРождПрДатаРожд
    {

        [System.Xml.Serialization.XmlEnumAttribute("0")]
        None,

        [System.Xml.Serialization.XmlEnumAttribute("1")]
        OnlyYear,

        [System.Xml.Serialization.XmlEnumAttribute("2")]
        MonthAndYear,

        [System.Xml.Serialization.XmlEnumAttribute("3")]
        FullDate
    }

    /// <summary>
    /// Сведения о документе, удостоверяющем личность
    /// </summary>
    /// <summary>
    /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ
    {

        private bool _shouldSerializeДатаДок;

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Код вида документа по справочнику СПДУЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодВидДок { get; set; }
        /// <summary>
        /// Наименование вида документа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимДок { get; set; }
        /// <summary>
        /// Серия и номер документа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string СерНомДок { get; set; }
        /// <summary>
        /// Дата выдачи
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаДок { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаДокSpecified { get; set; }
        /// <summary>
        /// Кем выдан
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВыдДок { get; set; }
        /// <summary>
        /// Код подразделения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодВыдДок { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаДок should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаДок()
        {
            if (_shouldSerializeДатаДок)
            {
                return true;
            }
            return (ДатаДок != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether КодВидДок should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодВидДок()
        {
            return !string.IsNullOrEmpty(КодВидДок);
        }

        /// <summary>
        /// Test whether НаимДок should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимДок()
        {
            return !string.IsNullOrEmpty(НаимДок);
        }

        /// <summary>
        /// Test whether СерНомДок should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСерНомДок()
        {
            return !string.IsNullOrEmpty(СерНомДок);
        }

        /// <summary>
        /// Test whether ВыдДок should be serialized
        /// </summary>
        public virtual bool ShouldSerializeВыдДок()
        {
            return !string.IsNullOrEmpty(ВыдДок);
        }

        /// <summary>
        /// Test whether КодВыдДок should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодВыдДок()
        {
            return !string.IsNullOrEmpty(КодВыдДок);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения об адресе места жительства в Российской Федерации
    /// </summary>
    /// <summary>
    /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ГРНДата", typeof(ГРНДатаТип))]
        [System.Xml.Serialization.XmlElementAttribute("ГРНДатаИспр", typeof(ГРНДатаТип))]
        [System.Xml.Serialization.XmlElementAttribute("Город", typeof(ГородТип))]
        [System.Xml.Serialization.XmlElementAttribute("НаселПункт", typeof(НаселПунктТип))]
        [System.Xml.Serialization.XmlElementAttribute("Район", typeof(РайонТип))]
        [System.Xml.Serialization.XmlElementAttribute("Регион", typeof(РегионТип))]
        [System.Xml.Serialization.XmlElementAttribute("Улица", typeof(УлицаТип))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType4[] ItemsElementName { get; set; }
        /// <summary>
        /// Индекс
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Индекс { get; set; }
        /// <summary>
        /// Код субъекта Российской Федерации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодРегион { get; set; }
        /// <summary>
        /// Код адреса по КЛАДР
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодАдрКладр { get; set; }
        /// <summary>
        /// Дом (владение и т.п.)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дом { get; set; }
        /// <summary>
        /// Корпус (строение и т.п.)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Корпус { get; set; }
        /// <summary>
        /// Квартира (офис и т.п.)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Кварт { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Индекс should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИндекс()
        {
            return !string.IsNullOrEmpty(Индекс);
        }

        /// <summary>
        /// Test whether КодРегион should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодРегион()
        {
            return !string.IsNullOrEmpty(КодРегион);
        }

        /// <summary>
        /// Test whether КодАдрКладр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКодАдрКладр()
        {
            return !string.IsNullOrEmpty(КодАдрКладр);
        }

        /// <summary>
        /// Test whether Дом should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДом()
        {
            return !string.IsNullOrEmpty(Дом);
        }

        /// <summary>
        /// Test whether Корпус should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКорпус()
        {
            return !string.IsNullOrEmpty(Корпус);
        }

        /// <summary>
        /// Test whether Кварт should be serialized
        /// </summary>
        public virtual bool ShouldSerializeКварт()
        {
            return !string.IsNullOrEmpty(Кварт);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema = false)]
    public enum ItemsChoiceType4
    {

        /// <remarks/>
        ГРНДата,

        /// <remarks/>
        ГРНДатаИспр,

        /// <remarks/>
        Город,

        /// <remarks/>
        НаселПункт,

        /// <remarks/>
        Район,

        /// <remarks/>
        Регион,

        /// <remarks/>
        Улица,
    }

    /// <summary>
    /// Сведения об адресе места жительства за пределами Российской Федерации
    /// </summary>
    /// <summary>
    /// Ограниченный доступ. Выгружаются только органам, которым по действующему законодательству предоставляются указанные сведения
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        /// <summary>
        /// Отсутствует, если в указанных сведениях не исправлялись технические ошибки
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр { get; set; }
        /// <summary>
        /// Код страны
        /// </summary>
        /// <summary>
        /// Принимает значение в соответствии с Общероссийским классификатором стран мира (ОКСМ)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОКСМ { get; set; }
        /// <summary>
        /// Наименование страны
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСтран { get; set; }
        /// <summary>
        /// Адрес
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string АдрИн { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return (ГРНДатаИспр != null);
        }

        /// <summary>
        /// Test whether ОКСМ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОКСМ()
        {
            return !string.IsNullOrEmpty(ОКСМ);
        }

        /// <summary>
        /// Test whether НаимСтран should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимСтран()
        {
            return !string.IsNullOrEmpty(НаимСтран);
        }

        /// <summary>
        /// Test whether АдрИн should be serialized
        /// </summary>
        public virtual bool ShouldSerializeАдрИн()
        {
            return !string.IsNullOrEmpty(АдрИн);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о свидетельстве, подтверждающем факт внесения записи в ЕГРЮЛ
    /// </summary>
    /// <summary>
    /// Формируется в отношении выданных свидетельств (включая свидетельства, выданные повторно), а также свидетельств, признанных недействительными по решению суда
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвЗапЕГРЮЛСвСвид
    {

        private bool _shouldSerializeДатаВыдСвид;

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей сведения о признании свидетельства недействительным по решению суда
        /// </summary>
        public ГРНДатаТип ГРНДатаСвидНед { get; set; }
        /// <summary>
        /// Серия бланка свидетельства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Серия { get; set; }
        /// <summary>
        /// Номер бланка свидетельства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер { get; set; }
        /// <summary>
        /// Дата выдачи свидетельства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаВыдСвид { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвЗапЕГРЮЛСвСвид));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаВыдСвид should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаВыдСвид()
        {
            if (_shouldSerializeДатаВыдСвид)
            {
                return true;
            }
            return (ДатаВыдСвид != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ГРНДатаСвидНед should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаСвидНед()
        {
            return (ГРНДатаСвидНед != null);
        }

        /// <summary>
        /// Test whether Серия should be serialized
        /// </summary>
        public virtual bool ShouldSerializeСерия()
        {
            return !string.IsNullOrEmpty(Серия);
        }

        /// <summary>
        /// Test whether Номер should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНомер()
        {
            return !string.IsNullOrEmpty(Номер);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвСвид object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвЗапЕГРЮЛСвСвид object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвСвид object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвСвид obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвСвид);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвСвид obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвСвид Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвЗапЕГРЮЛСвСвид)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвСвид Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвЗапЕГРЮЛСвСвид)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвСвид object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвЗапЕГРЮЛСвСвид object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвСвид object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвСвид obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвСвид);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвСвид obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвСвид LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о статусе записи
    /// </summary>
    /// <summary>
    /// Формируется только в случае, если в данную запись были внесены исправления (корректировки) другой записью или данная запись признана недействительной (ошибочной) другой записью
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения записи, которой запись признана недействительной
        /// </summary>
        /// <summary>
        /// Отсутствует, если данная запись не была признана недействительной (ошибочной) другой записью
        /// </summary>
        public ИдГРНДатаТип ГРНДатаНед { get; set; }
        /// <summary>
        /// ГРН и дата записи, которой внесены исправления в связи с технической ошибкой
        /// </summary>
        /// <summary>
        /// Отсутствует, если в сведениях, внесенных в ЕГРИП по данной записи, не исправлялись технические ошибки
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ГРНДатаИспр")]
        public List<ИдГРНДатаТип> ГРНДатаИспр { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ГРНДатаИспр should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаИспр()
        {
            return ГРНДатаИспр != null && ГРНДатаИспр.Count > 0;
        }

        /// <summary>
        /// Test whether ГРНДатаНед should be serialized
        /// </summary>
        public virtual bool ShouldSerializeГРНДатаНед()
        {
            return (ГРНДатаНед != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСвСтатусЗап LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    /// <summary>
    /// Сведения о документах, представленных при внесении записи в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class EGRULСвЮЛСвЗапЕГРЮЛСведПредДок
    {

        private bool _shouldSerializeДатаДок;

        private static XmlSerializer serializer;

        /// <summary>
        /// Наименование документа
        /// </summary>
        /// <summary>
        /// При отсутствии наименования документа указывается наименование вида документа по справочнику СВДРЕГ
        /// </summary>
        public string НаимДок { get; set; }
        /// <summary>
        /// Номер документа
        /// </summary>
        public string НомДок { get; set; }
        /// <summary>
        /// Дата документа
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime ДатаДок { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаДокSpecified { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EGRULСвЮЛСвЗапЕГРЮЛСведПредДок));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ДатаДок should be serialized
        /// </summary>
        public virtual bool ShouldSerializeДатаДок()
        {
            if (_shouldSerializeДатаДок)
            {
                return true;
            }
            return (ДатаДок != default(System.DateTime));
        }

        /// <summary>
        /// Test whether НаимДок should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНаимДок()
        {
            return !string.IsNullOrEmpty(НаимДок);
        }

        /// <summary>
        /// Test whether НомДок should be serialized
        /// </summary>
        public virtual bool ShouldSerializeНомДок()
        {
            return !string.IsNullOrEmpty(НомДок);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСведПредДок object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an EGRULСвЮЛСвЗапЕГРЮЛСведПредДок object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСведПредДок object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСведПредДок obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСведПредДок);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EGRULСвЮЛСвЗапЕГРЮЛСведПредДок obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСведПредДок Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EGRULСвЮЛСвЗапЕГРЮЛСведПредДок)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСведПредДок Deserialize(System.IO.Stream s)
        {
            return ((EGRULСвЮЛСвЗапЕГРЮЛСведПредДок)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EGRULСвЮЛСвЗапЕГРЮЛСведПредДок object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EGRULСвЮЛСвЗапЕГРЮЛСведПредДок object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EGRULСвЮЛСвЗапЕГРЮЛСведПредДок object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСведПредДок obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EGRULСвЮЛСвЗапЕГРЮЛСведПредДок);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EGRULСвЮЛСвЗапЕГРЮЛСведПредДок obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EGRULСвЮЛСвЗапЕГРЮЛСведПредДок LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema = false)]
    public enum ItemsChoiceType5
    {

        /// <remarks/>
        ВидЗап,

        /// <remarks/>
        ГРНДатаИспрПред,

        /// <remarks/>
        ГРНДатаНедПред,

        /// <remarks/>
        СвЗаявФЛ,

        /// <remarks/>
        СвРегОрг,

        /// <remarks/>
        СвСвид,

        /// <remarks/>
        СвСтатусЗап,

        /// <remarks/>
        СведПредДок,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum EGRULСвЮЛСпрОПФ
    {

        ОКОПФ,

        КОПФ,
    }

    /// <summary>
    /// Фамилия, имя, отчество
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1590.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ФИОТип
    {

        private static XmlSerializer serializer;

        /// <summary>
        /// Фамилия
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Фамилия { get; set; }
        /// <summary>
        /// Имя
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Имя { get; set; }
        /// <summary>
        /// Отчество
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Отчество { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ФИОТип));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Фамилия should be serialized
        /// </summary>
        public virtual bool ShouldSerializeФамилия()
        {
            return !string.IsNullOrEmpty(Фамилия);
        }

        /// <summary>
        /// Test whether Имя should be serialized
        /// </summary>
        public virtual bool ShouldSerializeИмя()
        {
            return !string.IsNullOrEmpty(Имя);
        }

        /// <summary>
        /// Test whether Отчество should be serialized
        /// </summary>
        public virtual bool ShouldSerializeОтчество()
        {
            return !string.IsNullOrEmpty(Отчество);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФИОТип object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ФИОТип object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФИОТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ФИОТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФИОТип);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ФИОТип obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ФИОТип Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ФИОТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ФИОТип Deserialize(System.IO.Stream s)
        {
            return ((ФИОТип)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ФИОТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФИОТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФИОТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФИОТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФИОТип);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФИОТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФИОТип LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
