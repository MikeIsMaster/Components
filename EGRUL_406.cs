// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.1.854 Microsoft Reciprocal License (Ms-RL) 
//    <NameSpace>WorkWith_XSD</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>True</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>True</EnableEncoding><AutomaticProperties>True</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>Default</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace ActualXmlElasticsearch.Structures.EGRUL_406
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;
    using Newtonsoft.Json;


    /// <summary>
    /// Сведения, содержащиеся в Едином государственном реестре юридических лиц
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class Файл
    {

        private ФайлИдОтпр идОтпрField;

        private List<ФайлДокумент> документField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Идентификатор файла
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИдФайл { get; set; }

        /// <summary>
        /// Версия формата
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлВерсФорм ВерсФорм { get; set; }

        /// <summary>
        /// Тип информации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлТипИнф ТипИнф { get; set; }

        /// <summary>
        /// Версия передающей программы
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВерсПрог { get; set; }

        /// <summary>
        /// Количество документов
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string КолДок { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Structures.search search { get; set; }

        /// <summary>
        /// Сведения об отправителе
        /// </summary>
        public ФайлИдОтпр ИдОтпр
        {
            get
            {
                if ((this.идОтпрField == null))
                {
                    this.идОтпрField = new ФайлИдОтпр();
                }
                return this.идОтпрField;
            }
            set
            {
                this.идОтпрField = value;
            }
        }

        /// <summary>
        /// Состав и структура документа
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Документ")]
        public List<ФайлДокумент> Документ
        {
            get
            {
                if ((this.документField == null))
                {
                    this.документField = new List<ФайлДокумент>();
                }
                return this.документField;
            }
            set
            {
                this.документField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Файл));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Файл object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an Файл object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Файл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Файл obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Файл);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Файл obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Файл Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Файл)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Файл object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Файл object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Файл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Файл obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Файл);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Файл obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Файл obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Файл LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static Файл LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об отправителе
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлИдОтпр
    {

        private ФИОТип фИООтвField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Должность ответственного лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДолжОтв { get; set; }

        /// <summary>
        /// Номер контактного телефона
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Тлф { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("E-mail")]
        public string Email { get; set; }


        /// <summary>
        /// Фамилия, имя, отчество ответственного лица
        /// </summary>
        public ФИОТип ФИООтв
        {
            get
            {
                if ((this.фИООтвField == null))
                {
                    this.фИООтвField = new ФИОТип();
                }
                return this.фИООтвField;
            }
            set
            {
                this.фИООтвField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлИдОтпр));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлИдОтпр object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлИдОтпр object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлИдОтпр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлИдОтпр obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлИдОтпр);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлИдОтпр obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлИдОтпр Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлИдОтпр)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлИдОтпр object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлИдОтпр object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлИдОтпр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлИдОтпр obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлИдОтпр);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлИдОтпр obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлИдОтпр obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлИдОтпр LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлИдОтпр LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ФИОТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Фамилия { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Имя { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Отчество { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФИОТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФИОТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФИОТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФИОТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФИОТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФИОТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФИОТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФИОТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФИОТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФИОТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФИОТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФИОТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФИОТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФИОТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФИОТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФИОТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФИОТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФИОТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ИдГРНДатаТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string ИдЗап { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ГРН { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаЗап { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ИдГРНДатаТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ИдГРНДатаТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ИдГРНДатаТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ИдГРНДатаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ИдГРНДатаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ИдГРНДатаТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ИдГРНДатаТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ИдГРНДатаТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ИдГРНДатаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ИдГРНДатаТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ИдГРНДатаТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ИдГРНДатаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ИдГРНДатаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ИдГРНДатаТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ИдГРНДатаТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ИдГРНДатаТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ИдГРНДатаТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ИдГРНДатаТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ВидЗапТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСПВЗ { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимВидЗап { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ВидЗапТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ВидЗапТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ВидЗапТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ВидЗапТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ВидЗапТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ВидЗапТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ВидЗапТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ВидЗапТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ВидЗапТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ВидЗапТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ВидЗапТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ВидЗапТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ВидЗапТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ВидЗапТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ВидЗапТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ВидЗапТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ВидЗапТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ВидЗапТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвУчетНОПодраздТип
    {

        private СвНОТип свНОField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаПостУч { get; set; }


        public СвНОТип СвНО
        {
            get
            {
                if ((this.свНОField == null))
                {
                    this.свНОField = new СвНОТип();
                }
                return this.свНОField;
            }
            set
            {
                this.свНОField = value;
            }
        }

        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвУчетНОПодраздТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвУчетНОПодраздТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвУчетНОПодраздТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвУчетНОПодраздТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвУчетНОПодраздТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвУчетНОПодраздТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвУчетНОПодраздТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвУчетНОПодраздТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвУчетНОПодраздТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвУчетНОПодраздТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвУчетНОПодраздТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвУчетНОПодраздТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвУчетНОПодраздТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвУчетНОПодраздТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвУчетНОПодраздТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвУчетНОПодраздТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвУчетНОПодраздТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвУчетНОПодраздТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвНОТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодНО { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимНО { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвНОТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвНОТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвНОТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвНОТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвНОТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНОТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвНОТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвНОТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвНОТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвНОТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвНОТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвНОТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвНОТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНОТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвНОТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвНОТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвНОТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвНОТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ГРНДатаТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ГРН { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаЗаписи { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ГРНДатаТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ГРНДатаТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ГРНДатаТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ГРНДатаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ГРНДатаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ГРНДатаТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ГРНДатаТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ГРНДатаТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ГРНДатаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ГРНДатаТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ГРНДатаТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ГРНДатаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ГРНДатаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ГРНДатаТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ГРНДатаТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ГРНДатаТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ГРНДатаТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ГРНДатаТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвОКВЭДТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодОКВЭД { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимОКВЭД { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СвОКВЭДТипПрВерсОКВЭД ПрВерсОКВЭД { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ПрВерсОКВЭДSpecified { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвОКВЭДТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвОКВЭДТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвОКВЭДТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвОКВЭДТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвОКВЭДТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОКВЭДТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвОКВЭДТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвОКВЭДТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвОКВЭДТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвОКВЭДТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвОКВЭДТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвОКВЭДТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвОКВЭДТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОКВЭДТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвОКВЭДТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвОКВЭДТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвОКВЭДТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвОКВЭДТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum СвОКВЭДТипПрВерсОКВЭД
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2001")]
        Item2001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2014")]
        Item2014,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвУправЗалТип
    {

        private ГРНДатаТип гРНДатаПервField;

        private СвНотУдДогЗалТип свНотУдДогЗалField;

        private СвНотУдДогЗалТип свДогУправЗалField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("СвУпрЗалФЛ", typeof(СвУправЗалТипСвУпрЗалФЛ))]
        [System.Xml.Serialization.XmlElementAttribute("СвУпрЗалЮЛ", typeof(СвУправЗалТипСвУпрЗалЮЛ))]
        public object Item { get; set; }


        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        public СвНотУдДогЗалТип СвНотУдДогЗал
        {
            get
            {
                if ((this.свНотУдДогЗалField == null))
                {
                    this.свНотУдДогЗалField = new СвНотУдДогЗалТип();
                }
                return this.свНотУдДогЗалField;
            }
            set
            {
                this.свНотУдДогЗалField = value;
            }
        }

        public СвНотУдДогЗалТип СвДогУправЗал
        {
            get
            {
                if ((this.свДогУправЗалField == null))
                {
                    this.свДогУправЗалField = new СвНотУдДогЗалТип();
                }
                return this.свДогУправЗалField;
            }
            set
            {
                this.свДогУправЗалField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвУправЗалТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвУправЗалТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвУправЗалТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвУправЗалТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвУправЗалТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвУправЗалТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвУправЗалТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвУправЗалТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвУправЗалТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвУправЗалТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвУправЗалТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвУправЗалТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвУправЗалТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвУправЗалТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвУправЗалТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвУправЗалТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвУправЗалТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвУправЗалТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвНотУдДогЗалТип
    {

        private СвФЛЕГРЮЛТип свНотариусField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime Дата { get; set; }


        public СвФЛЕГРЮЛТип СвНотариус
        {
            get
            {
                if ((this.свНотариусField == null))
                {
                    this.свНотариусField = new СвФЛЕГРЮЛТип();
                }
                return this.свНотариусField;
            }
            set
            {
                this.свНотариусField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвНотУдДогЗалТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвНотУдДогЗалТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвНотУдДогЗалТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвНотУдДогЗалТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвНотУдДогЗалТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНотУдДогЗалТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвНотУдДогЗалТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвНотУдДогЗалТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвНотУдДогЗалТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвНотУдДогЗалТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвНотУдДогЗалТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвНотУдДогЗалТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвНотУдДогЗалТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНотУдДогЗалТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвНотУдДогЗалТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвНотУдДогЗалТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвНотУдДогЗалТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвНотУдДогЗалТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвФЛЕГРЮЛТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Фамилия { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Имя { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Отчество { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИННФЛ { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвФЛЕГРЮЛТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвФЛЕГРЮЛТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвФЛЕГРЮЛТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвФЛЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвФЛЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвФЛЕГРЮЛТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвФЛЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвФЛЕГРЮЛТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвФЛЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвФЛЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвФЛЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвФЛЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвФЛЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвФЛЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвФЛЕГРЮЛТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвФЛЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвФЛЕГРЮЛТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвФЛЕГРЮЛТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class СвУправЗалТипСвУпрЗалФЛ
    {

        private СвФЛЕГРЮЛТип свФЛField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРНИП { get; set; }


        public СвФЛЕГРЮЛТип СвФЛ
        {
            get
            {
                if ((this.свФЛField == null))
                {
                    this.свФЛField = new СвФЛЕГРЮЛТип();
                }
                return this.свФЛField;
            }
            set
            {
                this.свФЛField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвУправЗалТипСвУпрЗалФЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвУправЗалТипСвУпрЗалФЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвУправЗалТипСвУпрЗалФЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвУправЗалТипСвУпрЗалФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвУправЗалТипСвУпрЗалФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвУправЗалТипСвУпрЗалФЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвУправЗалТипСвУпрЗалФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвУправЗалТипСвУпрЗалФЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвУправЗалТипСвУпрЗалФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвУправЗалТипСвУпрЗалФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвУправЗалТипСвУпрЗалФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвУправЗалТипСвУпрЗалФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвУправЗалТипСвУпрЗалФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвУправЗалТипСвУпрЗалФЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвУправЗалТипСвУпрЗалФЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвУправЗалТипСвУпрЗалФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвУправЗалТипСвУпрЗалФЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвУправЗалТипСвУпрЗалФЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class СвУправЗалТипСвУпрЗалЮЛ
    {

        private СвЮЛЕГРЮЛТип наимИННЮЛField;

        private СвНаимПолнТип свНаимЮЛПолнИнField;

        private СвРегИнЮЛЕГРЮЛТип свРегИнField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public СвЮЛЕГРЮЛТип НаимИННЮЛ
        {
            get
            {
                if ((this.наимИННЮЛField == null))
                {
                    this.наимИННЮЛField = new СвЮЛЕГРЮЛТип();
                }
                return this.наимИННЮЛField;
            }
            set
            {
                this.наимИННЮЛField = value;
            }
        }

        public СвНаимПолнТип СвНаимЮЛПолнИн
        {
            get
            {
                if ((this.свНаимЮЛПолнИнField == null))
                {
                    this.свНаимЮЛПолнИнField = new СвНаимПолнТип();
                }
                return this.свНаимЮЛПолнИнField;
            }
            set
            {
                this.свНаимЮЛПолнИнField = value;
            }
        }

        public СвРегИнЮЛЕГРЮЛТип СвРегИн
        {
            get
            {
                if ((this.свРегИнField == null))
                {
                    this.свРегИнField = new СвРегИнЮЛЕГРЮЛТип();
                }
                return this.свРегИнField;
            }
            set
            {
                this.свРегИнField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвУправЗалТипСвУпрЗалЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвУправЗалТипСвУпрЗалЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвУправЗалТипСвУпрЗалЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвУправЗалТипСвУпрЗалЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвУправЗалТипСвУпрЗалЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвУправЗалТипСвУпрЗалЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвУправЗалТипСвУпрЗалЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвУправЗалТипСвУпрЗалЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвУправЗалТипСвУпрЗалЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвУправЗалТипСвУпрЗалЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвУправЗалТипСвУпрЗалЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвУправЗалТипСвУпрЗалЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвУправЗалТипСвУпрЗалЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвУправЗалТипСвУпрЗалЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвУправЗалТипСвУпрЗалЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвУправЗалТипСвУпрЗалЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвУправЗалТипСвУпрЗалЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвУправЗалТипСвУпрЗалЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвЮЛЕГРЮЛТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвЮЛЕГРЮЛТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвЮЛЕГРЮЛТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвЮЛЕГРЮЛТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвЮЛЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвЮЛЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвЮЛЕГРЮЛТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвЮЛЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвЮЛЕГРЮЛТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвЮЛЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвЮЛЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвЮЛЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвЮЛЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвЮЛЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвЮЛЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвЮЛЕГРЮЛТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвЮЛЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвЮЛЕГРЮЛТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвЮЛЕГРЮЛТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвНаимПолнТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимПолн { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвНаимПолнТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвНаимПолнТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвНаимПолнТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвНаимПолнТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвНаимПолнТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНаимПолнТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвНаимПолнТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвНаимПолнТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвНаимПолнТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвНаимПолнТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвНаимПолнТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвНаимПолнТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвНаимПолнТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНаимПолнТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвНаимПолнТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвНаимПолнТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвНаимПолнТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвНаимПолнТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвРегИнЮЛЕГРЮЛТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОКСМ { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСтран { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРег { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаРегSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string РегНомер { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимРегОрг { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодНПСтрРег { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string АдрСтр { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвРегИнЮЛЕГРЮЛТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвРегИнЮЛЕГРЮЛТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвРегИнЮЛЕГРЮЛТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвРегИнЮЛЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвРегИнЮЛЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвРегИнЮЛЕГРЮЛТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвРегИнЮЛЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвРегИнЮЛЕГРЮЛТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвРегИнЮЛЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвРегИнЮЛЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвРегИнЮЛЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвРегИнЮЛЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвРегИнЮЛЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвРегИнЮЛЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвРегИнЮЛЕГРЮЛТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвРегИнЮЛЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвРегИнЮЛЕГРЮЛТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвРегИнЮЛЕГРЮЛТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвОбремТип
    {

        private РешСудТип решСудField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("СвЗалогДержФЛ", typeof(СвОбремТипСвЗалогДержФЛ))]
        [System.Xml.Serialization.XmlElementAttribute("СвЗалогДержЮЛ", typeof(СвОбремТипСвЗалогДержЮЛ))]
        public object Item { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СвОбремТипВидОбрем ВидОбрем { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string СрокОбременения { get; set; }


        public РешСудТип РешСуд
        {
            get
            {
                if ((this.решСудField == null))
                {
                    this.решСудField = new РешСудТип();
                }
                return this.решСудField;
            }
            set
            {
                this.решСудField = value;
            }
        }

        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвОбремТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвОбремТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвОбремТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвОбремТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвОбремТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОбремТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвОбремТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвОбремТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвОбремТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвОбремТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвОбремТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвОбремТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвОбремТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОбремТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвОбремТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвОбремТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвОбремТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвОбремТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class РешСудТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСуда { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime Дата { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(РешСудТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current РешСудТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an РешСудТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output РешСудТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out РешСудТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(РешСудТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out РешСудТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static РешСудТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((РешСудТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current РешСудТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an РешСудТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output РешСудТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out РешСудТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(РешСудТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out РешСудТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out РешСудТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static РешСудТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static РешСудТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class СвОбремТипСвЗалогДержФЛ
    {

        private ГРНДатаТип гРНДатаПервField;

        private СвФЛЕГРЮЛТип свФЛField;

        private СвПолФЛТип свПолФЛField;

        private СвРождЕГРЮЛТип свРождФЛField;

        private СвГраждТип свГраждФЛField;

        private УдЛичнЕГРЮЛТип удЛичнФЛField;

        private АдрРФЕГРЮЛТип адресМЖРФField;

        private АдрИнЕГРЮЛТип адрМЖИнField;

        private СвНотУдДогЗалТип свНотУдДогЗалField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        public СвФЛЕГРЮЛТип СвФЛ
        {
            get
            {
                if ((this.свФЛField == null))
                {
                    this.свФЛField = new СвФЛЕГРЮЛТип();
                }
                return this.свФЛField;
            }
            set
            {
                this.свФЛField = value;
            }
        }

        public СвПолФЛТип СвПолФЛ
        {
            get
            {
                if ((this.свПолФЛField == null))
                {
                    this.свПолФЛField = new СвПолФЛТип();
                }
                return this.свПолФЛField;
            }
            set
            {
                this.свПолФЛField = value;
            }
        }

        public СвРождЕГРЮЛТип СвРождФЛ
        {
            get
            {
                if ((this.свРождФЛField == null))
                {
                    this.свРождФЛField = new СвРождЕГРЮЛТип();
                }
                return this.свРождФЛField;
            }
            set
            {
                this.свРождФЛField = value;
            }
        }

        public СвГраждТип СвГраждФЛ
        {
            get
            {
                if ((this.свГраждФЛField == null))
                {
                    this.свГраждФЛField = new СвГраждТип();
                }
                return this.свГраждФЛField;
            }
            set
            {
                this.свГраждФЛField = value;
            }
        }

        public УдЛичнЕГРЮЛТип УдЛичнФЛ
        {
            get
            {
                if ((this.удЛичнФЛField == null))
                {
                    this.удЛичнФЛField = new УдЛичнЕГРЮЛТип();
                }
                return this.удЛичнФЛField;
            }
            set
            {
                this.удЛичнФЛField = value;
            }
        }

        public АдрРФЕГРЮЛТип АдресМЖРФ
        {
            get
            {
                if ((this.адресМЖРФField == null))
                {
                    this.адресМЖРФField = new АдрРФЕГРЮЛТип();
                }
                return this.адресМЖРФField;
            }
            set
            {
                this.адресМЖРФField = value;
            }
        }

        public АдрИнЕГРЮЛТип АдрМЖИн
        {
            get
            {
                if ((this.адрМЖИнField == null))
                {
                    this.адрМЖИнField = new АдрИнЕГРЮЛТип();
                }
                return this.адрМЖИнField;
            }
            set
            {
                this.адрМЖИнField = value;
            }
        }

        public СвНотУдДогЗалТип СвНотУдДогЗал
        {
            get
            {
                if ((this.свНотУдДогЗалField == null))
                {
                    this.свНотУдДогЗалField = new СвНотУдДогЗалТип();
                }
                return this.свНотУдДогЗалField;
            }
            set
            {
                this.свНотУдДогЗалField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвОбремТипСвЗалогДержФЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвОбремТипСвЗалогДержФЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвОбремТипСвЗалогДержФЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвОбремТипСвЗалогДержФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвОбремТипСвЗалогДержФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОбремТипСвЗалогДержФЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвОбремТипСвЗалогДержФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвОбремТипСвЗалогДержФЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвОбремТипСвЗалогДержФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвОбремТипСвЗалогДержФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвОбремТипСвЗалогДержФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвОбремТипСвЗалогДержФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвОбремТипСвЗалогДержФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОбремТипСвЗалогДержФЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвОбремТипСвЗалогДержФЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвОбремТипСвЗалогДержФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвОбремТипСвЗалогДержФЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвОбремТипСвЗалогДержФЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвПолФЛТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СвПолФЛТипПол Пол { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвПолФЛТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвПолФЛТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвПолФЛТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвПолФЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвПолФЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвПолФЛТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвПолФЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвПолФЛТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвПолФЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвПолФЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвПолФЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвПолФЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвПолФЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвПолФЛТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвПолФЛТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвПолФЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвПолФЛТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвПолФЛТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum СвПолФЛТипПол
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвРождЕГРЮЛТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРожд { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string МестоРожд { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СвРождЕГРЮЛТипПрДатаРожд ПрДатаРожд { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ПрДатаРождSpecified { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвРождЕГРЮЛТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвРождЕГРЮЛТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвРождЕГРЮЛТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвРождЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвРождЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвРождЕГРЮЛТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвРождЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвРождЕГРЮЛТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвРождЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвРождЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвРождЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвРождЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвРождЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвРождЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвРождЕГРЮЛТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвРождЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвРождЕГРЮЛТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвРождЕГРЮЛТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum СвРождЕГРЮЛТипПрДатаРожд
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвГраждТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СвГраждТипКодГражд КодГражд { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОКСМ { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСтран { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвГраждТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвГраждТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвГраждТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвГраждТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвГраждТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвГраждТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвГраждТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвГраждТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвГраждТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвГраждТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвГраждТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвГраждТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвГраждТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвГраждТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвГраждТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвГраждТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвГраждТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвГраждТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum СвГраждТипКодГражд
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class УдЛичнЕГРЮЛТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодВидДок { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимДок { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string СерНомДок { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаДок { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаДокSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВыдДок { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодВыдДок { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(УдЛичнЕГРЮЛТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current УдЛичнЕГРЮЛТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an УдЛичнЕГРЮЛТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output УдЛичнЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out УдЛичнЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(УдЛичнЕГРЮЛТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out УдЛичнЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static УдЛичнЕГРЮЛТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((УдЛичнЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current УдЛичнЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an УдЛичнЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output УдЛичнЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out УдЛичнЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(УдЛичнЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out УдЛичнЕГРЮЛТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out УдЛичнЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static УдЛичнЕГРЮЛТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static УдЛичнЕГРЮЛТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class АдрРФЕГРЮЛТип
    {

        private РегионТип регионField;

        private РайонТип районField;

        private ГородТип городField;

        private НаселПунктТип населПунктField;

        private УлицаТип улицаField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Индекс { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодРегион { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодАдрКладр { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дом { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Корпус { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Кварт { get; set; }


        public РегионТип Регион
        {
            get
            {
                if ((this.регионField == null))
                {
                    this.регионField = new РегионТип();
                }
                return this.регионField;
            }
            set
            {
                this.регионField = value;
            }
        }

        public РайонТип Район
        {
            get
            {
                if ((this.районField == null))
                {
                    this.районField = new РайонТип();
                }
                return this.районField;
            }
            set
            {
                this.районField = value;
            }
        }

        public ГородТип Город
        {
            get
            {
                if ((this.городField == null))
                {
                    this.городField = new ГородТип();
                }
                return this.городField;
            }
            set
            {
                this.городField = value;
            }
        }

        public НаселПунктТип НаселПункт
        {
            get
            {
                if ((this.населПунктField == null))
                {
                    this.населПунктField = new НаселПунктТип();
                }
                return this.населПунктField;
            }
            set
            {
                this.населПунктField = value;
            }
        }

        public УлицаТип Улица
        {
            get
            {
                if ((this.улицаField == null))
                {
                    this.улицаField = new УлицаТип();
                }
                return this.улицаField;
            }
            set
            {
                this.улицаField = value;
            }
        }

        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(АдрРФЕГРЮЛТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current АдрРФЕГРЮЛТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an АдрРФЕГРЮЛТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output АдрРФЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out АдрРФЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(АдрРФЕГРЮЛТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out АдрРФЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static АдрРФЕГРЮЛТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((АдрРФЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current АдрРФЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an АдрРФЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output АдрРФЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out АдрРФЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(АдрРФЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out АдрРФЕГРЮЛТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out АдрРФЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static АдрРФЕГРЮЛТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static АдрРФЕГРЮЛТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class РегионТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТипРегион { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимРегион { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(РегионТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current РегионТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an РегионТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output РегионТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out РегионТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(РегионТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out РегионТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static РегионТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((РегионТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current РегионТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an РегионТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output РегионТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out РегионТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(РегионТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out РегионТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out РегионТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static РегионТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static РегионТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class РайонТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТипРайон { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимРайон { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(РайонТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current РайонТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an РайонТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output РайонТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out РайонТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(РайонТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out РайонТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static РайонТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((РайонТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current РайонТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an РайонТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output РайонТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out РайонТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(РайонТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out РайонТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out РайонТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static РайонТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static РайонТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ГородТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТипГород { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимГород { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ГородТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ГородТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ГородТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ГородТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ГородТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ГородТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ГородТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ГородТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ГородТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ГородТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ГородТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ГородТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ГородТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ГородТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ГородТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ГородТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ГородТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ГородТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class НаселПунктТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТипНаселПункт { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимНаселПункт { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(НаселПунктТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current НаселПунктТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an НаселПунктТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output НаселПунктТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out НаселПунктТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(НаселПунктТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out НаселПунктТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static НаселПунктТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((НаселПунктТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current НаселПунктТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an НаселПунктТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output НаселПунктТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out НаселПунктТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(НаселПунктТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out НаселПунктТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out НаселПунктТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static НаселПунктТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static НаселПунктТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class УлицаТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТипУлица { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимУлица { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(УлицаТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current УлицаТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an УлицаТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output УлицаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out УлицаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(УлицаТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out УлицаТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static УлицаТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((УлицаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current УлицаТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an УлицаТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output УлицаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out УлицаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(УлицаТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out УлицаТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out УлицаТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static УлицаТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static УлицаТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class АдрИнЕГРЮЛТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОКСМ { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСтран { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string АдрИн { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(АдрИнЕГРЮЛТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current АдрИнЕГРЮЛТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an АдрИнЕГРЮЛТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output АдрИнЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out АдрИнЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(АдрИнЕГРЮЛТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out АдрИнЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static АдрИнЕГРЮЛТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((АдрИнЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current АдрИнЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an АдрИнЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output АдрИнЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out АдрИнЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(АдрИнЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out АдрИнЕГРЮЛТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out АдрИнЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static АдрИнЕГРЮЛТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static АдрИнЕГРЮЛТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class СвОбремТипСвЗалогДержЮЛ
    {

        private ГРНДатаТип гРНДатаПервField;

        private СвЮЛЕГРЮЛТип наимИННЮЛField;

        private СвНаимПолнТип свНаимЮЛПолнИнField;

        private СвРегИнЮЛЕГРЮЛТип свРегИнField;

        private СвНотУдДогЗалТип свНотУдДогЗалField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        public СвЮЛЕГРЮЛТип НаимИННЮЛ
        {
            get
            {
                if ((this.наимИННЮЛField == null))
                {
                    this.наимИННЮЛField = new СвЮЛЕГРЮЛТип();
                }
                return this.наимИННЮЛField;
            }
            set
            {
                this.наимИННЮЛField = value;
            }
        }

        public СвНаимПолнТип СвНаимЮЛПолнИн
        {
            get
            {
                if ((this.свНаимЮЛПолнИнField == null))
                {
                    this.свНаимЮЛПолнИнField = new СвНаимПолнТип();
                }
                return this.свНаимЮЛПолнИнField;
            }
            set
            {
                this.свНаимЮЛПолнИнField = value;
            }
        }

        public СвРегИнЮЛЕГРЮЛТип СвРегИн
        {
            get
            {
                if ((this.свРегИнField == null))
                {
                    this.свРегИнField = new СвРегИнЮЛЕГРЮЛТип();
                }
                return this.свРегИнField;
            }
            set
            {
                this.свРегИнField = value;
            }
        }

        public СвНотУдДогЗалТип СвНотУдДогЗал
        {
            get
            {
                if ((this.свНотУдДогЗалField == null))
                {
                    this.свНотУдДогЗалField = new СвНотУдДогЗалТип();
                }
                return this.свНотУдДогЗалField;
            }
            set
            {
                this.свНотУдДогЗалField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвОбремТипСвЗалогДержЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвОбремТипСвЗалогДержЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвОбремТипСвЗалогДержЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвОбремТипСвЗалогДержЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвОбремТипСвЗалогДержЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОбремТипСвЗалогДержЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвОбремТипСвЗалогДержЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвОбремТипСвЗалогДержЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвОбремТипСвЗалогДержЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвОбремТипСвЗалогДержЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвОбремТипСвЗалогДержЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвОбремТипСвЗалогДержЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвОбремТипСвЗалогДержЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОбремТипСвЗалогДержЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвОбремТипСвЗалогДержЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвОбремТипСвЗалогДержЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвОбремТипСвЗалогДержЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвОбремТипСвЗалогДержЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum СвОбремТипВидОбрем
    {

        /// <remarks/>
        ЗАЛОГ,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ИНОЕ ОБРЕМЕНЕНИЕ")]
        ИНОЕОБРЕМЕНЕНИЕ,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвОбъемПравТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОбъемПрав { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвОбъемПравТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвОбъемПравТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвОбъемПравТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвОбъемПравТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвОбъемПравТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОбъемПравТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвОбъемПравТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвОбъемПравТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвОбъемПравТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвОбъемПравТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвОбъемПравТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвОбъемПравТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвОбъемПравТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОбъемПравТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвОбъемПравТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвОбъемПравТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвОбъемПравТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвОбъемПравТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ДоляУстКапЕГРЮЛТип
    {

        private ДробьТип доляРубляField;

        private ДоляУстКапЕГРЮЛТипРазмерДоли размерДолиField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal НоминСтоим { get; set; }


        public ДробьТип ДоляРубля
        {
            get
            {
                if ((this.доляРубляField == null))
                {
                    this.доляРубляField = new ДробьТип();
                }
                return this.доляРубляField;
            }
            set
            {
                this.доляРубляField = value;
            }
        }

        public ДоляУстКапЕГРЮЛТипРазмерДоли РазмерДоли
        {
            get
            {
                if ((this.размерДолиField == null))
                {
                    this.размерДолиField = new ДоляУстКапЕГРЮЛТипРазмерДоли();
                }
                return this.размерДолиField;
            }
            set
            {
                this.размерДолиField = value;
            }
        }

        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДоляУстКапЕГРЮЛТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДоляУстКапЕГРЮЛТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ДоляУстКапЕГРЮЛТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДоляУстКапЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДоляУстКапЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ДоляУстКапЕГРЮЛТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ДоляУстКапЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ДоляУстКапЕГРЮЛТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ДоляУстКапЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ДоляУстКапЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ДоляУстКапЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДоляУстКапЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ДоляУстКапЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ДоляУстКапЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ДоляУстКапЕГРЮЛТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ДоляУстКапЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ДоляУстКапЕГРЮЛТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ДоляУстКапЕГРЮЛТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ДробьТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string Числит { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string Знаменат { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string ДробДесят { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string Процент { get; set; }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДробьТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДробьТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ДробьТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДробьТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДробьТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ДробьТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ДробьТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ДробьТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ДробьТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ДробьТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ДробьТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДробьТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ДробьТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ДробьТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ДробьТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ДробьТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ДробьТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ДробьТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ДоляУстКапЕГРЮЛТипРазмерДоли
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ДробДесят", typeof(decimal))]
        [System.Xml.Serialization.XmlElementAttribute("ДробПрост", typeof(ДробьТип))]
        [System.Xml.Serialization.XmlElementAttribute("Процент", typeof(decimal))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public object Item { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType ItemElementName { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДоляУстКапЕГРЮЛТипРазмерДоли));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДоляУстКапЕГРЮЛТипРазмерДоли object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ДоляУстКапЕГРЮЛТипРазмерДоли object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДоляУстКапЕГРЮЛТипРазмерДоли object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДоляУстКапЕГРЮЛТипРазмерДоли obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ДоляУстКапЕГРЮЛТипРазмерДоли);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ДоляУстКапЕГРЮЛТипРазмерДоли obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ДоляУстКапЕГРЮЛТипРазмерДоли Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ДоляУстКапЕГРЮЛТипРазмерДоли)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ДоляУстКапЕГРЮЛТипРазмерДоли object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ДоляУстКапЕГРЮЛТипРазмерДоли object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДоляУстКапЕГРЮЛТипРазмерДоли object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ДоляУстКапЕГРЮЛТипРазмерДоли obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ДоляУстКапЕГРЮЛТипРазмерДоли);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ДоляУстКапЕГРЮЛТипРазмерДоли obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ДоляУстКапЕГРЮЛТипРазмерДоли obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ДоляУстКапЕГРЮЛТипРазмерДоли LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ДоляУстКапЕГРЮЛТипРазмерДоли LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema = false)]
    public enum ItemChoiceType
    {

        /// <remarks/>
        ДробДесят,

        /// <remarks/>
        ДробПрост,

        /// <remarks/>
        Процент,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвНедДанУчрТип
    {

        private РешСудТип решСудНедДанУчрField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СвНедДанУчрТипПризнНедДанУчр ПризнНедДанУчр { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТекстНедДанУчр { get; set; }


        public РешСудТип РешСудНедДанУчр
        {
            get
            {
                if ((this.решСудНедДанУчрField == null))
                {
                    this.решСудНедДанУчрField = new РешСудТип();
                }
                return this.решСудНедДанУчрField;
            }
            set
            {
                this.решСудНедДанУчрField = value;
            }
        }

        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвНедДанУчрТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвНедДанУчрТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвНедДанУчрТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвНедДанУчрТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвНедДанУчрТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНедДанУчрТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвНедДанУчрТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвНедДанУчрТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвНедДанУчрТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвНедДанУчрТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвНедДанУчрТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвНедДанУчрТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвНедДанУчрТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНедДанУчрТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвНедДанУчрТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвНедДанУчрТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвНедДанУчрТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвНедДанУчрТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum СвНедДанУчрТипПризнНедДанУчр
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвФИОЗАГСТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Фамилия { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Имя { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Отчество { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвФИОЗАГСТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвФИОЗАГСТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвФИОЗАГСТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвФИОЗАГСТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвФИОЗАГСТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвФИОЗАГСТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвФИОЗАГСТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвФИОЗАГСТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвФИОЗАГСТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвФИОЗАГСТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвФИОЗАГСТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвФИОЗАГСТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвФИОЗАГСТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвФИОЗАГСТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвФИОЗАГСТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвФИОЗАГСТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвФИОЗАГСТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвФИОЗАГСТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвНомТелТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомТел { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвНомТелТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвНомТелТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвНомТелТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвНомТелТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвНомТелТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНомТелТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвНомТелТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвНомТелТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвНомТелТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвНомТелТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвНомТелТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвНомТелТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвНомТелТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНомТелТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвНомТелТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвНомТелТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвНомТелТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвНомТелТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвАкРАФПТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомерРАФП { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвАкРАФПТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвАкРАФПТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвАкРАФПТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвАкРАФПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвАкРАФПТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвАкРАФПТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвАкРАФПТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвАкРАФПТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвАкРАФПТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвАкРАФПТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвАкРАФПТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвАкРАФПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвАкРАФПТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвАкРАФПТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвАкРАФПТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвАкРАФПТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвАкРАФПТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвАкРАФПТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвНаимПредЮЛТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимПредЮЛ { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвНаимПредЮЛТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвНаимПредЮЛТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвНаимПредЮЛТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвНаимПредЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвНаимПредЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНаимПредЮЛТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвНаимПредЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвНаимПредЮЛТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвНаимПредЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвНаимПредЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвНаимПредЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвНаимПредЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвНаимПредЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНаимПредЮЛТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвНаимПредЮЛТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвНаимПредЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвНаимПредЮЛТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвНаимПредЮЛТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвРегОргТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодНО { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимНО { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвРегОргТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвРегОргТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвРегОргТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвРегОргТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвРегОргТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвРегОргТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвРегОргТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвРегОргТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвРегОргТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвРегОргТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвРегОргТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвРегОргТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвРегОргТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвРегОргТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвРегОргТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвРегОргТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвРегОргТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвРегОргТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ОгрДосСвТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ОгрДосСвТипОгрДосСв ОгрДосСв { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ОгрДосСвТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ОгрДосСвТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ОгрДосСвТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ОгрДосСвТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ОгрДосСвТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ОгрДосСвТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ОгрДосСвТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ОгрДосСвТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ОгрДосСвТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ОгрДосСвТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ОгрДосСвТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ОгрДосСвТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ОгрДосСвТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ОгрДосСвТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ОгрДосСвТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ОгрДосСвТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ОгрДосСвТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ОгрДосСвТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ОгрДосСвТипОгрДосСв
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class НомерПТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Тип { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(НомерПТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current НомерПТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an НомерПТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output НомерПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out НомерПТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(НомерПТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out НомерПТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static НомерПТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((НомерПТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current НомерПТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an НомерПТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output НомерПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out НомерПТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(НомерПТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out НомерПТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out НомерПТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static НомерПТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static НомерПТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ТипНаимПТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Тип { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ТипНаимПТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ТипНаимПТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ТипНаимПТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ТипНаимПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ТипНаимПТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ТипНаимПТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ТипНаимПТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ТипНаимПТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ТипНаимПТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ТипНаимПТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ТипНаимПТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ТипНаимПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ТипНаимПТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ТипНаимПТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ТипНаимПТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ТипНаимПТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ТипНаимПТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ТипНаимПТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class АдрФИАСЕГРЮЛТип
    {

        private ВидНаимКодТип муниципРайонField;

        private ВидНаимКодТип городСелПоселенField;

        private ВидНаимПТип населенПунктField;

        private ТипНаимПТип элПланСтруктурField;

        private ТипНаимПТип элУлДорСетиField;

        private List<НомерПТип> зданиеField;

        private НомерПТип помещЗданияField;

        private НомерПТип помещКвартирыField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string Регион { get; set; }

        public string НаимРегион { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИдНом { get; set; }


        public ВидНаимКодТип МуниципРайон
        {
            get
            {
                if ((this.муниципРайонField == null))
                {
                    this.муниципРайонField = new ВидНаимКодТип();
                }
                return this.муниципРайонField;
            }
            set
            {
                this.муниципРайонField = value;
            }
        }

        public ВидНаимКодТип ГородСелПоселен
        {
            get
            {
                if ((this.городСелПоселенField == null))
                {
                    this.городСелПоселенField = new ВидНаимКодТип();
                }
                return this.городСелПоселенField;
            }
            set
            {
                this.городСелПоселенField = value;
            }
        }

        public ВидНаимПТип НаселенПункт
        {
            get
            {
                if ((this.населенПунктField == null))
                {
                    this.населенПунктField = new ВидНаимПТип();
                }
                return this.населенПунктField;
            }
            set
            {
                this.населенПунктField = value;
            }
        }

        public ТипНаимПТип ЭлПланСтруктур
        {
            get
            {
                if ((this.элПланСтруктурField == null))
                {
                    this.элПланСтруктурField = new ТипНаимПТип();
                }
                return this.элПланСтруктурField;
            }
            set
            {
                this.элПланСтруктурField = value;
            }
        }

        public ТипНаимПТип ЭлУлДорСети
        {
            get
            {
                if ((this.элУлДорСетиField == null))
                {
                    this.элУлДорСетиField = new ТипНаимПТип();
                }
                return this.элУлДорСетиField;
            }
            set
            {
                this.элУлДорСетиField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Здание")]
        public List<НомерПТип> Здание
        {
            get
            {
                if ((this.зданиеField == null))
                {
                    this.зданиеField = new List<НомерПТип>();
                }
                return this.зданиеField;
            }
            set
            {
                this.зданиеField = value;
            }
        }

        public НомерПТип ПомещЗдания
        {
            get
            {
                if ((this.помещЗданияField == null))
                {
                    this.помещЗданияField = new НомерПТип();
                }
                return this.помещЗданияField;
            }
            set
            {
                this.помещЗданияField = value;
            }
        }

        public НомерПТип ПомещКвартиры
        {
            get
            {
                if ((this.помещКвартирыField == null))
                {
                    this.помещКвартирыField = new НомерПТип();
                }
                return this.помещКвартирыField;
            }
            set
            {
                this.помещКвартирыField = value;
            }
        }

        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(АдрФИАСЕГРЮЛТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current АдрФИАСЕГРЮЛТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an АдрФИАСЕГРЮЛТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output АдрФИАСЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out АдрФИАСЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(АдрФИАСЕГРЮЛТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out АдрФИАСЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static АдрФИАСЕГРЮЛТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((АдрФИАСЕГРЮЛТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current АдрФИАСЕГРЮЛТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an АдрФИАСЕГРЮЛТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output АдрФИАСЕГРЮЛТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out АдрФИАСЕГРЮЛТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(АдрФИАСЕГРЮЛТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out АдрФИАСЕГРЮЛТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out АдрФИАСЕГРЮЛТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static АдрФИАСЕГРЮЛТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static АдрФИАСЕГРЮЛТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ВидНаимКодТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВидКод { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ВидНаимКодТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ВидНаимКодТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ВидНаимКодТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ВидНаимКодТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ВидНаимКодТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ВидНаимКодТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ВидНаимКодТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ВидНаимКодТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ВидНаимКодТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ВидНаимКодТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ВидНаимКодТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ВидНаимКодТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ВидНаимКодТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ВидНаимКодТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ВидНаимКодТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ВидНаимКодТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ВидНаимКодТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ВидНаимКодТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ВидНаимПТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Вид { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ВидНаимПТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ВидНаимПТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ВидНаимПТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ВидНаимПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ВидНаимПТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ВидНаимПТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ВидНаимПТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ВидНаимПТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ВидНаимПТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ВидНаимПТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ВидНаимПТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ВидНаимПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ВидНаимПТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ВидНаимПТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ВидНаимПТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ВидНаимПТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ВидНаимПТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ВидНаимПТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвНаимСокрТип
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСокр { get; set; }


        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвНаимСокрТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвНаимСокрТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвНаимСокрТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвНаимСокрТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвНаимСокрТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНаимСокрТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвНаимСокрТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвНаимСокрТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвНаимСокрТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвНаимСокрТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвНаимСокрТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвНаимСокрТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвНаимСокрТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвНаимСокрТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвНаимСокрТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвНаимСокрТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвНаимСокрТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвНаимСокрТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Состав и структура документа
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокумент
    {

        private ФайлДокументСвЮЛ свЮЛField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Идентификатор документа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИдДок { get; set; }


        /// <summary>
        /// Сведения о юридическом лице
        /// </summary>
        public ФайлДокументСвЮЛ СвЮЛ
        {
            get
            {
                if ((this.свЮЛField == null))
                {
                    this.свЮЛField = new ФайлДокументСвЮЛ();
                }
                return this.свЮЛField;
            }
            set
            {
                this.свЮЛField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокумент));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокумент object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокумент object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокумент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокумент obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокумент);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокумент obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокумент Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокумент)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокумент object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокумент object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокумент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокумент obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокумент);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокумент obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокумент obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокумент LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокумент LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о юридическом лице
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛ
    {

        private ФайлДокументСвЮЛСвНаимЮЛ свНаимЮЛField;

        private ФайлДокументСвЮЛСвАдресЮЛ свАдресЮЛField;

        private ФайлДокументСвЮЛСвАдрЭлПочты свАдрЭлПочтыField;

        private ФайлДокументСвЮЛСвОбрЮЛ свОбрЮЛField;

        private ФайлДокументСвЮЛСвРегОрг свРегОргField;

        private List<ФайлДокументСвЮЛСвСтатус> свСтатусField;

        private ФайлДокументСвЮЛСвПрекрЮЛ свПрекрЮЛField;

        private ФайлДокументСвЮЛСвТипУстав свТипУставField;

        private ФайлДокументСвЮЛСвУчетНО свУчетНОField;

        private ФайлДокументСвЮЛСвРегПФ свРегПФField;

        private ФайлДокументСвЮЛСвРегФСС свРегФССField;

        private ФайлДокументСвЮЛСвУстКап свУстКапField;

        private ФайлДокументСвЮЛСвПолном свПолномField;

        private List<ФайлДокументСвЮЛСвУпрОрг> свУпрОргField;

        private List<ФайлДокументСвЮЛСведДолжнФЛ> сведДолжнФЛField;

        private List<ФайлДокументСвЮЛСвКорпДог> свКорпДогField;

        private ФайлДокументСвЮЛСвУчредит свУчредитField;

        private ФайлДокументСвЮЛСвДоляООО свДоляОООField;

        private ФайлДокументСвЮЛСвДержРеестрАО свДержРеестрАОField;

        private ФайлДокументСвЮЛСвОКВЭД свОКВЭДField;

        private List<ФайлДокументСвЮЛСвЛицензия> свЛицензияField;

        private ФайлДокументСвЮЛСвПодразд свПодраздField;

        private List<ФайлДокументСвЮЛСвРеорг> свРеоргField;

        private List<ФайлДокументСвЮЛСвПредш> свПредшField;

        private List<ФайлДокументСвЮЛСвКФХПредш> свКФХПредшField;

        private List<ФайлДокументСвЮЛСвПреем> свПреемField;

        private ФайлДокументСвЮЛСвКФХПреем свКФХПреемField;

        private List<ФайлДокументСвЮЛСвЗапЕГРЮЛ> свЗапЕГРЮЛField;

        private static System.Xml.Serialization.XmlSerializer serializer;


        #region Дополнительные поля для поисковой машины

        //[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        //public DateTime ДатаПапки { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        //public DateTime ДатаГосреестра { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string НазваниеФайлаZip { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string НазваниеФайлаXml { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ВерсияФайлаXML { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ПолеДляПоиска { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ПолеДляПоискаСРазбивкой { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ПолеДляПоискаСПодсказками { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ОГРНДляПоиска { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ИННДляПоиска { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string Реестр { get; set; }
        #endregion



        /// <summary>
        /// Дата формирования сведений из ЕГРЮЛ в отношении юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаВып { get; set; }

        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }

        /// <summary>
        /// Дата присвоения ОГРН
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаОГРН { get; set; }

        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }

        /// <summary>
        /// КПП юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП { get; set; }

        /// <summary>
        /// Наименование классификатора, по которому введены сведения об организационно-правовой форме: ОКОПФ, КОПФ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументСвЮЛСпрОПФ СпрОПФ { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СпрОПФSpecified { get; set; }

        /// <summary>
        /// Код по выбранному классификатору
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодОПФ { get; set; }

        /// <summary>
        /// Полное наименование организационно-правовой формы
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ПолнНаимОПФ { get; set; }


        /// <summary>
        /// Сведения о наименовании юридического лица
        /// </summary>
        public ФайлДокументСвЮЛСвНаимЮЛ СвНаимЮЛ
        {
            get
            {
                if ((this.свНаимЮЛField == null))
                {
                    this.свНаимЮЛField = new ФайлДокументСвЮЛСвНаимЮЛ();
                }
                return this.свНаимЮЛField;
            }
            set
            {
                this.свНаимЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе (месте нахождения)
        /// </summary>
        public ФайлДокументСвЮЛСвАдресЮЛ СвАдресЮЛ
        {
            get
            {
                if ((this.свАдресЮЛField == null))
                {
                    this.свАдресЮЛField = new ФайлДокументСвЮЛСвАдресЮЛ();
                }
                return this.свАдресЮЛField;
            }
            set
            {
                this.свАдресЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе электронной почты юридического лица
        /// </summary>
        public ФайлДокументСвЮЛСвАдрЭлПочты СвАдрЭлПочты
        {
            get
            {
                if ((this.свАдрЭлПочтыField == null))
                {
                    this.свАдрЭлПочтыField = new ФайлДокументСвЮЛСвАдрЭлПочты();
                }
                return this.свАдрЭлПочтыField;
            }
            set
            {
                this.свАдрЭлПочтыField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрации (образовании) юридического лица
        /// </summary>
        public ФайлДокументСвЮЛСвОбрЮЛ СвОбрЮЛ
        {
            get
            {
                if ((this.свОбрЮЛField == null))
                {
                    this.свОбрЮЛField = new ФайлДокументСвЮЛСвОбрЮЛ();
                }
                return this.свОбрЮЛField;
            }
            set
            {
                this.свОбрЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрирующем органе по месту нахождения юридического лица
        /// </summary>
        public ФайлДокументСвЮЛСвРегОрг СвРегОрг
        {
            get
            {
                if ((this.свРегОргField == null))
                {
                    this.свРегОргField = new ФайлДокументСвЮЛСвРегОрг();
                }
                return this.свРегОргField;
            }
            set
            {
                this.свРегОргField = value;
            }
        }

        /// <summary>
        /// Сведения о состоянии (статусе) юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвСтатус")]
        public List<ФайлДокументСвЮЛСвСтатус> СвСтатус
        {
            get
            {
                if ((this.свСтатусField == null))
                {
                    this.свСтатусField = new List<ФайлДокументСвЮЛСвСтатус>();
                }
                return this.свСтатусField;
            }
            set
            {
                this.свСтатусField = value;
            }
        }

        /// <summary>
        /// Сведения о прекращении юридического лица
        /// </summary>
        public ФайлДокументСвЮЛСвПрекрЮЛ СвПрекрЮЛ
        {
            get
            {
                if ((this.свПрекрЮЛField == null))
                {
                    this.свПрекрЮЛField = new ФайлДокументСвЮЛСвПрекрЮЛ();
                }
                return this.свПрекрЮЛField;
            }
            set
            {
                this.свПрекрЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения об использовании юридическим лицом типового устава
        /// </summary>
        public ФайлДокументСвЮЛСвТипУстав СвТипУстав
        {
            get
            {
                if ((this.свТипУставField == null))
                {
                    this.свТипУставField = new ФайлДокументСвЮЛСвТипУстав();
                }
                return this.свТипУставField;
            }
            set
            {
                this.свТипУставField = value;
            }
        }

        /// <summary>
        /// Сведения об учете в налоговом органе
        /// </summary>
        public ФайлДокументСвЮЛСвУчетНО СвУчетНО
        {
            get
            {
                if ((this.свУчетНОField == null))
                {
                    this.свУчетНОField = new ФайлДокументСвЮЛСвУчетНО();
                }
                return this.свУчетНОField;
            }
            set
            {
                this.свУчетНОField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрации юридического лица в качестве страхователя в территориальном органе Пенсионного фонда Российской Федерации
        /// </summary>
        public ФайлДокументСвЮЛСвРегПФ СвРегПФ
        {
            get
            {
                if ((this.свРегПФField == null))
                {
                    this.свРегПФField = new ФайлДокументСвЮЛСвРегПФ();
                }
                return this.свРегПФField;
            }
            set
            {
                this.свРегПФField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрации юридического лица в качестве страхователя в исполнительном органе Фонда социального страхования Российской Федерации
        /// </summary>
        public ФайлДокументСвЮЛСвРегФСС СвРегФСС
        {
            get
            {
                if ((this.свРегФССField == null))
                {
                    this.свРегФССField = new ФайлДокументСвЮЛСвРегФСС();
                }
                return this.свРегФССField;
            }
            set
            {
                this.свРегФССField = value;
            }
        }

        /// <summary>
        /// Сведения о размере указанного в учредительных документах коммерческой организации уставного капитала (складочного капитала, уставного фонда, паевого фонда)
        /// </summary>
        public ФайлДокументСвЮЛСвУстКап СвУстКап
        {
            get
            {
                if ((this.свУстКапField == null))
                {
                    this.свУстКапField = new ФайлДокументСвЮЛСвУстКап();
                }
                return this.свУстКапField;
            }
            set
            {
                this.свУстКапField = value;
            }
        }

        /// <summary>
        /// Сведения о полномочиях нескольких лиц выступать от имени юридического лица
        /// </summary>
        public ФайлДокументСвЮЛСвПолном СвПолном
        {
            get
            {
                if ((this.свПолномField == null))
                {
                    this.свПолномField = new ФайлДокументСвЮЛСвПолном();
                }
                return this.свПолномField;
            }
            set
            {
                this.свПолномField = value;
            }
        }

        /// <summary>
        /// Сведения о юридическом лице, имеющем право без доверенности действовать от имени юридического лица, в отношении которого формируется выписка
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвУпрОрг")]
        public List<ФайлДокументСвЮЛСвУпрОрг> СвУпрОрг
        {
            get
            {
                if ((this.свУпрОргField == null))
                {
                    this.свУпрОргField = new List<ФайлДокументСвЮЛСвУпрОрг>();
                }
                return this.свУпрОргField;
            }
            set
            {
                this.свУпрОргField = value;
            }
        }

        /// <summary>
        /// Сведения о физическом лице, имеющем право без доверенности действовать от имени юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СведДолжнФЛ")]
        public List<ФайлДокументСвЮЛСведДолжнФЛ> СведДолжнФЛ
        {
            get
            {
                if ((this.сведДолжнФЛField == null))
                {
                    this.сведДолжнФЛField = new List<ФайлДокументСвЮЛСведДолжнФЛ>();
                }
                return this.сведДолжнФЛField;
            }
            set
            {
                this.сведДолжнФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о наличии корпоративного договора
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвКорпДог")]
        public List<ФайлДокументСвЮЛСвКорпДог> СвКорпДог
        {
            get
            {
                if ((this.свКорпДогField == null))
                {
                    this.свКорпДогField = new List<ФайлДокументСвЮЛСвКорпДог>();
                }
                return this.свКорпДогField;
            }
            set
            {
                this.свКорпДогField = value;
            }
        }

        /// <summary>
        /// Сведения об учредителях (участниках) юридического лица
        /// </summary>
        public ФайлДокументСвЮЛСвУчредит СвУчредит
        {
            get
            {
                if ((this.свУчредитField == null))
                {
                    this.свУчредитField = new ФайлДокументСвЮЛСвУчредит();
                }
                return this.свУчредитField;
            }
            set
            {
                this.свУчредитField = value;
            }
        }

        /// <summary>
        /// Сведения о доле в уставном капитале общества с ограниченной ответственностью, принадлежащей обществу
        /// </summary>
        public ФайлДокументСвЮЛСвДоляООО СвДоляООО
        {
            get
            {
                if ((this.свДоляОООField == null))
                {
                    this.свДоляОООField = new ФайлДокументСвЮЛСвДоляООО();
                }
                return this.свДоляОООField;
            }
            set
            {
                this.свДоляОООField = value;
            }
        }

        /// <summary>
        /// Сведения о держателе реестра акционеров акционерного общества
        /// </summary>
        public ФайлДокументСвЮЛСвДержРеестрАО СвДержРеестрАО
        {
            get
            {
                if ((this.свДержРеестрАОField == null))
                {
                    this.свДержРеестрАОField = new ФайлДокументСвЮЛСвДержРеестрАО();
                }
                return this.свДержРеестрАОField;
            }
            set
            {
                this.свДержРеестрАОField = value;
            }
        }

        /// <summary>
        /// Сведения о видах экономической деятельности по Общероссийскому классификатору видов экономической деятельности
        /// </summary>
        public ФайлДокументСвЮЛСвОКВЭД СвОКВЭД
        {
            get
            {
                if ((this.свОКВЭДField == null))
                {
                    this.свОКВЭДField = new ФайлДокументСвЮЛСвОКВЭД();
                }
                return this.свОКВЭДField;
            }
            set
            {
                this.свОКВЭДField = value;
            }
        }

        /// <summary>
        /// Сведения о лицензиях, выданных юридическому лицу
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвЛицензия")]
        public List<ФайлДокументСвЮЛСвЛицензия> СвЛицензия
        {
            get
            {
                if ((this.свЛицензияField == null))
                {
                    this.свЛицензияField = new List<ФайлДокументСвЮЛСвЛицензия>();
                }
                return this.свЛицензияField;
            }
            set
            {
                this.свЛицензияField = value;
            }
        }

        /// <summary>
        /// Сведения о филиалах и представительствах  юридического лица
        /// </summary>
        public ФайлДокументСвЮЛСвПодразд СвПодразд
        {
            get
            {
                if ((this.свПодраздField == null))
                {
                    this.свПодраздField = new ФайлДокументСвЮЛСвПодразд();
                }
                return this.свПодраздField;
            }
            set
            {
                this.свПодраздField = value;
            }
        }

        /// <summary>
        /// Сведения об участии в реорганизации
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвРеорг")]
        public List<ФайлДокументСвЮЛСвРеорг> СвРеорг
        {
            get
            {
                if ((this.свРеоргField == null))
                {
                    this.свРеоргField = new List<ФайлДокументСвЮЛСвРеорг>();
                }
                return this.свРеоргField;
            }
            set
            {
                this.свРеоргField = value;
            }
        }

        /// <summary>
        /// Сведения о правопредшественнике
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвПредш")]
        public List<ФайлДокументСвЮЛСвПредш> СвПредш
        {
            get
            {
                if ((this.свПредшField == null))
                {
                    this.свПредшField = new List<ФайлДокументСвЮЛСвПредш>();
                }
                return this.свПредшField;
            }
            set
            {
                this.свПредшField = value;
            }
        }

        /// <summary>
        /// Сведения о крестьянском (фермерском) хозяйстве, на базе имущества которого создано юридическое лицо
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвКФХПредш")]
        public List<ФайлДокументСвЮЛСвКФХПредш> СвКФХПредш
        {
            get
            {
                if ((this.свКФХПредшField == null))
                {
                    this.свКФХПредшField = new List<ФайлДокументСвЮЛСвКФХПредш>();
                }
                return this.свКФХПредшField;
            }
            set
            {
                this.свКФХПредшField = value;
            }
        }

        /// <summary>
        /// Сведения о правопреемнике
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвПреем")]
        public List<ФайлДокументСвЮЛСвПреем> СвПреем
        {
            get
            {
                if ((this.свПреемField == null))
                {
                    this.свПреемField = new List<ФайлДокументСвЮЛСвПреем>();
                }
                return this.свПреемField;
            }
            set
            {
                this.свПреемField = value;
            }
        }

        /// <summary>
        /// Сведения о крестьянском (фермерском) хозяйстве, которые внесены в ЕГРИП в связи с приведением правового статуса крестьянского (фермерского) хозяйства в соответствие с нормами части первой Гражданского кодекса Российской Федерации
        /// </summary>
        public ФайлДокументСвЮЛСвКФХПреем СвКФХПреем
        {
            get
            {
                if ((this.свКФХПреемField == null))
                {
                    this.свКФХПреемField = new ФайлДокументСвЮЛСвКФХПреем();
                }
                return this.свКФХПреемField;
            }
            set
            {
                this.свКФХПреемField = value;
            }
        }

        /// <summary>
        /// Сведения о записях, внесенных в ЕГРЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвЗапЕГРЮЛ")]
        public List<ФайлДокументСвЮЛСвЗапЕГРЮЛ> СвЗапЕГРЮЛ
        {
            get
            {
                if ((this.свЗапЕГРЮЛField == null))
                {
                    this.свЗапЕГРЮЛField = new List<ФайлДокументСвЮЛСвЗапЕГРЮЛ>();
                }
                return this.свЗапЕГРЮЛField;
            }
            set
            {
                this.свЗапЕГРЮЛField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о наименовании юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвНаимЮЛ
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private СвНаимСокрТип свНаимЮЛСокрField;

        private List<ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН> свНаимЮЛКодОКИНField;

        private СвНаимПолнТип свНаимЮЛПолнИнField;

        private СвНаимСокрТип свНаимЮЛСокрИнField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Полное наименование юридического лица на русском языке
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }

        /// <summary>
        /// Сокращенное наименование юридического лица на русском языке
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛСокр { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        /// <summary>
        /// Сведения о сокращенном наименовании юридического лица на русском языке
        /// </summary>
        public СвНаимСокрТип СвНаимЮЛСокр
        {
            get
            {
                if ((this.свНаимЮЛСокрField == null))
                {
                    this.свНаимЮЛСокрField = new СвНаимСокрТип();
                }
                return this.свНаимЮЛСокрField;
            }
            set
            {
                this.свНаимЮЛСокрField = value;
            }
        }

        /// <summary>
        /// Сведения о наличии у юридического лица наименования на языках народов Российской Федерации и (или) на иностранных языках
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНаимЮЛКодОКИН")]
        public List<ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН> СвНаимЮЛКодОКИН
        {
            get
            {
                if ((this.свНаимЮЛКодОКИНField == null))
                {
                    this.свНаимЮЛКодОКИНField = new List<ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН>();
                }
                return this.свНаимЮЛКодОКИНField;
            }
            set
            {
                this.свНаимЮЛКодОКИНField = value;
            }
        }

        /// <summary>
        /// Сведения о полном наименовании юридического лица на английском языке
        /// </summary>
        public СвНаимПолнТип СвНаимЮЛПолнИн
        {
            get
            {
                if ((this.свНаимЮЛПолнИнField == null))
                {
                    this.свНаимЮЛПолнИнField = new СвНаимПолнТип();
                }
                return this.свНаимЮЛПолнИнField;
            }
            set
            {
                this.свНаимЮЛПолнИнField = value;
            }
        }

        /// <summary>
        /// Сведения о сокращенном наименовании юридического лица на английском языке
        /// </summary>
        public СвНаимСокрТип СвНаимЮЛСокрИн
        {
            get
            {
                if ((this.свНаимЮЛСокрИнField == null))
                {
                    this.свНаимЮЛСокрИнField = new СвНаимСокрТип();
                }
                return this.свНаимЮЛСокрИнField;
            }
            set
            {
                this.свНаимЮЛСокрИнField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвНаимЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвНаимЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвНаимЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвНаимЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвНаимЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвНаимЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвНаимЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвНаимЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвНаимЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвНаимЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвНаимЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвНаимЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвНаимЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвНаимЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвНаимЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвНаимЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвНаимЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвНаимЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о наличии у юридического лица наименования на языках народов Российской Федерации и (или) на иностранных языках
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код языка по классификатору ОКИН
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодОКИН { get; set; }

        /// <summary>
        /// Наименование языка по классификатору ОКИН
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимОКИН { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвНаимЮЛСвНаимЮЛКодОКИН LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об адресе (месте нахождения)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвАдресЮЛ
    {

        private ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ свМНЮЛField;

        private АдрФИАСЕГРЮЛТип свАдрЮЛФИАСField;

        private АдрРФЕГРЮЛТип адресРФField;

        private List<ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ> свНедАдресЮЛField;

        private ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН свРешИзмМНField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения о месте нахождения юридического лица
        /// </summary>
        public ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ СвМНЮЛ
        {
            get
            {
                if ((this.свМНЮЛField == null))
                {
                    this.свМНЮЛField = new ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ();
                }
                return this.свМНЮЛField;
            }
            set
            {
                this.свМНЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе юридического лица (в структуре ФИАС)
        /// </summary>
        public АдрФИАСЕГРЮЛТип СвАдрЮЛФИАС
        {
            get
            {
                if ((this.свАдрЮЛФИАСField == null))
                {
                    this.свАдрЮЛФИАСField = new АдрФИАСЕГРЮЛТип();
                }
                return this.свАдрЮЛФИАСField;
            }
            set
            {
                this.свАдрЮЛФИАСField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе юридического лица (в структуре КЛАДР)
        /// </summary>
        public АдрРФЕГРЮЛТип АдресРФ
        {
            get
            {
                if ((this.адресРФField == null))
                {
                    this.адресРФField = new АдрРФЕГРЮЛТип();
                }
                return this.адресРФField;
            }
            set
            {
                this.адресРФField = value;
            }
        }

        /// <summary>
        /// Сведения о недостоверности адреса
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедАдресЮЛ")]
        public List<ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ> СвНедАдресЮЛ
        {
            get
            {
                if ((this.свНедАдресЮЛField == null))
                {
                    this.свНедАдресЮЛField = new List<ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ>();
                }
                return this.свНедАдресЮЛField;
            }
            set
            {
                this.свНедАдресЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения о принятии юридическим лицом решения об изменении места нахождения
        /// </summary>
        public ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН СвРешИзмМН
        {
            get
            {
                if ((this.свРешИзмМНField == null))
                {
                    this.свРешИзмМНField = new ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН();
                }
                return this.свРешИзмМНField;
            }
            set
            {
                this.свРешИзмМНField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвАдресЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвАдресЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвАдресЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвАдресЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвАдресЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвАдресЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвАдресЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвАдресЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвАдресЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвАдресЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвАдресЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвАдресЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвАдресЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвАдресЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвАдресЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвАдресЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвАдресЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвАдресЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о месте нахождения юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ
    {

        private ВидНаимКодТип муниципРайонField;

        private ВидНаимКодТип городСелПоселенField;

        private ВидНаимПТип населенПунктField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код субъекта Российской Федерации
        /// </summary>
        public string Регион { get; set; }

        /// <summary>
        /// Наименование субъекта Российской Федерации
        /// </summary>
        public string НаимРегион { get; set; }

        /// <summary>
        /// Уникальный идентификатор адресного объекта в ГАР
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИдНом { get; set; }


        /// <summary>
        /// Муниципальный район/ городской округ/ внутригородская территория города федерального значения/ муниципальный округ
        /// </summary>
        public ВидНаимКодТип МуниципРайон
        {
            get
            {
                if ((this.муниципРайонField == null))
                {
                    this.муниципРайонField = new ВидНаимКодТип();
                }
                return this.муниципРайонField;
            }
            set
            {
                this.муниципРайонField = value;
            }
        }

        /// <summary>
        /// Городское поселение / сельское поселение / межселенная территория в составе муниципального района / внутригородской район городского округа
        /// </summary>
        public ВидНаимКодТип ГородСелПоселен
        {
            get
            {
                if ((this.городСелПоселенField == null))
                {
                    this.городСелПоселенField = new ВидНаимКодТип();
                }
                return this.городСелПоселенField;
            }
            set
            {
                this.городСелПоселенField = value;
            }
        }

        /// <summary>
        /// Населенный пункт (город, деревня, село и прочее)
        /// </summary>
        public ВидНаимПТип НаселенПункт
        {
            get
            {
                if ((this.населенПунктField == null))
                {
                    this.населенПунктField = new ВидНаимПТип();
                }
                return this.населенПунктField;
            }
            set
            {
                this.населенПунктField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвАдресЮЛСвМНЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о недостоверности адреса
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ
    {

        private РешСудТип решСудНедАдрField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Признак недостоверности адреса
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛПризнНедАдресЮЛ ПризнНедАдресЮЛ { get; set; }

        /// <summary>
        /// Текст о недостоверности сведений, выводимый в выписке в строке с наименованием «Дополнительные сведения»
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТекстНедАдресЮЛ { get; set; }


        /// <summary>
        /// Сведения о решении суда, на основании которого адрес признан недостоверным
        /// </summary>
        public РешСудТип РешСудНедАдр
        {
            get
            {
                if ((this.решСудНедАдрField == null))
                {
                    this.решСудНедАдрField = new РешСудТип();
                }
                return this.решСудНедАдрField;
            }
            set
            {
                this.решСудНедАдрField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлДокументСвЮЛСвАдресЮЛСвНедАдресЮЛПризнНедАдресЮЛ
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    /// <summary>
    /// Сведения о принятии юридическим лицом решения об изменении места нахождения
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН
    {

        private РегионТип регионField;

        private РайонТип районField;

        private ГородТип городField;

        private НаселПунктТип населПунктField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТекстРешИзмМН { get; set; }


        /// <summary>
        /// Субъект Российской Федерации
        /// </summary>
        public РегионТип Регион
        {
            get
            {
                if ((this.регионField == null))
                {
                    this.регионField = new РегионТип();
                }
                return this.регионField;
            }
            set
            {
                this.регионField = value;
            }
        }

        /// <summary>
        /// Район (улус и т.п.)
        /// </summary>
        public РайонТип Район
        {
            get
            {
                if ((this.районField == null))
                {
                    this.районField = new РайонТип();
                }
                return this.районField;
            }
            set
            {
                this.районField = value;
            }
        }

        /// <summary>
        /// Город (волость и т.п.)
        /// </summary>
        public ГородТип Город
        {
            get
            {
                if ((this.городField == null))
                {
                    this.городField = new ГородТип();
                }
                return this.городField;
            }
            set
            {
                this.городField = value;
            }
        }

        /// <summary>
        /// Населенный пункт (село и т.п.)
        /// </summary>
        public НаселПунктТип НаселПункт
        {
            get
            {
                if ((this.населПунктField == null))
                {
                    this.населПунктField = new НаселПунктТип();
                }
                return this.населПунктField;
            }
            set
            {
                this.населПунктField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвАдресЮЛСвРешИзмМН LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об адресе электронной почты юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвАдрЭлПочты
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute("E-mail")]
        public string Email { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической  ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвАдрЭлПочты));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвАдрЭлПочты object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвАдрЭлПочты object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвАдрЭлПочты object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвАдрЭлПочты obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвАдрЭлПочты);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвАдрЭлПочты obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвАдрЭлПочты Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвАдрЭлПочты)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвАдрЭлПочты object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвАдрЭлПочты object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвАдрЭлПочты object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвАдрЭлПочты obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвАдрЭлПочты);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвАдрЭлПочты obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвАдрЭлПочты obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвАдрЭлПочты LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвАдрЭлПочты LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о регистрации (образовании) юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвОбрЮЛ
    {

        private ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ спОбрЮЛField;

        private ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ свРегИнЮЛField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения о том, что юридическое лицо является международной компанией или международным фондом
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументСвЮЛСвОбрЮЛСтатусМКФ СтатусМКФ { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СтатусМКФSpecified { get; set; }

        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }

        /// <summary>
        /// Дата присвоения ОГРН
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаОГРН { get; set; }

        /// <summary>
        /// Регистрационный номер, присвоенный российскому юридическому лицу до 1 июля 2002 года, или регистрационный номер юридического лица на территории Республики Крым или территории города федерального значения Севастополя на день принятия в Российской Федерации и образования в составе Российской Федерации новых субъектов - Республики Крым и города федерального значения Севастополя
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string РегНом { get; set; }

        /// <summary>
        /// Дата регистрации юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРег { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаРегSpecified { get; set; }

        /// <summary>
        /// Наименование органа, зарегистрировавшего юридическое лицо
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимРО { get; set; }


        /// <summary>
        /// Способ образования юридического лица
        /// </summary>
        public ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ СпОбрЮЛ
        {
            get
            {
                if ((this.спОбрЮЛField == null))
                {
                    this.спОбрЮЛField = new ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ();
                }
                return this.спОбрЮЛField;
            }
            set
            {
                this.спОбрЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрации иностранного юридического лица до принятия решения о редомициляции (об изменении его личного закона)
        /// </summary>
        public ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ СвРегИнЮЛ
        {
            get
            {
                if ((this.свРегИнЮЛField == null))
                {
                    this.свРегИнЮЛField = new ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ();
                }
                return this.свРегИнЮЛField;
            }
            set
            {
                this.свРегИнЮЛField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвОбрЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвОбрЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвОбрЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвОбрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвОбрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвОбрЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвОбрЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвОбрЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвОбрЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвОбрЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвОбрЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвОбрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвОбрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвОбрЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвОбрЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвОбрЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвОбрЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвОбрЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Способ образования юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код способа образования по справочнику СЮЛНД
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСпОбрЮЛ { get; set; }

        /// <summary>
        /// Наименование способа образования юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСпОбрЮЛ { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвОбрЮЛСпОбрЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о регистрации иностранного юридического лица до принятия решения о редомициляции (об изменении его личного закона)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИННЮЛ { get; set; }

        /// <summary>
        /// Полное наименование в русской транскрипции
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолнРус { get; set; }

        /// <summary>
        /// Полное наименование в латинской транскрипции
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолнЛат { get; set; }

        /// <summary>
        /// Код страны происхождения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОКСМ { get; set; }

        /// <summary>
        /// Наименование страны происхождения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСтран { get; set; }

        /// <summary>
        /// Регистрационный номер
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string РегНомер { get; set; }

        /// <summary>
        /// Код налогоплательщика в стране происхождения или аналог
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодИОСтрРег { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвОбрЮЛСвРегИнЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлДокументСвЮЛСвОбрЮЛСтатусМКФ
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
    }

    /// <summary>
    /// Сведения о регистрирующем органе по месту нахождения юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвРегОрг
    {

        private ГРНДатаТип гРНДатаField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код органа по справочнику СОУН
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодНО { get; set; }

        /// <summary>
        /// Наименование регистрирующего (налогового) органа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимНО { get; set; }

        /// <summary>
        /// Адрес регистрирующего органа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string АдрРО { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвРегОрг));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвРегОрг object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвРегОрг object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвРегОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвРегОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвРегОрг);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвРегОрг obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвРегОрг Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвРегОрг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвРегОрг object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвРегОрг object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвРегОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвРегОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвРегОрг);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвРегОрг obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвРегОрг obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвРегОрг LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвРегОрг LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о состоянии (статусе) юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвСтатус
    {

        private ОгрДосСвТип огрДосСвField;

        private ФайлДокументСвЮЛСвСтатусСвСтатус свСтатусField;

        private ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ свРешИсклЮЛField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об ограничении доступа к сведениям о состоянии (статусе) юридического лица
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// Сведения о правоспособности (статусе) юридического лица
        /// </summary>
        public ФайлДокументСвЮЛСвСтатусСвСтатус СвСтатус
        {
            get
            {
                if ((this.свСтатусField == null))
                {
                    this.свСтатусField = new ФайлДокументСвЮЛСвСтатусСвСтатус();
                }
                return this.свСтатусField;
            }
            set
            {
                this.свСтатусField = value;
            }
        }

        /// <summary>
        /// Сведения о решении о предстоящем исключении юридического лица из ЕГРЮЛ и его публикации
        /// </summary>
        public ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ СвРешИсклЮЛ
        {
            get
            {
                if ((this.свРешИсклЮЛField == null))
                {
                    this.свРешИсклЮЛField = new ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ();
                }
                return this.свРешИсклЮЛField;
            }
            set
            {
                this.свРешИсклЮЛField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвСтатус));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвСтатус object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвСтатус object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвСтатус);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвСтатус obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвСтатус Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвСтатус object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвСтатус object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвСтатус);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвСтатус obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвСтатус obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвСтатус LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвСтатус LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о правоспособности (статусе) юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвСтатусСвСтатус
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код статуса юридического лица по справочнику СЮЛСТ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСтатусЮЛ { get; set; }

        /// <summary>
        /// Наименование статуса юридического лица по справочнику СЮЛСТ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСтатусЮЛ { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвСтатусСвСтатус));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвСтатусСвСтатус object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвСтатусСвСтатус object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвСтатусСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвСтатусСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвСтатусСвСтатус);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвСтатусСвСтатус obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвСтатусСвСтатус Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвСтатусСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвСтатусСвСтатус object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвСтатусСвСтатус object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвСтатусСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвСтатусСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвСтатусСвСтатус);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвСтатусСвСтатус obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвСтатусСвСтатус obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвСтатусСвСтатус LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвСтатусСвСтатус LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о решении о предстоящем исключении юридического лица из ЕГРЮЛ и его публикации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Дата решения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРеш { get; set; }

        /// <summary>
        /// Номер решения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомерРеш { get; set; }

        /// <summary>
        /// Дата публикации решения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаПубликации { get; set; }

        /// <summary>
        /// Номер журнала, в котором опубликовано решение
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомерЖурнала { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвСтатусСвРешИсклЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о прекращении юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвПрекрЮЛ
    {

        private ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ спПрекрЮЛField;

        private СвРегОргТип свРегОргField;

        private ГРНДатаТип гРНДатаField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Дата прекращения юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаПрекрЮЛ { get; set; }


        /// <summary>
        /// Способ прекращения юридического лица
        /// </summary>
        public ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ СпПрекрЮЛ
        {
            get
            {
                if ((this.спПрекрЮЛField == null))
                {
                    this.спПрекрЮЛField = new ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ();
                }
                return this.спПрекрЮЛField;
            }
            set
            {
                this.спПрекрЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрирующем (налоговом) органе, внесшем запись о прекращении юридического лица
        /// </summary>
        public СвРегОргТип СвРегОрг
        {
            get
            {
                if ((this.свРегОргField == null))
                {
                    this.свРегОргField = new СвРегОргТип();
                }
                return this.свРегОргField;
            }
            set
            {
                this.свРегОргField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвПрекрЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПрекрЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвПрекрЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПрекрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПрекрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПрекрЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПрекрЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПрекрЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвПрекрЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПрекрЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвПрекрЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПрекрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвПрекрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПрекрЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПрекрЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПрекрЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПрекрЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвПрекрЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Способ прекращения юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код способа прекращения по справочнику СЮЛПД
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСпПрекрЮЛ { get; set; }

        /// <summary>
        /// Наименование способа прекращения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСпПрекрЮЛ { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвПрекрЮЛСпПрекрЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об использовании юридическим лицом типового устава
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвТипУстав
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Номер типового устава
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомТипУстав { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвТипУстав));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвТипУстав object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвТипУстав object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвТипУстав object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвТипУстав obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвТипУстав);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвТипУстав obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвТипУстав Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвТипУстав)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвТипУстав object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвТипУстав object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвТипУстав object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвТипУстав obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвТипУстав);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвТипУстав obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвТипУстав obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвТипУстав LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвТипУстав LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об учете в налоговом органе
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчетНО
    {

        private СвНОТип свНОField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }

        /// <summary>
        /// КПП юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП { get; set; }

        /// <summary>
        /// Дата постановки на учет в налоговом органе
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаПостУч { get; set; }


        /// <summary>
        /// Сведения о налоговом органе, в котором юридическое лицо состоит (для юридических лиц, прекративших деятельность - состояло) на учете
        /// </summary>
        public СвНОТип СвНО
        {
            get
            {
                if ((this.свНОField == null))
                {
                    this.свНОField = new СвНОТип();
                }
                return this.свНОField;
            }
            set
            {
                this.свНОField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчетНО));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчетНО object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчетНО object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчетНО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчетНО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчетНО);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчетНО obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчетНО Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчетНО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчетНО object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчетНО object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчетНО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчетНО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчетНО);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчетНО obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчетНО obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчетНО LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчетНО LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о регистрации юридического лица в качестве страхователя в территориальном органе Пенсионного фонда Российской Федерации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвРегПФ
    {

        private ФайлДокументСвЮЛСвРегПФСвОргПФ свОргПФField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Регистрационный номер в территориальном органе Пенсионного фонда Российской Федерации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string РегНомПФ { get; set; }

        /// <summary>
        /// Дата регистрации юридического лица в качестве страхователя
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРег { get; set; }


        /// <summary>
        /// Сведения о территориальном органе Пенсионного фонда Российской Федерации
        /// </summary>
        public ФайлДокументСвЮЛСвРегПФСвОргПФ СвОргПФ
        {
            get
            {
                if ((this.свОргПФField == null))
                {
                    this.свОргПФField = new ФайлДокументСвЮЛСвРегПФСвОргПФ();
                }
                return this.свОргПФField;
            }
            set
            {
                this.свОргПФField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвРегПФ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвРегПФ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвРегПФ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвРегПФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвРегПФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвРегПФ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвРегПФ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвРегПФ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвРегПФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвРегПФ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвРегПФ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвРегПФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвРегПФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвРегПФ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвРегПФ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвРегПФ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвРегПФ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвРегПФ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о территориальном органе Пенсионного фонда Российской Федерации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвРегПФСвОргПФ
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код по справочнику СТОПФ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодПФ { get; set; }

        /// <summary>
        /// Наименование
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимПФ { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвРегПФСвОргПФ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвРегПФСвОргПФ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвРегПФСвОргПФ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвРегПФСвОргПФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвРегПФСвОргПФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвРегПФСвОргПФ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвРегПФСвОргПФ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвРегПФСвОргПФ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвРегПФСвОргПФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвРегПФСвОргПФ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвРегПФСвОргПФ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвРегПФСвОргПФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвРегПФСвОргПФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвРегПФСвОргПФ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвРегПФСвОргПФ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвРегПФСвОргПФ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвРегПФСвОргПФ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвРегПФСвОргПФ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о регистрации юридического лица в качестве страхователя в исполнительном органе Фонда социального страхования Российской Федерации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвРегФСС
    {

        private ФайлДокументСвЮЛСвРегФСССвОргФСС свОргФССField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Регистрационный номер в исполнительном органе Фонда социального страхования Российской Федерации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string РегНомФСС { get; set; }

        /// <summary>
        /// Дата регистрации юридического лица в качестве страхователя
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРег { get; set; }


        /// <summary>
        /// Сведения об исполнительном органе Фонда социального страхования Российской Федерации
        /// </summary>
        public ФайлДокументСвЮЛСвРегФСССвОргФСС СвОргФСС
        {
            get
            {
                if ((this.свОргФССField == null))
                {
                    this.свОргФССField = new ФайлДокументСвЮЛСвРегФСССвОргФСС();
                }
                return this.свОргФССField;
            }
            set
            {
                this.свОргФССField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвРегФСС));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвРегФСС object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвРегФСС object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвРегФСС object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвРегФСС obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвРегФСС);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвРегФСС obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвРегФСС Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвРегФСС)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвРегФСС object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвРегФСС object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвРегФСС object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвРегФСС obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвРегФСС);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвРегФСС obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвРегФСС obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвРегФСС LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвРегФСС LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об исполнительном органе Фонда социального страхования Российской Федерации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвРегФСССвОргФСС
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код по справочнику СТОФСС
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодФСС { get; set; }

        /// <summary>
        /// Наименование
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимФСС { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвРегФСССвОргФСС));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвРегФСССвОргФСС object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвРегФСССвОргФСС object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвРегФСССвОргФСС object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвРегФСССвОргФСС obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвРегФСССвОргФСС);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвРегФСССвОргФСС obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвРегФСССвОргФСС Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвРегФСССвОргФСС)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвРегФСССвОргФСС object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвРегФСССвОргФСС object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвРегФСССвОргФСС object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвРегФСССвОргФСС obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвРегФСССвОргФСС);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвРегФСССвОргФСС obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвРегФСССвОргФСС obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвРегФСССвОргФСС LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвРегФСССвОргФСС LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о размере указанного в учредительных документах коммерческой организации уставного капитала (складочного капитала, уставного фонда, паевого фонда)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУстКап
    {

        private ДробьТип доляРубляField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private ФайлДокументСвЮЛСвУстКапСведУмУК сведУмУКField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Наименование вида капитала
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументСвЮЛСвУстКапНаимВидКап НаимВидКап { get; set; }

        /// <summary>
        /// Размер в рублях
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СумКап { get; set; }


        /// <summary>
        /// Доля рубля в капитале в виде простой дроби
        /// </summary>
        public ДробьТип ДоляРубля
        {
            get
            {
                if ((this.доляРубляField == null))
                {
                    this.доляРубляField = new ДробьТип();
                }
                return this.доляРубляField;
            }
            set
            {
                this.доляРубляField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        /// <summary>
        /// Сведения о нахождении хозяйственного общества в процессе уменьшения уставного капитала
        /// </summary>
        public ФайлДокументСвЮЛСвУстКапСведУмУК СведУмУК
        {
            get
            {
                if ((this.сведУмУКField == null))
                {
                    this.сведУмУКField = new ФайлДокументСвЮЛСвУстКапСведУмУК();
                }
                return this.сведУмУКField;
            }
            set
            {
                this.сведУмУКField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУстКап));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУстКап object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУстКап object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУстКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУстКап obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУстКап);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУстКап obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУстКап Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУстКап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУстКап object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУстКап object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУстКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУстКап obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУстКап);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУстКап obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУстКап obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУстКап LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУстКап LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о нахождении хозяйственного общества в процессе уменьшения уставного капитала
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУстКапСведУмУК
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Величина, на которую уменьшается уставный капитал (в рублях)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ВелУмУК { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ВелУмУКSpecified { get; set; }

        /// <summary>
        /// Дата принятия решения об уменьшении уставного капитала
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРеш { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаРешSpecified { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУстКапСведУмУК));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУстКапСведУмУК object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУстКапСведУмУК object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУстКапСведУмУК object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУстКапСведУмУК obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУстКапСведУмУК);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУстКапСведУмУК obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУстКапСведУмУК Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУстКапСведУмУК)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУстКапСведУмУК object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУстКапСведУмУК object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУстКапСведУмУК object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУстКапСведУмУК obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУстКапСведУмУК);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУстКапСведУмУК obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУстКапСведУмУК obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУстКапСведУмУК LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУстКапСведУмУК LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлДокументСвЮЛСвУстКапНаимВидКап
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("УСТАВНЫЙ КАПИТАЛ")]
        УСТАВНЫЙКАПИТАЛ,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("СКЛАДОЧНЫЙ КАПИТАЛ")]
        СКЛАДОЧНЫЙКАПИТАЛ,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("УСТАВНЫЙ ФОНД")]
        УСТАВНЫЙФОНД,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ПАЕВЫЕ ВЗНОСЫ")]
        ПАЕВЫЕВЗНОСЫ,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ПАЕВОЙ ФОНД")]
        ПАЕВОЙФОНД,
    }

    /// <summary>
    /// Сведения о полномочиях нескольких лиц выступать от имени юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвПолном
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Вид полномочий
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументСвЮЛСвПолномВидПолном ВидПолном { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвПолном));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПолном object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвПолном object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПолном object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПолном obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПолном);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПолном obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПолном Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвПолном)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПолном object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвПолном object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПолном object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвПолном obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПолном);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПолном obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПолном obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПолном LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвПолном LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлДокументСвЮЛСвПолномВидПолном
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
    }

    /// <summary>
    /// Сведения о юридическом лице, имеющем право без доверенности действовать от имени юридического лица, в отношении которого формируется выписка
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУпрОрг
    {

        private ОгрДосСвТип огрДосСвField;

        private ГРНДатаТип гРНДатаПервField;

        private СвЮЛЕГРЮЛТип наимИННЮЛField;

        private СвРегИнЮЛЕГРЮЛТип свРегИнField;

        private List<ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг> свНедДанУпрОргField;

        private СвНаимПредЮЛТип свПредЮЛField;

        private СвАкРАФПТип свАкРАФПField;

        private АдрРФЕГРЮЛТип свАдрРФField;

        private СвНомТелТип свНомТелField;

        private ФайлДокументСвЮЛСвУпрОргПредИнЮЛ предИнЮЛField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об ограничении доступа к сведениям о лице, имеющем право без доверенности действовать от имени юридического лица
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Сведения о наименовании, ОГРН и ИНН юридического лица, являющегося лицом, имеющим право действовать без доверенности
        /// </summary>
        public СвЮЛЕГРЮЛТип НаимИННЮЛ
        {
            get
            {
                if ((this.наимИННЮЛField == null))
                {
                    this.наимИННЮЛField = new СвЮЛЕГРЮЛТип();
                }
                return this.наимИННЮЛField;
            }
            set
            {
                this.наимИННЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрации иностранного юридического лица в стране происхождения
        /// </summary>
        public СвРегИнЮЛЕГРЮЛТип СвРегИн
        {
            get
            {
                if ((this.свРегИнField == null))
                {
                    this.свРегИнField = new СвРегИнЮЛЕГРЮЛТип();
                }
                return this.свРегИнField;
            }
            set
            {
                this.свРегИнField = value;
            }
        }

        /// <summary>
        /// Сведения о недостоверности данных о юридическом лице, имеющем право действовать без доверенности
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедДанУпрОрг")]
        public List<ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг> СвНедДанУпрОрг
        {
            get
            {
                if ((this.свНедДанУпрОргField == null))
                {
                    this.свНедДанУпрОргField = new List<ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг>();
                }
                return this.свНедДанУпрОргField;
            }
            set
            {
                this.свНедДанУпрОргField = value;
            }
        }

        /// <summary>
        /// Сведения о наименовании представительства или филиала в Российской Федерации, через которое иностранное юридическое лицо осуществляет полномочия управляющей организации
        /// </summary>
        public СвНаимПредЮЛТип СвПредЮЛ
        {
            get
            {
                if ((this.свПредЮЛField == null))
                {
                    this.свПредЮЛField = new СвНаимПредЮЛТип();
                }
                return this.свПредЮЛField;
            }
            set
            {
                this.свПредЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения об аккредитации представительства или филиала в Российской Федерации, через которое иностранное юридическое лицо осуществляет полномочия управляющей организации
        /// </summary>
        public СвАкРАФПТип СвАкРАФП
        {
            get
            {
                if ((this.свАкРАФПField == null))
                {
                    this.свАкРАФПField = new СвАкРАФПТип();
                }
                return this.свАкРАФПField;
            }
            set
            {
                this.свАкРАФПField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе управляющей организации в Российской Федерации
        /// </summary>
        public АдрРФЕГРЮЛТип СвАдрРФ
        {
            get
            {
                if ((this.свАдрРФField == null))
                {
                    this.свАдрРФField = new АдрРФЕГРЮЛТип();
                }
                return this.свАдрРФField;
            }
            set
            {
                this.свАдрРФField = value;
            }
        }

        /// <summary>
        /// Сведения о контактном телефоне
        /// </summary>
        public СвНомТелТип СвНомТел
        {
            get
            {
                if ((this.свНомТелField == null))
                {
                    this.свНомТелField = new СвНомТелТип();
                }
                return this.свНомТелField;
            }
            set
            {
                this.свНомТелField = value;
            }
        }

        /// <summary>
        /// Сведения о лице, через которое иностранное юридическое лицо осуществляет полномочия управляющей организации
        /// </summary>
        public ФайлДокументСвЮЛСвУпрОргПредИнЮЛ ПредИнЮЛ
        {
            get
            {
                if ((this.предИнЮЛField == null))
                {
                    this.предИнЮЛField = new ФайлДокументСвЮЛСвУпрОргПредИнЮЛ();
                }
                return this.предИнЮЛField;
            }
            set
            {
                this.предИнЮЛField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУпрОрг));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУпрОрг object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУпрОрг object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУпрОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУпрОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУпрОрг);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУпрОрг obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУпрОрг Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУпрОрг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУпрОрг object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУпрОрг object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУпрОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУпрОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУпрОрг);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУпрОрг obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУпрОрг obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУпрОрг LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУпрОрг LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о недостоверности данных о юридическом лице, имеющем право действовать без доверенности
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг
    {

        private РешСудТип решСудНедДанУпрОргField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Признак недостоверности данных
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОргПризнНедДанУпрОрг ПризнНедДанУпрОрг { get; set; }

        /// <summary>
        /// Текст о недостоверности сведений, выводимый в выписке в строке с наименованием «Дополнительные сведения»
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТекстНедДанУпрОрг { get; set; }


        /// <summary>
        /// Сведения о решении суда, на основании которого указанные сведения признаны недостоверными
        /// </summary>
        public РешСудТип РешСудНедДанУпрОрг
        {
            get
            {
                if ((this.решСудНедДанУпрОргField == null))
                {
                    this.решСудНедДанУпрОргField = new РешСудТип();
                }
                return this.решСудНедДанУпрОргField;
            }
            set
            {
                this.решСудНедДанУпрОргField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОрг LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлДокументСвЮЛСвУпрОргСвНедДанУпрОргПризнНедДанУпрОрг
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    /// <summary>
    /// Сведения о лице, через которое иностранное юридическое лицо осуществляет полномочия управляющей организации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУпрОргПредИнЮЛ
    {

        private ГРНДатаТип гРНДатаПервField;

        private СвФЛЕГРЮЛТип свФЛField;

        private СвНомТелТип свНомТелField;

        private СвРождЕГРЮЛТип свРождФЛField;

        private УдЛичнЕГРЮЛТип удЛичнФЛField;

        private АдрРФЕГРЮЛТип адресМЖРФField;

        private АдрИнЕГРЮЛТип адрМЖИнField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Сведения о фамилии, имени, отчестве и ИНН физического лица
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ
        {
            get
            {
                if ((this.свФЛField == null))
                {
                    this.свФЛField = new СвФЛЕГРЮЛТип();
                }
                return this.свФЛField;
            }
            set
            {
                this.свФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о контактном телефоне физического лица
        /// </summary>
        public СвНомТелТип СвНомТел
        {
            get
            {
                if ((this.свНомТелField == null))
                {
                    this.свНомТелField = new СвНомТелТип();
                }
                return this.свНомТелField;
            }
            set
            {
                this.свНомТелField = value;
            }
        }

        /// <summary>
        /// Сведения о рождении физического лица
        /// </summary>
        public СвРождЕГРЮЛТип СвРождФЛ
        {
            get
            {
                if ((this.свРождФЛField == null))
                {
                    this.свРождФЛField = new СвРождЕГРЮЛТип();
                }
                return this.свРождФЛField;
            }
            set
            {
                this.свРождФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о документе, удостоверяющем личность
        /// </summary>
        public УдЛичнЕГРЮЛТип УдЛичнФЛ
        {
            get
            {
                if ((this.удЛичнФЛField == null))
                {
                    this.удЛичнФЛField = new УдЛичнЕГРЮЛТип();
                }
                return this.удЛичнФЛField;
            }
            set
            {
                this.удЛичнФЛField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации
        /// </summary>
        public АдрРФЕГРЮЛТип АдресМЖРФ
        {
            get
            {
                if ((this.адресМЖРФField == null))
                {
                    this.адресМЖРФField = new АдрРФЕГРЮЛТип();
                }
                return this.адресМЖРФField;
            }
            set
            {
                this.адресМЖРФField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места жительства за пределами территории Российской Федерации
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМЖИн
        {
            get
            {
                if ((this.адрМЖИнField == null))
                {
                    this.адрМЖИнField = new АдрИнЕГРЮЛТип();
                }
                return this.адрМЖИнField;
            }
            set
            {
                this.адрМЖИнField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУпрОргПредИнЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУпрОргПредИнЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУпрОргПредИнЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУпрОргПредИнЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУпрОргПредИнЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУпрОргПредИнЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУпрОргПредИнЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУпрОргПредИнЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУпрОргПредИнЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУпрОргПредИнЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУпрОргПредИнЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУпрОргПредИнЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУпрОргПредИнЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУпрОргПредИнЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУпрОргПредИнЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУпрОргПредИнЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУпрОргПредИнЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУпрОргПредИнЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о физическом лице, имеющем право без доверенности действовать от имени юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСведДолжнФЛ
    {

        private ОгрДосСвТип огрДосСвField;

        private ГРНДатаТип гРНДатаПервField;

        private СвФЛЕГРЮЛТип свФЛField;

        private СвФИОЗАГСТип свФИОЗАГСField;

        private ФайлДокументСвЮЛСведДолжнФЛСвДолжн свДолжнField;

        private СвНомТелТип свНомТелField;

        private List<ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ> свНедДанДолжнФЛField;

        private СвПолФЛТип свПолФЛField;

        private СвРождЕГРЮЛТип свРождФЛField;

        private СвГраждТип свГраждФЛField;

        private УдЛичнЕГРЮЛТип удЛичнФЛField;

        private АдрРФЕГРЮЛТип адресМЖРФField;

        private АдрФИАСЕГРЮЛТип адрМЖФИАСField;

        private АдрИнЕГРЮЛТип адрМЖИнField;

        private List<ФайлДокументСвЮЛСведДолжнФЛСвДискв> свДисквField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об ограничении доступа к сведениям о лице, имеющем право без доверенности действовать от имени юридического лица
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Сведения о фамилии, имени, отчестве и ИНН физического лица
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ
        {
            get
            {
                if ((this.свФЛField == null))
                {
                    this.свФЛField = new СвФЛЕГРЮЛТип();
                }
                return this.свФЛField;
            }
            set
            {
                this.свФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о фамилии, имени, отчестве физического лица по данным ЗАГС
        /// </summary>
        public СвФИОЗАГСТип СвФИОЗАГС
        {
            get
            {
                if ((this.свФИОЗАГСField == null))
                {
                    this.свФИОЗАГСField = new СвФИОЗАГСТип();
                }
                return this.свФИОЗАГСField;
            }
            set
            {
                this.свФИОЗАГСField = value;
            }
        }

        /// <summary>
        /// Сведения о должности физического лица
        /// </summary>
        public ФайлДокументСвЮЛСведДолжнФЛСвДолжн СвДолжн
        {
            get
            {
                if ((this.свДолжнField == null))
                {
                    this.свДолжнField = new ФайлДокументСвЮЛСведДолжнФЛСвДолжн();
                }
                return this.свДолжнField;
            }
            set
            {
                this.свДолжнField = value;
            }
        }

        /// <summary>
        /// Сведения о контактном телефоне физического лица
        /// </summary>
        public СвНомТелТип СвНомТел
        {
            get
            {
                if ((this.свНомТелField == null))
                {
                    this.свНомТелField = new СвНомТелТип();
                }
                return this.свНомТелField;
            }
            set
            {
                this.свНомТелField = value;
            }
        }

        /// <summary>
        /// Сведения о недостоверности данных о лице, имеющем право без доверенности действовать от имени юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедДанДолжнФЛ")]
        public List<ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ> СвНедДанДолжнФЛ
        {
            get
            {
                if ((this.свНедДанДолжнФЛField == null))
                {
                    this.свНедДанДолжнФЛField = new List<ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ>();
                }
                return this.свНедДанДолжнФЛField;
            }
            set
            {
                this.свНедДанДолжнФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о поле физического лица
        /// </summary>
        public СвПолФЛТип СвПолФЛ
        {
            get
            {
                if ((this.свПолФЛField == null))
                {
                    this.свПолФЛField = new СвПолФЛТип();
                }
                return this.свПолФЛField;
            }
            set
            {
                this.свПолФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о рождении физического лица
        /// </summary>
        public СвРождЕГРЮЛТип СвРождФЛ
        {
            get
            {
                if ((this.свРождФЛField == null))
                {
                    this.свРождФЛField = new СвРождЕГРЮЛТип();
                }
                return this.свРождФЛField;
            }
            set
            {
                this.свРождФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о гражданстве физического лица
        /// </summary>
        public СвГраждТип СвГраждФЛ
        {
            get
            {
                if ((this.свГраждФЛField == null))
                {
                    this.свГраждФЛField = new СвГраждТип();
                }
                return this.свГраждФЛField;
            }
            set
            {
                this.свГраждФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о документе, удостоверяющем личность физического лица
        /// </summary>
        public УдЛичнЕГРЮЛТип УдЛичнФЛ
        {
            get
            {
                if ((this.удЛичнФЛField == null))
                {
                    this.удЛичнФЛField = new УдЛичнЕГРЮЛТип();
                }
                return this.удЛичнФЛField;
            }
            set
            {
                this.удЛичнФЛField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации (в структуре КЛАДР)
        /// </summary>
        public АдрРФЕГРЮЛТип АдресМЖРФ
        {
            get
            {
                if ((this.адресМЖРФField == null))
                {
                    this.адресМЖРФField = new АдрРФЕГРЮЛТип();
                }
                return this.адресМЖРФField;
            }
            set
            {
                this.адресМЖРФField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации (в структуре ФИАС)
        /// </summary>
        public АдрФИАСЕГРЮЛТип АдрМЖФИАС
        {
            get
            {
                if ((this.адрМЖФИАСField == null))
                {
                    this.адрМЖФИАСField = new АдрФИАСЕГРЮЛТип();
                }
                return this.адрМЖФИАСField;
            }
            set
            {
                this.адрМЖФИАСField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места жительства за пределами территории Российской Федерации
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМЖИн
        {
            get
            {
                if ((this.адрМЖИнField == null))
                {
                    this.адрМЖИнField = new АдрИнЕГРЮЛТип();
                }
                return this.адрМЖИнField;
            }
            set
            {
                this.адрМЖИнField = value;
            }
        }

        /// <summary>
        /// Сведения о дисквалификации
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвДискв")]
        public List<ФайлДокументСвЮЛСведДолжнФЛСвДискв> СвДискв
        {
            get
            {
                if ((this.свДисквField == null))
                {
                    this.свДисквField = new List<ФайлДокументСвЮЛСведДолжнФЛСвДискв>();
                }
                return this.свДисквField;
            }
            set
            {
                this.свДисквField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСведДолжнФЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСведДолжнФЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСведДолжнФЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСведДолжнФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСведДолжнФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСведДолжнФЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСведДолжнФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСведДолжнФЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСведДолжнФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСведДолжнФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСведДолжнФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСведДолжнФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСведДолжнФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСведДолжнФЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСведДолжнФЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСведДолжнФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСведДолжнФЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСведДолжнФЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о должности физического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСведДолжнФЛСвДолжн
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Основной государственный регистрационный номер индивидуального предпринимателя - управляющего юридическим лицом
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРНИП { get; set; }

        /// <summary>
        /// Вид должностного лица по справочнику СКФЛЮЛ (указывается код по справочнику)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВидДолжн { get; set; }

        /// <summary>
        /// Наименование вида должностного лица по справочнику СКФЛЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимВидДолжн { get; set; }

        /// <summary>
        /// Наименование должности
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимДолжн { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСведДолжнФЛСвДолжн));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСведДолжнФЛСвДолжн object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСведДолжнФЛСвДолжн object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСведДолжнФЛСвДолжн object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСведДолжнФЛСвДолжн obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСведДолжнФЛСвДолжн);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСведДолжнФЛСвДолжн obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСведДолжнФЛСвДолжн Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСведДолжнФЛСвДолжн)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСведДолжнФЛСвДолжн object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСведДолжнФЛСвДолжн object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСведДолжнФЛСвДолжн object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСведДолжнФЛСвДолжн obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСведДолжнФЛСвДолжн);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСведДолжнФЛСвДолжн obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСведДолжнФЛСвДолжн obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСведДолжнФЛСвДолжн LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСведДолжнФЛСвДолжн LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о недостоверности данных о лице, имеющем право без доверенности действовать от имени юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ
    {

        private РешСудТип решСудНедДанДолжнФЛField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Признак недостоверности данных
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛПризнНедДанДолжнФЛ ПризнНедДанДолжнФЛ { get; set; }

        /// <summary>
        /// Текст о недостоверности сведений, выводимый в выписке в строке с наименованием «Дополнительные сведения»
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТекстНедДанДолжнФЛ { get; set; }


        /// <summary>
        /// Сведения о решении суда, на основании которого указанные сведения признаны недостоверными
        /// </summary>
        public РешСудТип РешСудНедДанДолжнФЛ
        {
            get
            {
                if ((this.решСудНедДанДолжнФЛField == null))
                {
                    this.решСудНедДанДолжнФЛField = new РешСудТип();
                }
                return this.решСудНедДанДолжнФЛField;
            }
            set
            {
                this.решСудНедДанДолжнФЛField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлДокументСвЮЛСведДолжнФЛСвНедДанДолжнФЛПризнНедДанДолжнФЛ
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    /// <summary>
    /// Сведения о дисквалификации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСведДолжнФЛСвДискв
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Дата начала дисквалификации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаНачДискв { get; set; }

        /// <summary>
        /// Дата окончания дисквалификации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаОкончДискв { get; set; }

        /// <summary>
        /// Дата вынесения судебным органом постановления о дисквалификации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРеш { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСведДолжнФЛСвДискв));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСведДолжнФЛСвДискв object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСведДолжнФЛСвДискв object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСведДолжнФЛСвДискв object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСведДолжнФЛСвДискв obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСведДолжнФЛСвДискв);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСведДолжнФЛСвДискв obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСведДолжнФЛСвДискв Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСведДолжнФЛСвДискв)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСведДолжнФЛСвДискв object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСведДолжнФЛСвДискв object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСведДолжнФЛСвДискв object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСведДолжнФЛСвДискв obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСведДолжнФЛСвДискв);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСведДолжнФЛСвДискв obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСведДолжнФЛСвДискв obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСведДолжнФЛСвДискв LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСведДолжнФЛСвДискв LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о наличии корпоративного договора
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвКорпДог
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Вид сведений в корпоративном договоре
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументСвЮЛСвКорпДогВидСведКорпДог ВидСведКорпДог { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвКорпДог));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвКорпДог object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвКорпДог object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвКорпДог object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвКорпДог obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвКорпДог);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвКорпДог obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвКорпДог Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвКорпДог)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвКорпДог object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвКорпДог object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвКорпДог object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвКорпДог obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвКорпДог);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвКорпДог obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвКорпДог obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвКорпДог LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвКорпДог LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлДокументСвЮЛСвКорпДогВидСведКорпДог
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
    }

    /// <summary>
    /// Сведения об учредителях (участниках) юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредит
    {

        private List<ФайлДокументСвЮЛСвУчредитУчрЮЛРос> учрЮЛРосField;

        private List<ФайлДокументСвЮЛСвУчредитУчрЮЛИн> учрЮЛИнField;

        private List<ФайлДокументСвЮЛСвУчредитУчрФЛ> учрФЛField;

        private List<ФайлДокументСвЮЛСвУчредитУчрРФСубМО> учрРФСубМОField;

        private List<ФайлДокументСвЮЛСвУчредитУчрПИФ> учрПИФField;

        private List<ФайлДокументСвЮЛСвУчредитУчрДогИнвТов> учрДогИнвТовField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об учредителе (участнике) - российском юридическом лице
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("УчрЮЛРос")]
        public List<ФайлДокументСвЮЛСвУчредитУчрЮЛРос> УчрЮЛРос
        {
            get
            {
                if ((this.учрЮЛРосField == null))
                {
                    this.учрЮЛРосField = new List<ФайлДокументСвЮЛСвУчредитУчрЮЛРос>();
                }
                return this.учрЮЛРосField;
            }
            set
            {
                this.учрЮЛРосField = value;
            }
        }

        /// <summary>
        /// Сведения об учредителе (участнике) - иностранном юридическом лице
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("УчрЮЛИн")]
        public List<ФайлДокументСвЮЛСвУчредитУчрЮЛИн> УчрЮЛИн
        {
            get
            {
                if ((this.учрЮЛИнField == null))
                {
                    this.учрЮЛИнField = new List<ФайлДокументСвЮЛСвУчредитУчрЮЛИн>();
                }
                return this.учрЮЛИнField;
            }
            set
            {
                this.учрЮЛИнField = value;
            }
        }

        /// <summary>
        /// Сведения об учредителе (участнике) - физическом лице
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("УчрФЛ")]
        public List<ФайлДокументСвЮЛСвУчредитУчрФЛ> УчрФЛ
        {
            get
            {
                if ((this.учрФЛField == null))
                {
                    this.учрФЛField = new List<ФайлДокументСвЮЛСвУчредитУчрФЛ>();
                }
                return this.учрФЛField;
            }
            set
            {
                this.учрФЛField = value;
            }
        }

        /// <summary>
        /// Сведения об учредителе (участнике) - Российской Федерации, субъекте Российской Федерации, муниципальном образовании
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("УчрРФСубМО")]
        public List<ФайлДокументСвЮЛСвУчредитУчрРФСубМО> УчрРФСубМО
        {
            get
            {
                if ((this.учрРФСубМОField == null))
                {
                    this.учрРФСубМОField = new List<ФайлДокументСвЮЛСвУчредитУчрРФСубМО>();
                }
                return this.учрРФСубМОField;
            }
            set
            {
                this.учрРФСубМОField = value;
            }
        }

        /// <summary>
        /// Сведения о паевом инвестиционном фонде, в состав имущества которого включена доля в уставном капитале
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("УчрПИФ")]
        public List<ФайлДокументСвЮЛСвУчредитУчрПИФ> УчрПИФ
        {
            get
            {
                if ((this.учрПИФField == null))
                {
                    this.учрПИФField = new List<ФайлДокументСвЮЛСвУчредитУчрПИФ>();
                }
                return this.учрПИФField;
            }
            set
            {
                this.учрПИФField = value;
            }
        }

        /// <summary>
        /// Сведения о включении доли в уставном / складочном капитале создаваемого юридического лица в состав общего имущества участников договора инвестиционного товарищества
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("УчрДогИнвТов")]
        public List<ФайлДокументСвЮЛСвУчредитУчрДогИнвТов> УчрДогИнвТов
        {
            get
            {
                if ((this.учрДогИнвТовField == null))
                {
                    this.учрДогИнвТовField = new List<ФайлДокументСвЮЛСвУчредитУчрДогИнвТов>();
                }
                return this.учрДогИнвТовField;
            }
            set
            {
                this.учрДогИнвТовField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредит));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредит object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредит object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредит object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредит obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредит);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредит obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредит Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредит)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредит object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредит object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредит object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредит obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредит);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредит obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредит obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредит LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредит LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об учредителе (участнике) - российском юридическом лице
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрЮЛРос
    {

        private ОгрДосСвТип огрДосСвField;

        private ГРНДатаТип гРНДатаПервField;

        private СвЮЛЕГРЮЛТип наимИННЮЛField;

        private ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые свРегСтарыеField;

        private List<СвНедДанУчрТип> свНедДанУчрField;

        private ДоляУстКапЕГРЮЛТип доляУстКапField;

        private СвОбъемПравТип свОбъемПравField;

        private List<СвОбремТип> свОбремField;

        private List<СвУправЗалТип> свУправЗалField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об ограничении доступа к сведениям об учредителе (участнике)
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Сведения о наименовании, ОГРН и ИНН юридического лица
        /// </summary>
        public СвЮЛЕГРЮЛТип НаимИННЮЛ
        {
            get
            {
                if ((this.наимИННЮЛField == null))
                {
                    this.наимИННЮЛField = new СвЮЛЕГРЮЛТип();
                }
                return this.наимИННЮЛField;
            }
            set
            {
                this.наимИННЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрации учредителя (участника) до 01.07.2002 г
        /// </summary>
        public ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые СвРегСтарые
        {
            get
            {
                if ((this.свРегСтарыеField == null))
                {
                    this.свРегСтарыеField = new ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые();
                }
                return this.свРегСтарыеField;
            }
            set
            {
                this.свРегСтарыеField = value;
            }
        }

        /// <summary>
        /// Сведения о недостоверности данных об учредителе (участнике)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедДанУчр")]
        public List<СвНедДанУчрТип> СвНедДанУчр
        {
            get
            {
                if ((this.свНедДанУчрField == null))
                {
                    this.свНедДанУчрField = new List<СвНедДанУчрТип>();
                }
                return this.свНедДанУчрField;
            }
            set
            {
                this.свНедДанУчрField = value;
            }
        }

        /// <summary>
        /// Сведения о доле учредителя (участника)
        /// </summary>
        public ДоляУстКапЕГРЮЛТип ДоляУстКап
        {
            get
            {
                if ((this.доляУстКапField == null))
                {
                    this.доляУстКапField = new ДоляУстКапЕГРЮЛТип();
                }
                return this.доляУстКапField;
            }
            set
            {
                this.доляУстКапField = value;
            }
        }

        /// <summary>
        /// Сведения о предусмотренном корпоративным договором объеме правомочий участника хозяйственного общества (количество голосов, приходящихся на долю участника хозяйственного общества непропорционально размеру этой доли)
        /// </summary>
        public СвОбъемПравТип СвОбъемПрав
        {
            get
            {
                if ((this.свОбъемПравField == null))
                {
                    this.свОбъемПравField = new СвОбъемПравТип();
                }
                return this.свОбъемПравField;
            }
            set
            {
                this.свОбъемПравField = value;
            }
        }

        /// <summary>
        /// Сведения об обременении доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
        public List<СвОбремТип> СвОбрем
        {
            get
            {
                if ((this.свОбремField == null))
                {
                    this.свОбремField = new List<СвОбремТип>();
                }
                return this.свОбремField;
            }
            set
            {
                this.свОбремField = value;
            }
        }

        /// <summary>
        /// Сведения об управлении залогом доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвУправЗал")]
        public List<СвУправЗалТип> СвУправЗал
        {
            get
            {
                if ((this.свУправЗалField == null))
                {
                    this.свУправЗалField = new List<СвУправЗалТип>();
                }
                return this.свУправЗалField;
            }
            set
            {
                this.свУправЗалField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрЮЛРос));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрЮЛРос object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрЮЛРос object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрЮЛРос object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрЮЛРос obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрЮЛРос);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрЮЛРос obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрЮЛРос Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрЮЛРос)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрЮЛРос object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрЮЛРос object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрЮЛРос object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрЮЛРос obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрЮЛРос);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрЮЛРос obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрЮЛРос obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрЮЛРос LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрЮЛРос LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о регистрации учредителя (участника) до 01.07.2002 г
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Регистрационный номер, присвоенный юридическому лицу до 1 июля 2002 года
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string РегНом { get; set; }

        /// <summary>
        /// Дата регистрации юридического лица до 1 июля 2002 года
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРег { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаРегSpecified { get; set; }

        /// <summary>
        /// Наименование органа, зарегистрировавшего юридическое лицо до 1 июля 2002 года
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимРО { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрЮЛРосСвРегСтарые LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об учредителе (участнике) - иностранном юридическом лице
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрЮЛИн
    {

        private ОгрДосСвТип огрДосСвField;

        private ГРНДатаТип гРНДатаПервField;

        private СвЮЛЕГРЮЛТип наимИННЮЛField;

        private СвНаимПолнТип свНаимЮЛПолнИнField;

        private СвРегИнЮЛЕГРЮЛТип свРегИнField;

        private List<СвНедДанУчрТип> свНедДанУчрField;

        private ДоляУстКапЕГРЮЛТип доляУстКапField;

        private СвОбъемПравТип свОбъемПравField;

        private List<СвОбремТип> свОбремField;

        private List<СвУправЗалТип> свУправЗалField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об ограничении доступа к сведениям об учредителе (участнике)
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Сведения о наименовании и ИНН юридического лица
        /// </summary>
        public СвЮЛЕГРЮЛТип НаимИННЮЛ
        {
            get
            {
                if ((this.наимИННЮЛField == null))
                {
                    this.наимИННЮЛField = new СвЮЛЕГРЮЛТип();
                }
                return this.наимИННЮЛField;
            }
            set
            {
                this.наимИННЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения о наименовании иностранного юридического лица в латинской транскрипции
        /// </summary>
        public СвНаимПолнТип СвНаимЮЛПолнИн
        {
            get
            {
                if ((this.свНаимЮЛПолнИнField == null))
                {
                    this.свНаимЮЛПолнИнField = new СвНаимПолнТип();
                }
                return this.свНаимЮЛПолнИнField;
            }
            set
            {
                this.свНаимЮЛПолнИнField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрации в стране происхождения
        /// </summary>
        public СвРегИнЮЛЕГРЮЛТип СвРегИн
        {
            get
            {
                if ((this.свРегИнField == null))
                {
                    this.свРегИнField = new СвРегИнЮЛЕГРЮЛТип();
                }
                return this.свРегИнField;
            }
            set
            {
                this.свРегИнField = value;
            }
        }

        /// <summary>
        /// Сведения о недостоверности данных об учредителе (участнике)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедДанУчр")]
        public List<СвНедДанУчрТип> СвНедДанУчр
        {
            get
            {
                if ((this.свНедДанУчрField == null))
                {
                    this.свНедДанУчрField = new List<СвНедДанУчрТип>();
                }
                return this.свНедДанУчрField;
            }
            set
            {
                this.свНедДанУчрField = value;
            }
        }

        /// <summary>
        /// Сведения о доле учредителя (участника)
        /// </summary>
        public ДоляУстКапЕГРЮЛТип ДоляУстКап
        {
            get
            {
                if ((this.доляУстКапField == null))
                {
                    this.доляУстКапField = new ДоляУстКапЕГРЮЛТип();
                }
                return this.доляУстКапField;
            }
            set
            {
                this.доляУстКапField = value;
            }
        }

        /// <summary>
        /// Сведения о предусмотренном корпоративным договором объеме правомочий участника хозяйственного общества (количество голосов, приходящихся на долю участника хозяйственного общества непропорционально размеру этой доли)
        /// </summary>
        public СвОбъемПравТип СвОбъемПрав
        {
            get
            {
                if ((this.свОбъемПравField == null))
                {
                    this.свОбъемПравField = new СвОбъемПравТип();
                }
                return this.свОбъемПравField;
            }
            set
            {
                this.свОбъемПравField = value;
            }
        }

        /// <summary>
        /// Сведения об обременении доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
        public List<СвОбремТип> СвОбрем
        {
            get
            {
                if ((this.свОбремField == null))
                {
                    this.свОбремField = new List<СвОбремТип>();
                }
                return this.свОбремField;
            }
            set
            {
                this.свОбремField = value;
            }
        }

        /// <summary>
        /// Сведения об управлении залогом доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвУправЗал")]
        public List<СвУправЗалТип> СвУправЗал
        {
            get
            {
                if ((this.свУправЗалField == null))
                {
                    this.свУправЗалField = new List<СвУправЗалТип>();
                }
                return this.свУправЗалField;
            }
            set
            {
                this.свУправЗалField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрЮЛИн));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрЮЛИн object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрЮЛИн object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрЮЛИн object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрЮЛИн obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрЮЛИн);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрЮЛИн obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрЮЛИн Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрЮЛИн)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрЮЛИн object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрЮЛИн object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрЮЛИн object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрЮЛИн obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрЮЛИн);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрЮЛИн obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрЮЛИн obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрЮЛИн LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрЮЛИн LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об учредителе (участнике) - физическом лице
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрФЛ
    {

        private ОгрДосСвТип огрДосСвField;

        private ГРНДатаТип гРНДатаПервField;

        private СвФЛЕГРЮЛТип свФЛField;

        private СвФИОЗАГСТип свФИОЗАГСField;

        private List<СвНедДанУчрТип> свНедДанУчрField;

        private СвПолФЛТип свПолФЛField;

        private СвРождЕГРЮЛТип свРождФЛField;

        private СвГраждТип свГраждФЛField;

        private УдЛичнЕГРЮЛТип удЛичнФЛField;

        private АдрРФЕГРЮЛТип адресМЖРФField;

        private АдрФИАСЕГРЮЛТип адрМЖФИАСField;

        private АдрИнЕГРЮЛТип адрМЖИнField;

        private ДоляУстКапЕГРЮЛТип доляУстКапField;

        private СвОбъемПравТип свОбъемПравField;

        private List<СвОбремТип> свОбремField;

        private List<СвУправЗалТип> свУправЗалField;

        private List<ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ> свДовУпрЮЛField;

        private List<ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ> свДовУпрФЛField;

        private List<ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл> лицоУпрНаслField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об ограничении доступа к сведениям об учредителе (участнике)
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Сведения о фамилии, имени, отчестве и ИНН физического лица
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ
        {
            get
            {
                if ((this.свФЛField == null))
                {
                    this.свФЛField = new СвФЛЕГРЮЛТип();
                }
                return this.свФЛField;
            }
            set
            {
                this.свФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о фамилии, имени, отчестве физического лица по данным ЗАГС
        /// </summary>
        public СвФИОЗАГСТип СвФИОЗАГС
        {
            get
            {
                if ((this.свФИОЗАГСField == null))
                {
                    this.свФИОЗАГСField = new СвФИОЗАГСТип();
                }
                return this.свФИОЗАГСField;
            }
            set
            {
                this.свФИОЗАГСField = value;
            }
        }

        /// <summary>
        /// Сведения о недостоверности данных об учредителе (участнике)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедДанУчр")]
        public List<СвНедДанУчрТип> СвНедДанУчр
        {
            get
            {
                if ((this.свНедДанУчрField == null))
                {
                    this.свНедДанУчрField = new List<СвНедДанУчрТип>();
                }
                return this.свНедДанУчрField;
            }
            set
            {
                this.свНедДанУчрField = value;
            }
        }

        /// <summary>
        /// Сведения о поле физического лица
        /// </summary>
        public СвПолФЛТип СвПолФЛ
        {
            get
            {
                if ((this.свПолФЛField == null))
                {
                    this.свПолФЛField = new СвПолФЛТип();
                }
                return this.свПолФЛField;
            }
            set
            {
                this.свПолФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о рождении физического лица
        /// </summary>
        public СвРождЕГРЮЛТип СвРождФЛ
        {
            get
            {
                if ((this.свРождФЛField == null))
                {
                    this.свРождФЛField = new СвРождЕГРЮЛТип();
                }
                return this.свРождФЛField;
            }
            set
            {
                this.свРождФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о гражданстве физического лица
        /// </summary>
        public СвГраждТип СвГраждФЛ
        {
            get
            {
                if ((this.свГраждФЛField == null))
                {
                    this.свГраждФЛField = new СвГраждТип();
                }
                return this.свГраждФЛField;
            }
            set
            {
                this.свГраждФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о документе, удостоверяющем личность
        /// </summary>
        public УдЛичнЕГРЮЛТип УдЛичнФЛ
        {
            get
            {
                if ((this.удЛичнФЛField == null))
                {
                    this.удЛичнФЛField = new УдЛичнЕГРЮЛТип();
                }
                return this.удЛичнФЛField;
            }
            set
            {
                this.удЛичнФЛField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации (в структуре КЛАДР)
        /// </summary>
        public АдрРФЕГРЮЛТип АдресМЖРФ
        {
            get
            {
                if ((this.адресМЖРФField == null))
                {
                    this.адресМЖРФField = new АдрРФЕГРЮЛТип();
                }
                return this.адресМЖРФField;
            }
            set
            {
                this.адресМЖРФField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации (в структуре ФИАС)
        /// </summary>
        public АдрФИАСЕГРЮЛТип АдрМЖФИАС
        {
            get
            {
                if ((this.адрМЖФИАСField == null))
                {
                    this.адрМЖФИАСField = new АдрФИАСЕГРЮЛТип();
                }
                return this.адрМЖФИАСField;
            }
            set
            {
                this.адрМЖФИАСField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места жительства за пределами территории Российской Федерации
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМЖИн
        {
            get
            {
                if ((this.адрМЖИнField == null))
                {
                    this.адрМЖИнField = new АдрИнЕГРЮЛТип();
                }
                return this.адрМЖИнField;
            }
            set
            {
                this.адрМЖИнField = value;
            }
        }

        /// <summary>
        /// Сведения о доле учредителя (участника)
        /// </summary>
        public ДоляУстКапЕГРЮЛТип ДоляУстКап
        {
            get
            {
                if ((this.доляУстКапField == null))
                {
                    this.доляУстКапField = new ДоляУстКапЕГРЮЛТип();
                }
                return this.доляУстКапField;
            }
            set
            {
                this.доляУстКапField = value;
            }
        }

        /// <summary>
        /// Сведения о предусмотренном корпоративным договором объеме правомочий участника хозяйственного общества (количество голосов, приходящихся на долю участника хозяйственного общества непропорционально размеру этой доли)
        /// </summary>
        public СвОбъемПравТип СвОбъемПрав
        {
            get
            {
                if ((this.свОбъемПравField == null))
                {
                    this.свОбъемПравField = new СвОбъемПравТип();
                }
                return this.свОбъемПравField;
            }
            set
            {
                this.свОбъемПравField = value;
            }
        }

        /// <summary>
        /// Сведения об обременении доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
        public List<СвОбремТип> СвОбрем
        {
            get
            {
                if ((this.свОбремField == null))
                {
                    this.свОбремField = new List<СвОбремТип>();
                }
                return this.свОбремField;
            }
            set
            {
                this.свОбремField = value;
            }
        }

        /// <summary>
        /// Сведения об управлении залогом доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвУправЗал")]
        public List<СвУправЗалТип> СвУправЗал
        {
            get
            {
                if ((this.свУправЗалField == null))
                {
                    this.свУправЗалField = new List<СвУправЗалТип>();
                }
                return this.свУправЗалField;
            }
            set
            {
                this.свУправЗалField = value;
            }
        }

        /// <summary>
        /// Сведения о доверительном управляющем - российском или иностранном юридическом лице
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвДовУпрЮЛ")]
        public List<ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ> СвДовУпрЮЛ
        {
            get
            {
                if ((this.свДовУпрЮЛField == null))
                {
                    this.свДовУпрЮЛField = new List<ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ>();
                }
                return this.свДовУпрЮЛField;
            }
            set
            {
                this.свДовУпрЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения о доверительном управляющем - физическом лице
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвДовУпрФЛ")]
        public List<ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ> СвДовУпрФЛ
        {
            get
            {
                if ((this.свДовУпрФЛField == null))
                {
                    this.свДовУпрФЛField = new List<ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ>();
                }
                return this.свДовУпрФЛField;
            }
            set
            {
                this.свДовУпрФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о физическом лице, осуществляющем управление долей, переходящей в порядке наследования
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ЛицоУпрНасл")]
        public List<ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл> ЛицоУпрНасл
        {
            get
            {
                if ((this.лицоУпрНаслField == null))
                {
                    this.лицоУпрНаслField = new List<ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл>();
                }
                return this.лицоУпрНаслField;
            }
            set
            {
                this.лицоУпрНаслField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрФЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрФЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрФЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрФЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрФЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрФЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрФЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрФЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрФЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о доверительном управляющем - российском или иностранном юридическом лице
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ
    {

        private ГРНДатаТип гРНДатаПервField;

        private СвЮЛЕГРЮЛТип наимИННДовУпрField;

        private СвНаимПолнТип свНаимЮЛПолнИнField;

        private СвРегИнЮЛЕГРЮЛТип свРегИнField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Дата открытия наследства (дата смерти участника)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаОткрНасл { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаОткрНаслSpecified { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Сведения о наименовании, ОГРН и ИНН юридического лица
        /// </summary>
        public СвЮЛЕГРЮЛТип НаимИННДовУпр
        {
            get
            {
                if ((this.наимИННДовУпрField == null))
                {
                    this.наимИННДовУпрField = new СвЮЛЕГРЮЛТип();
                }
                return this.наимИННДовУпрField;
            }
            set
            {
                this.наимИННДовУпрField = value;
            }
        }

        /// <summary>
        /// Сведения о наименовании иностранного юридического лица в латинской транскрипции
        /// </summary>
        public СвНаимПолнТип СвНаимЮЛПолнИн
        {
            get
            {
                if ((this.свНаимЮЛПолнИнField == null))
                {
                    this.свНаимЮЛПолнИнField = new СвНаимПолнТип();
                }
                return this.свНаимЮЛПолнИнField;
            }
            set
            {
                this.свНаимЮЛПолнИнField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрации иностранного юридического лица в стране происхождения
        /// </summary>
        public СвРегИнЮЛЕГРЮЛТип СвРегИн
        {
            get
            {
                if ((this.свРегИнField == null))
                {
                    this.свРегИнField = new СвРегИнЮЛЕГРЮЛТип();
                }
                return this.свРегИнField;
            }
            set
            {
                this.свРегИнField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о доверительном управляющем - физическом лице
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ
    {

        private ГРНДатаТип гРНДатаПервField;

        private СвФЛЕГРЮЛТип свФЛField;

        private СвПолФЛТип свПолФЛField;

        private СвРождЕГРЮЛТип свРождФЛField;

        private СвГраждТип свГраждФЛField;

        private УдЛичнЕГРЮЛТип удЛичнФЛField;

        private АдрРФЕГРЮЛТип адресМЖРФField;

        private АдрИнЕГРЮЛТип адрМЖИнField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Сведения о фамилии, имени, отчестве и ИНН физического лица
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ
        {
            get
            {
                if ((this.свФЛField == null))
                {
                    this.свФЛField = new СвФЛЕГРЮЛТип();
                }
                return this.свФЛField;
            }
            set
            {
                this.свФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о поле физического лица
        /// </summary>
        public СвПолФЛТип СвПолФЛ
        {
            get
            {
                if ((this.свПолФЛField == null))
                {
                    this.свПолФЛField = new СвПолФЛТип();
                }
                return this.свПолФЛField;
            }
            set
            {
                this.свПолФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о рождении физического лица
        /// </summary>
        public СвРождЕГРЮЛТип СвРождФЛ
        {
            get
            {
                if ((this.свРождФЛField == null))
                {
                    this.свРождФЛField = new СвРождЕГРЮЛТип();
                }
                return this.свРождФЛField;
            }
            set
            {
                this.свРождФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о гражданстве физического лица
        /// </summary>
        public СвГраждТип СвГраждФЛ
        {
            get
            {
                if ((this.свГраждФЛField == null))
                {
                    this.свГраждФЛField = new СвГраждТип();
                }
                return this.свГраждФЛField;
            }
            set
            {
                this.свГраждФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о документе, удостоверяющем личность физического лица
        /// </summary>
        public УдЛичнЕГРЮЛТип УдЛичнФЛ
        {
            get
            {
                if ((this.удЛичнФЛField == null))
                {
                    this.удЛичнФЛField = new УдЛичнЕГРЮЛТип();
                }
                return this.удЛичнФЛField;
            }
            set
            {
                this.удЛичнФЛField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации (в структуре КЛАДР)
        /// </summary>
        public АдрРФЕГРЮЛТип АдресМЖРФ
        {
            get
            {
                if ((this.адресМЖРФField == null))
                {
                    this.адресМЖРФField = new АдрРФЕГРЮЛТип();
                }
                return this.адресМЖРФField;
            }
            set
            {
                this.адресМЖРФField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места жительства за пределами территории Российской Федерации
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМЖИн
        {
            get
            {
                if ((this.адрМЖИнField == null))
                {
                    this.адрМЖИнField = new АдрИнЕГРЮЛТип();
                }
                return this.адрМЖИнField;
            }
            set
            {
                this.адрМЖИнField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрФЛСвДовУпрФЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о физическом лице, осуществляющем управление долей, переходящей в порядке наследования
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл
    {

        private ГРНДатаТип гРНДатаПервField;

        private СвФЛЕГРЮЛТип свФЛField;

        private СвПолФЛТип свПолФЛField;

        private СвРождЕГРЮЛТип свРождФЛField;

        private СвГраждТип свГраждФЛField;

        private УдЛичнЕГРЮЛТип удЛичнФЛField;

        private АдрРФЕГРЮЛТип адресМЖРФField;

        private АдрИнЕГРЮЛТип адрМЖИнField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Дата открытия наследства (дата смерти участника)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаОткрНасл { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Сведения о фамилии, имени, отчестве и ИНН физического лица
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ
        {
            get
            {
                if ((this.свФЛField == null))
                {
                    this.свФЛField = new СвФЛЕГРЮЛТип();
                }
                return this.свФЛField;
            }
            set
            {
                this.свФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о поле физического лица
        /// </summary>
        public СвПолФЛТип СвПолФЛ
        {
            get
            {
                if ((this.свПолФЛField == null))
                {
                    this.свПолФЛField = new СвПолФЛТип();
                }
                return this.свПолФЛField;
            }
            set
            {
                this.свПолФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о рождении физического лица
        /// </summary>
        public СвРождЕГРЮЛТип СвРождФЛ
        {
            get
            {
                if ((this.свРождФЛField == null))
                {
                    this.свРождФЛField = new СвРождЕГРЮЛТип();
                }
                return this.свРождФЛField;
            }
            set
            {
                this.свРождФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о гражданстве физического лица
        /// </summary>
        public СвГраждТип СвГраждФЛ
        {
            get
            {
                if ((this.свГраждФЛField == null))
                {
                    this.свГраждФЛField = new СвГраждТип();
                }
                return this.свГраждФЛField;
            }
            set
            {
                this.свГраждФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о документе, удостоверяющем личность физического лица
        /// </summary>
        public УдЛичнЕГРЮЛТип УдЛичнФЛ
        {
            get
            {
                if ((this.удЛичнФЛField == null))
                {
                    this.удЛичнФЛField = new УдЛичнЕГРЮЛТип();
                }
                return this.удЛичнФЛField;
            }
            set
            {
                this.удЛичнФЛField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации (в структуре КЛАДР)
        /// </summary>
        public АдрРФЕГРЮЛТип АдресМЖРФ
        {
            get
            {
                if ((this.адресМЖРФField == null))
                {
                    this.адресМЖРФField = new АдрРФЕГРЮЛТип();
                }
                return this.адресМЖРФField;
            }
            set
            {
                this.адресМЖРФField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места жительства за пределами территории Российской Федерации
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМЖИн
        {
            get
            {
                if ((this.адрМЖИнField == null))
                {
                    this.адрМЖИнField = new АдрИнЕГРЮЛТип();
                }
                return this.адрМЖИнField;
            }
            set
            {
                this.адрМЖИнField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрФЛЛицоУпрНасл LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об учредителе (участнике) - Российской Федерации, субъекте Российской Федерации, муниципальном образовании
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрРФСубМО
    {

        private ОгрДосСвТип огрДосСвField;

        private ГРНДатаТип гРНДатаПервField;

        private ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр видНаимУчрField;

        private List<СвНедДанУчрТип> свНедДанУчрField;

        private ДоляУстКапЕГРЮЛТип доляУстКапField;

        private СвОбъемПравТип свОбъемПравField;

        private List<ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр> свОргОсущПрField;

        private List<ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр> свФЛОсущПрField;

        private List<СвОбремТип> свОбремField;

        private List<СвУправЗалТип> свУправЗалField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об ограничении доступа к сведениям об учредителе (участнике)
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Сведения о виде учредителя (участника) и наименовании муниципального образования и региона
        /// </summary>
        public ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр ВидНаимУчр
        {
            get
            {
                if ((this.видНаимУчрField == null))
                {
                    this.видНаимУчрField = new ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр();
                }
                return this.видНаимУчрField;
            }
            set
            {
                this.видНаимУчрField = value;
            }
        }

        /// <summary>
        /// Сведения о недостоверности данных об учредителе (участнике)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедДанУчр")]
        public List<СвНедДанУчрТип> СвНедДанУчр
        {
            get
            {
                if ((this.свНедДанУчрField == null))
                {
                    this.свНедДанУчрField = new List<СвНедДанУчрТип>();
                }
                return this.свНедДанУчрField;
            }
            set
            {
                this.свНедДанУчрField = value;
            }
        }

        /// <summary>
        /// Сведения о доле учредителя (участника)
        /// </summary>
        public ДоляУстКапЕГРЮЛТип ДоляУстКап
        {
            get
            {
                if ((this.доляУстКапField == null))
                {
                    this.доляУстКапField = new ДоляУстКапЕГРЮЛТип();
                }
                return this.доляУстКапField;
            }
            set
            {
                this.доляУстКапField = value;
            }
        }

        /// <summary>
        /// Сведения о предусмотренном корпоративным договором объеме правомочий участника хозяйственного общества (количество голосов, приходящихся на долю участника хозяйственного общества непропорционально размеру этой доли)
        /// </summary>
        public СвОбъемПравТип СвОбъемПрав
        {
            get
            {
                if ((this.свОбъемПравField == null))
                {
                    this.свОбъемПравField = new СвОбъемПравТип();
                }
                return this.свОбъемПравField;
            }
            set
            {
                this.свОбъемПравField = value;
            }
        }

        /// <summary>
        /// Сведения об органе государственной власти, органе местного самоуправления или о юридическом лице, осуществляющем права учредителя (участника)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОргОсущПр")]
        public List<ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр> СвОргОсущПр
        {
            get
            {
                if ((this.свОргОсущПрField == null))
                {
                    this.свОргОсущПрField = new List<ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр>();
                }
                return this.свОргОсущПрField;
            }
            set
            {
                this.свОргОсущПрField = value;
            }
        }

        /// <summary>
        /// Сведения о физическом лице, осуществляющем права учредителя (участника)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвФЛОсущПр")]
        public List<ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр> СвФЛОсущПр
        {
            get
            {
                if ((this.свФЛОсущПрField == null))
                {
                    this.свФЛОсущПрField = new List<ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр>();
                }
                return this.свФЛОсущПрField;
            }
            set
            {
                this.свФЛОсущПрField = value;
            }
        }

        /// <summary>
        /// Сведения об обременении доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
        public List<СвОбремТип> СвОбрем
        {
            get
            {
                if ((this.свОбремField == null))
                {
                    this.свОбремField = new List<СвОбремТип>();
                }
                return this.свОбремField;
            }
            set
            {
                this.свОбремField = value;
            }
        }

        /// <summary>
        /// Сведения об управлении залогом доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвУправЗал")]
        public List<СвУправЗалТип> СвУправЗал
        {
            get
            {
                if ((this.свУправЗалField == null))
                {
                    this.свУправЗалField = new List<СвУправЗалТип>();
                }
                return this.свУправЗалField;
            }
            set
            {
                this.свУправЗалField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрРФСубМО));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрРФСубМО object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрРФСубМО object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрРФСубМО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрРФСубМО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрРФСубМО);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрРФСубМО obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрРФСубМО Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрРФСубМО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрРФСубМО object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрРФСубМО object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрРФСубМО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрРФСубМО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрРФСубМО);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрРФСубМО obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрРФСубМО obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрРФСубМО LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрРФСубМО LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о виде учредителя (участника) и наименовании муниципального образования и региона
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код вида учредителя
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчрКодУчрРФСубМО КодУчрРФСубМО { get; set; }

        /// <summary>
        /// Наименование муниципального образования
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимМО { get; set; }

        /// <summary>
        /// Код субъекта Российской Федерации, который является учредителем (участником) юридического лица или на территории которого находится муниципальное образование, которое является учредителем (участником) юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодРегион { get; set; }

        /// <summary>
        /// Наименование субъекта Российской Федерации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимРегион { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчр LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлДокументСвЮЛСвУчредитУчрРФСубМОВидНаимУчрКодУчрРФСубМО
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    /// <summary>
    /// Сведения об органе государственной власти, органе местного самоуправления или о юридическом лице, осуществляющем права учредителя (участника)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр
    {

        private ГРНДатаТип гРНДатаПервField;

        private СвЮЛЕГРЮЛТип наимИННЮЛField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Сведения о наименовании, ОГРН и ИНН органа государственной власти, органа местного самоуправления или юридического лица
        /// </summary>
        public СвЮЛЕГРЮЛТип НаимИННЮЛ
        {
            get
            {
                if ((this.наимИННЮЛField == null))
                {
                    this.наимИННЮЛField = new СвЮЛЕГРЮЛТип();
                }
                return this.наимИННЮЛField;
            }
            set
            {
                this.наимИННЮЛField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвОргОсущПр LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о физическом лице, осуществляющем права учредителя (участника)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр
    {

        private ГРНДатаТип гРНДатаПервField;

        private СвФЛЕГРЮЛТип свФЛField;

        private СвРождЕГРЮЛТип свРождФЛField;

        private УдЛичнЕГРЮЛТип удЛичнФЛField;

        private АдрРФЕГРЮЛТип адресМЖРФField;

        private АдрИнЕГРЮЛТип адрМЖИнField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Сведения о фамилии, имени, отчестве и ИНН физического лица
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ
        {
            get
            {
                if ((this.свФЛField == null))
                {
                    this.свФЛField = new СвФЛЕГРЮЛТип();
                }
                return this.свФЛField;
            }
            set
            {
                this.свФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о рождении физического лица
        /// </summary>
        public СвРождЕГРЮЛТип СвРождФЛ
        {
            get
            {
                if ((this.свРождФЛField == null))
                {
                    this.свРождФЛField = new СвРождЕГРЮЛТип();
                }
                return this.свРождФЛField;
            }
            set
            {
                this.свРождФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о документе, удостоверяющем личность физического лица
        /// </summary>
        public УдЛичнЕГРЮЛТип УдЛичнФЛ
        {
            get
            {
                if ((this.удЛичнФЛField == null))
                {
                    this.удЛичнФЛField = new УдЛичнЕГРЮЛТип();
                }
                return this.удЛичнФЛField;
            }
            set
            {
                this.удЛичнФЛField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации (в структуре КЛАДР)
        /// </summary>
        public АдрРФЕГРЮЛТип АдресМЖРФ
        {
            get
            {
                if ((this.адресМЖРФField == null))
                {
                    this.адресМЖРФField = new АдрРФЕГРЮЛТип();
                }
                return this.адресМЖРФField;
            }
            set
            {
                this.адресМЖРФField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места жительства за пределами территории Российской Федерации
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМЖИн
        {
            get
            {
                if ((this.адрМЖИнField == null))
                {
                    this.адрМЖИнField = new АдрИнЕГРЮЛТип();
                }
                return this.адрМЖИнField;
            }
            set
            {
                this.адрМЖИнField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрРФСубМОСвФЛОсущПр LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о паевом инвестиционном фонде, в состав имущества которого включена доля в уставном капитале
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрПИФ
    {

        private ОгрДосСвТип огрДосСвField;

        private ГРНДатаТип гРНДатаПервField;

        private ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ свНаимПИФField;

        private List<СвНедДанУчрТип> свНедДанУчрField;

        private ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ свУпрКомпПИФField;

        private ДоляУстКапЕГРЮЛТип доляУстКапField;

        private СвОбъемПравТип свОбъемПравField;

        private List<СвОбремТип> свОбремField;

        private List<СвУправЗалТип> свУправЗалField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об ограничении доступа к сведениям об учредителе (участнике)
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Сведения о названии (индивидуальном обозначении) паевого инвестиционного фонда
        /// </summary>
        public ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ СвНаимПИФ
        {
            get
            {
                if ((this.свНаимПИФField == null))
                {
                    this.свНаимПИФField = new ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ();
                }
                return this.свНаимПИФField;
            }
            set
            {
                this.свНаимПИФField = value;
            }
        }

        /// <summary>
        /// Сведения о недостоверности данных об учредителе (участнике)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедДанУчр")]
        public List<СвНедДанУчрТип> СвНедДанУчр
        {
            get
            {
                if ((this.свНедДанУчрField == null))
                {
                    this.свНедДанУчрField = new List<СвНедДанУчрТип>();
                }
                return this.свНедДанУчрField;
            }
            set
            {
                this.свНедДанУчрField = value;
            }
        }

        /// <summary>
        /// Сведения об управляющей компании паевого инвестиционного фонда
        /// </summary>
        public ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ СвУпрКомпПИФ
        {
            get
            {
                if ((this.свУпрКомпПИФField == null))
                {
                    this.свУпрКомпПИФField = new ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ();
                }
                return this.свУпрКомпПИФField;
            }
            set
            {
                this.свУпрКомпПИФField = value;
            }
        }

        /// <summary>
        /// Сведения о доле учредителя (участника)
        /// </summary>
        public ДоляУстКапЕГРЮЛТип ДоляУстКап
        {
            get
            {
                if ((this.доляУстКапField == null))
                {
                    this.доляУстКапField = new ДоляУстКапЕГРЮЛТип();
                }
                return this.доляУстКапField;
            }
            set
            {
                this.доляУстКапField = value;
            }
        }

        /// <summary>
        /// Сведения о предусмотренном корпоративным договором объеме правомочий участника хозяйственного общества (количество голосов, приходящихся на долю участника хозяйственного общества непропорционально размеру этой доли)
        /// </summary>
        public СвОбъемПравТип СвОбъемПрав
        {
            get
            {
                if ((this.свОбъемПравField == null))
                {
                    this.свОбъемПравField = new СвОбъемПравТип();
                }
                return this.свОбъемПравField;
            }
            set
            {
                this.свОбъемПравField = value;
            }
        }

        /// <summary>
        /// Сведения об обременении доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
        public List<СвОбремТип> СвОбрем
        {
            get
            {
                if ((this.свОбремField == null))
                {
                    this.свОбремField = new List<СвОбремТип>();
                }
                return this.свОбремField;
            }
            set
            {
                this.свОбремField = value;
            }
        }

        /// <summary>
        /// Сведения об управлении залогом доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвУправЗал")]
        public List<СвУправЗалТип> СвУправЗал
        {
            get
            {
                if ((this.свУправЗалField == null))
                {
                    this.свУправЗалField = new List<СвУправЗалТип>();
                }
                return this.свУправЗалField;
            }
            set
            {
                this.свУправЗалField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрПИФ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрПИФ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрПИФ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрПИФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрПИФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрПИФ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрПИФ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрПИФ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрПИФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрПИФ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрПИФ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрПИФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрПИФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрПИФ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрПИФ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрПИФ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрПИФ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрПИФ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о названии (индивидуальном обозначении) паевого инвестиционного фонда
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Название (индивидуальное обозначение) паевого инвестиционного фонда
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимПИФ { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрПИФСвНаимПИФ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об управляющей компании паевого инвестиционного фонда
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ
    {

        private ГРНДатаТип гРНДатаПервField;

        private СвЮЛЕГРЮЛТип упрКомпПифField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Наименование и (при наличии) ОГРН и ИНН управляющей компании паевого инвестиционного фонда
        /// </summary>
        public СвЮЛЕГРЮЛТип УпрКомпПиф
        {
            get
            {
                if ((this.упрКомпПифField == null))
                {
                    this.упрКомпПифField = new СвЮЛЕГРЮЛТип();
                }
                return this.упрКомпПифField;
            }
            set
            {
                this.упрКомпПифField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрПИФСвУпрКомпПИФ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о включении доли в уставном / складочном капитале создаваемого юридического лица в состав общего имущества участников договора инвестиционного товарищества
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрДогИнвТов
    {

        private ОгрДосСвТип огрДосСвField;

        private ГРНДатаТип гРНДатаПервField;

        private ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов инПрДогИнвТовField;

        private СвЮЛЕГРЮЛТип свУпТовЮЛField;

        private ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ свУпТовИнЮЛField;

        private List<СвНедДанУчрТип> свНедДанУчрField;

        private ДоляУстКапЕГРЮЛТип доляУстКапField;

        private СвОбъемПравТип свОбъемПравField;

        private List<СвОбремТип> свОбремField;

        private List<СвУправЗалТип> свУправЗалField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об ограничении доступа к сведениям об учредителе (участнике)
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Индивидуальные признаки договора инвестиционного товарищества
        /// </summary>
        public ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов ИнПрДогИнвТов
        {
            get
            {
                if ((this.инПрДогИнвТовField == null))
                {
                    this.инПрДогИнвТовField = new ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов();
                }
                return this.инПрДогИнвТовField;
            }
            set
            {
                this.инПрДогИнвТовField = value;
            }
        }

        /// <summary>
        /// Сведения об уполномоченном управляющем товарище - российском юридическом лице
        /// </summary>
        public СвЮЛЕГРЮЛТип СвУпТовЮЛ
        {
            get
            {
                if ((this.свУпТовЮЛField == null))
                {
                    this.свУпТовЮЛField = new СвЮЛЕГРЮЛТип();
                }
                return this.свУпТовЮЛField;
            }
            set
            {
                this.свУпТовЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения об уполномоченном управляющем товарище - иностранном юридическом лице
        /// </summary>
        public ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ СвУпТовИнЮЛ
        {
            get
            {
                if ((this.свУпТовИнЮЛField == null))
                {
                    this.свУпТовИнЮЛField = new ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ();
                }
                return this.свУпТовИнЮЛField;
            }
            set
            {
                this.свУпТовИнЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения о недостоверности данных об учредителе (участнике)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвНедДанУчр")]
        public List<СвНедДанУчрТип> СвНедДанУчр
        {
            get
            {
                if ((this.свНедДанУчрField == null))
                {
                    this.свНедДанУчрField = new List<СвНедДанУчрТип>();
                }
                return this.свНедДанУчрField;
            }
            set
            {
                this.свНедДанУчрField = value;
            }
        }

        /// <summary>
        /// Сведения о доле учредителя (участника)
        /// </summary>
        public ДоляУстКапЕГРЮЛТип ДоляУстКап
        {
            get
            {
                if ((this.доляУстКапField == null))
                {
                    this.доляУстКапField = new ДоляУстКапЕГРЮЛТип();
                }
                return this.доляУстКапField;
            }
            set
            {
                this.доляУстКапField = value;
            }
        }

        /// <summary>
        /// Сведения о предусмотренном корпоративным договором объеме правомочий участника хозяйственного общества (количество голосов, приходящихся на долю участника хозяйственного общества непропорционально размеру этой доли)
        /// </summary>
        public СвОбъемПравТип СвОбъемПрав
        {
            get
            {
                if ((this.свОбъемПравField == null))
                {
                    this.свОбъемПравField = new СвОбъемПравТип();
                }
                return this.свОбъемПравField;
            }
            set
            {
                this.свОбъемПравField = value;
            }
        }

        /// <summary>
        /// Сведения об обременении доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
        public List<СвОбремТип> СвОбрем
        {
            get
            {
                if ((this.свОбремField == null))
                {
                    this.свОбремField = new List<СвОбремТип>();
                }
                return this.свОбремField;
            }
            set
            {
                this.свОбремField = value;
            }
        }

        /// <summary>
        /// Сведения об управлении залогом доли участника
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвУправЗал")]
        public List<СвУправЗалТип> СвУправЗал
        {
            get
            {
                if ((this.свУправЗалField == null))
                {
                    this.свУправЗалField = new List<СвУправЗалТип>();
                }
                return this.свУправЗалField;
            }
            set
            {
                this.свУправЗалField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрДогИнвТов));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрДогИнвТов object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрДогИнвТов object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрДогИнвТов object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрДогИнвТов obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрДогИнвТов);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрДогИнвТов obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрДогИнвТов Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрДогИнвТов)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрДогИнвТов object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрДогИнвТов object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрДогИнвТов object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрДогИнвТов obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрДогИнвТов);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрДогИнвТов obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрДогИнвТов obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрДогИнвТов LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрДогИнвТов LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Индивидуальные признаки договора инвестиционного товарищества
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов
    {

        private ФИОТип фИОНотариусField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Наименование договора
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимДог { get; set; }

        /// <summary>
        /// Регистрационный номер договора в реестре нотариальных действий
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомерДог { get; set; }

        /// <summary>
        /// Дата нотариального удостоверения договора
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime Дата { get; set; }


        /// <summary>
        /// Фамилия, имя, отчество нотариуса, удостоверившего договор
        /// </summary>
        public ФИОТип ФИОНотариус
        {
            get
            {
                if ((this.фИОНотариусField == null))
                {
                    this.фИОНотариусField = new ФИОТип();
                }
                return this.фИОНотариусField;
            }
            set
            {
                this.фИОНотариусField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрДогИнвТовИнПрДогИнвТов LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об уполномоченном управляющем товарище - иностранном юридическом лице
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ
    {

        private СвЮЛЕГРЮЛТип наимИННЮЛField;

        private СвРегИнЮЛЕГРЮЛТип свРегИнField;

        private СвНаимПредЮЛТип свПредЮЛField;

        private СвАкРАФПТип свАкРАФПField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об ИНН и наименовании иностранного юридического лица
        /// </summary>
        public СвЮЛЕГРЮЛТип НаимИННЮЛ
        {
            get
            {
                if ((this.наимИННЮЛField == null))
                {
                    this.наимИННЮЛField = new СвЮЛЕГРЮЛТип();
                }
                return this.наимИННЮЛField;
            }
            set
            {
                this.наимИННЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрации иностранного юридического лица в стране происхождения
        /// </summary>
        public СвРегИнЮЛЕГРЮЛТип СвРегИн
        {
            get
            {
                if ((this.свРегИнField == null))
                {
                    this.свРегИнField = new СвРегИнЮЛЕГРЮЛТип();
                }
                return this.свРегИнField;
            }
            set
            {
                this.свРегИнField = value;
            }
        }

        /// <summary>
        /// Сведения о наименовании представительства или филиала в Российской Федерации, через которое иностранное юридическое лицо осуществляет полномочия управляющей организации
        /// </summary>
        public СвНаимПредЮЛТип СвПредЮЛ
        {
            get
            {
                if ((this.свПредЮЛField == null))
                {
                    this.свПредЮЛField = new СвНаимПредЮЛТип();
                }
                return this.свПредЮЛField;
            }
            set
            {
                this.свПредЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения об аккредитации представительства или филиала в Российской Федерации, через которое иностранное юридическое лицо осуществляет полномочия управляющей организации
        /// </summary>
        public СвАкРАФПТип СвАкРАФП
        {
            get
            {
                if ((this.свАкРАФПField == null))
                {
                    this.свАкРАФПField = new СвАкРАФПТип();
                }
                return this.свАкРАФПField;
            }
            set
            {
                this.свАкРАФПField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвУчредитУчрДогИнвТовСвУпТовИнЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о доле в уставном капитале общества с ограниченной ответственностью, принадлежащей обществу
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвДоляООО
    {

        private ДробьТип доляРубляField;

        private ФайлДокументСвЮЛСвДоляОООРазмерДоли размерДолиField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private List<СвОбремТип> свОбремField;

        private List<СвУправЗалТип> свУправЗалField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Номинальная стоимость доли в рублях
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal НоминСтоим { get; set; }


        /// <summary>
        /// Доля рубля в виде простой дроби в номинальной стоимости доли
        /// </summary>
        public ДробьТип ДоляРубля
        {
            get
            {
                if ((this.доляРубляField == null))
                {
                    this.доляРубляField = new ДробьТип();
                }
                return this.доляРубляField;
            }
            set
            {
                this.доляРубляField = value;
            }
        }

        /// <summary>
        /// Размер доли (в процентах или в виде дроби - десятичной или простой)
        /// </summary>
        public ФайлДокументСвЮЛСвДоляОООРазмерДоли РазмерДоли
        {
            get
            {
                if ((this.размерДолиField == null))
                {
                    this.размерДолиField = new ФайлДокументСвЮЛСвДоляОООРазмерДоли();
                }
                return this.размерДолиField;
            }
            set
            {
                this.размерДолиField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        /// <summary>
        /// Сведения об обременении доли общества
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОбрем")]
        public List<СвОбремТип> СвОбрем
        {
            get
            {
                if ((this.свОбремField == null))
                {
                    this.свОбремField = new List<СвОбремТип>();
                }
                return this.свОбремField;
            }
            set
            {
                this.свОбремField = value;
            }
        }

        /// <summary>
        /// Сведения об управлении залогом доли принадлежащей обществу
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвУправЗал")]
        public List<СвУправЗалТип> СвУправЗал
        {
            get
            {
                if ((this.свУправЗалField == null))
                {
                    this.свУправЗалField = new List<СвУправЗалТип>();
                }
                return this.свУправЗалField;
            }
            set
            {
                this.свУправЗалField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвДоляООО));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвДоляООО object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвДоляООО object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвДоляООО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвДоляООО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвДоляООО);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвДоляООО obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвДоляООО Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвДоляООО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвДоляООО object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвДоляООО object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвДоляООО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвДоляООО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвДоляООО);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвДоляООО obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвДоляООО obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвДоляООО LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвДоляООО LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Размер доли (в процентах или в виде дроби - десятичной или простой)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвДоляОООРазмерДоли
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ДробДесят", typeof(decimal))]
        [System.Xml.Serialization.XmlElementAttribute("ДробПрост", typeof(ДробьТип))]
        [System.Xml.Serialization.XmlElementAttribute("Процент", typeof(decimal))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public object Item { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType1 ItemElementName { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвДоляОООРазмерДоли));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвДоляОООРазмерДоли object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвДоляОООРазмерДоли object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвДоляОООРазмерДоли object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвДоляОООРазмерДоли obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвДоляОООРазмерДоли);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвДоляОООРазмерДоли obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвДоляОООРазмерДоли Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвДоляОООРазмерДоли)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвДоляОООРазмерДоли object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвДоляОООРазмерДоли object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвДоляОООРазмерДоли object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвДоляОООРазмерДоли obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвДоляОООРазмерДоли);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвДоляОООРазмерДоли obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвДоляОООРазмерДоли obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвДоляОООРазмерДоли LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвДоляОООРазмерДоли LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema = false)]
    public enum ItemChoiceType1
    {

        /// <remarks/>
        ДробДесят,

        /// <remarks/>
        ДробПрост,

        /// <remarks/>
        Процент,
    }

    /// <summary>
    /// Сведения о держателе реестра акционеров акционерного общества
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвДержРеестрАО
    {

        private ОгрДосСвТип огрДосСвField;

        private ГРНДатаТип гРНДатаПервField;

        private СвЮЛЕГРЮЛТип держРеестрАОField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об ограничении доступа к сведениям о держателе реестра акционеров акционерного общества
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном лице
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Наименование, ОГРН и ИНН держателя реестра акционеров акционерного общества
        /// </summary>
        public СвЮЛЕГРЮЛТип ДержРеестрАО
        {
            get
            {
                if ((this.держРеестрАОField == null))
                {
                    this.держРеестрАОField = new СвЮЛЕГРЮЛТип();
                }
                return this.держРеестрАОField;
            }
            set
            {
                this.держРеестрАОField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвДержРеестрАО));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвДержРеестрАО object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвДержРеестрАО object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвДержРеестрАО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвДержРеестрАО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвДержРеестрАО);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвДержРеестрАО obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвДержРеестрАО Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвДержРеестрАО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвДержРеестрАО object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвДержРеестрАО object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвДержРеестрАО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвДержРеестрАО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвДержРеестрАО);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвДержРеестрАО obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвДержРеестрАО obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвДержРеестрАО LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвДержРеестрАО LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о видах экономической деятельности по Общероссийскому классификатору видов экономической деятельности
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвОКВЭД
    {

        private СвОКВЭДТип свОКВЭДОснField;

        private List<СвОКВЭДТип> свОКВЭДДопField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об основном виде деятельности
        /// </summary>
        public СвОКВЭДТип СвОКВЭДОсн
        {
            get
            {
                if ((this.свОКВЭДОснField == null))
                {
                    this.свОКВЭДОснField = new СвОКВЭДТип();
                }
                return this.свОКВЭДОснField;
            }
            set
            {
                this.свОКВЭДОснField = value;
            }
        }

        /// <summary>
        /// Сведения о дополнительном виде деятельности
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОКВЭДДоп")]
        public List<СвОКВЭДТип> СвОКВЭДДоп
        {
            get
            {
                if ((this.свОКВЭДДопField == null))
                {
                    this.свОКВЭДДопField = new List<СвОКВЭДТип>();
                }
                return this.свОКВЭДДопField;
            }
            set
            {
                this.свОКВЭДДопField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвОКВЭД));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвОКВЭД object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвОКВЭД object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвОКВЭД object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвОКВЭД obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвОКВЭД);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвОКВЭД obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвОКВЭД Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвОКВЭД)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвОКВЭД object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвОКВЭД object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвОКВЭД object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвОКВЭД obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвОКВЭД);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвОКВЭД obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвОКВЭД obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвОКВЭД LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвОКВЭД LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о лицензиях, выданных юридическому лицу
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвЛицензия
    {

        private ОгрДосСвТип огрДосСвField;

        private List<string> наимЛицВидДеятField;

        private List<string> местоДейстЛицField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private ФайлДокументСвЮЛСвЛицензияСвПриостЛиц свПриостЛицField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Наименование лицензирующего органа, выдавшего или переоформившего лицензию
        /// </summary>
        public string ЛицОргВыдЛиц { get; set; }

        /// <summary>
        /// Серия и номер лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомЛиц { get; set; }

        /// <summary>
        /// Дата лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаЛиц { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаЛицSpecified { get; set; }

        /// <summary>
        /// Дата начала действия лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаНачЛиц { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаНачЛицSpecified { get; set; }

        /// <summary>
        /// Дата окончания действия лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаОкончЛиц { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаОкончЛицSpecified { get; set; }


        /// <summary>
        /// Сведения об ограничении доступа к сведениям о лицензии
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// Наименование лицензируемого вида деятельности, на который выдана лицензия
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("НаимЛицВидДеят")]
        public List<string> НаимЛицВидДеят
        {
            get
            {
                if ((this.наимЛицВидДеятField == null))
                {
                    this.наимЛицВидДеятField = new List<string>();
                }
                return this.наимЛицВидДеятField;
            }
            set
            {
                this.наимЛицВидДеятField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места осуществления лицензируемого вида деятельности
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("МестоДейстЛиц")]
        public List<string> МестоДейстЛиц
        {
            get
            {
                if ((this.местоДейстЛицField == null))
                {
                    this.местоДейстЛицField = new List<string>();
                }
                return this.местоДейстЛицField;
            }
            set
            {
                this.местоДейстЛицField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        /// <summary>
        /// Сведения о приостановлении действия лицензии
        /// </summary>
        public ФайлДокументСвЮЛСвЛицензияСвПриостЛиц СвПриостЛиц
        {
            get
            {
                if ((this.свПриостЛицField == null))
                {
                    this.свПриостЛицField = new ФайлДокументСвЮЛСвЛицензияСвПриостЛиц();
                }
                return this.свПриостЛицField;
            }
            set
            {
                this.свПриостЛицField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвЛицензия));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЛицензия object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвЛицензия object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЛицензия object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЛицензия obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЛицензия);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЛицензия obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЛицензия Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвЛицензия)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЛицензия object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвЛицензия object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЛицензия object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвЛицензия obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЛицензия);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЛицензия obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЛицензия obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЛицензия LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвЛицензия LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о приостановлении действия лицензии
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвЛицензияСвПриостЛиц
    {

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Дата приостановления действия лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаПриостЛиц { get; set; }

        /// <summary>
        /// Наименование лицензирующего органа, приостановившего действие лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ЛицОргПриостЛиц { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвЛицензияСвПриостЛиц));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЛицензияСвПриостЛиц object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвЛицензияСвПриостЛиц object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЛицензияСвПриостЛиц object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЛицензияСвПриостЛиц obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЛицензияСвПриостЛиц);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЛицензияСвПриостЛиц obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЛицензияСвПриостЛиц Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвЛицензияСвПриостЛиц)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЛицензияСвПриостЛиц object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвЛицензияСвПриостЛиц object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЛицензияСвПриостЛиц object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвЛицензияСвПриостЛиц obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЛицензияСвПриостЛиц);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЛицензияСвПриостЛиц obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЛицензияСвПриостЛиц obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЛицензияСвПриостЛиц LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвЛицензияСвПриостЛиц LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о филиалах и представительствах  юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвПодразд
    {

        private List<ФайлДокументСвЮЛСвПодраздСвФилиал> свФилиалField;

        private List<ФайлДокументСвЮЛСвПодраздСвПредстав> свПредставField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения о филиалах юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвФилиал")]
        public List<ФайлДокументСвЮЛСвПодраздСвФилиал> СвФилиал
        {
            get
            {
                if ((this.свФилиалField == null))
                {
                    this.свФилиалField = new List<ФайлДокументСвЮЛСвПодраздСвФилиал>();
                }
                return this.свФилиалField;
            }
            set
            {
                this.свФилиалField = value;
            }
        }

        /// <summary>
        /// Сведения о представительствах юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвПредстав")]
        public List<ФайлДокументСвЮЛСвПодраздСвПредстав> СвПредстав
        {
            get
            {
                if ((this.свПредставField == null))
                {
                    this.свПредставField = new List<ФайлДокументСвЮЛСвПодраздСвПредстав>();
                }
                return this.свПредставField;
            }
            set
            {
                this.свПредставField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвПодразд));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПодразд object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвПодразд object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПодразд object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПодразд obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПодразд);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПодразд obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПодразд Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвПодразд)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПодразд object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвПодразд object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПодразд object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвПодразд obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПодразд);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПодразд obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПодразд obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПодразд LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвПодразд LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о филиалах юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвПодраздСвФилиал
    {

        private ОгрДосСвТип огрДосСвField;

        private ГРНДатаТип гРНДатаПервField;

        private СвНаимПолнТип свНаимField;

        private АдрРФЕГРЮЛТип адрМНРФField;

        private АдрФИАСЕГРЮЛТип адрМНФИАСField;

        private АдрИнЕГРЮЛТип адрМНИнField;

        private СвУчетНОПодраздТип свУчетНОФилиалField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об ограничении доступа к сведениям о филиале юридического лица
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном филиале
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Сведения о наименовании филиала
        /// </summary>
        public СвНаимПолнТип СвНаим
        {
            get
            {
                if ((this.свНаимField == null))
                {
                    this.свНаимField = new СвНаимПолнТип();
                }
                return this.свНаимField;
            }
            set
            {
                this.свНаимField = value;
            }
        }

        /// <summary>
        /// Адрес (место расположения) на территории Российской Федерации (в структуре КЛАДР)
        /// </summary>
        public АдрРФЕГРЮЛТип АдрМНРФ
        {
            get
            {
                if ((this.адрМНРФField == null))
                {
                    this.адрМНРФField = new АдрРФЕГРЮЛТип();
                }
                return this.адрМНРФField;
            }
            set
            {
                this.адрМНРФField = value;
            }
        }

        /// <summary>
        /// Адрес (место расположения) на территории Российской Федерации (в структуре ФИАС)
        /// </summary>
        public АдрФИАСЕГРЮЛТип АдрМНФИАС
        {
            get
            {
                if ((this.адрМНФИАСField == null))
                {
                    this.адрМНФИАСField = new АдрФИАСЕГРЮЛТип();
                }
                return this.адрМНФИАСField;
            }
            set
            {
                this.адрМНФИАСField = value;
            }
        }

        /// <summary>
        /// Адрес (место расположения) за пределами территории Российской Федерации
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМНИн
        {
            get
            {
                if ((this.адрМНИнField == null))
                {
                    this.адрМНИнField = new АдрИнЕГРЮЛТип();
                }
                return this.адрМНИнField;
            }
            set
            {
                this.адрМНИнField = value;
            }
        }

        /// <summary>
        /// Сведения об учете в налоговом органе по месту нахождения филиала
        /// </summary>
        public СвУчетНОПодраздТип СвУчетНОФилиал
        {
            get
            {
                if ((this.свУчетНОФилиалField == null))
                {
                    this.свУчетНОФилиалField = new СвУчетНОПодраздТип();
                }
                return this.свУчетНОФилиалField;
            }
            set
            {
                this.свУчетНОФилиалField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвПодраздСвФилиал));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПодраздСвФилиал object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвПодраздСвФилиал object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПодраздСвФилиал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПодраздСвФилиал obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПодраздСвФилиал);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПодраздСвФилиал obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПодраздСвФилиал Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвПодраздСвФилиал)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПодраздСвФилиал object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвПодраздСвФилиал object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПодраздСвФилиал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвПодраздСвФилиал obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПодраздСвФилиал);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПодраздСвФилиал obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПодраздСвФилиал obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПодраздСвФилиал LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвПодраздСвФилиал LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о представительствах юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвПодраздСвПредстав
    {

        private ОгрДосСвТип огрДосСвField;

        private ГРНДатаТип гРНДатаПервField;

        private СвНаимПолнТип свНаимField;

        private АдрРФЕГРЮЛТип адрМНРФField;

        private АдрФИАСЕГРЮЛТип адрМНФИАСField;

        private АдрИнЕГРЮЛТип адрМНИнField;

        private СвУчетНОПодраздТип свУчетНОПредставField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об ограничении доступа к сведениям о представительстве юридического лица
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ сведений о данном представительстве
        /// </summary>
        public ГРНДатаТип ГРНДатаПерв
        {
            get
            {
                if ((this.гРНДатаПервField == null))
                {
                    this.гРНДатаПервField = new ГРНДатаТип();
                }
                return this.гРНДатаПервField;
            }
            set
            {
                this.гРНДатаПервField = value;
            }
        }

        /// <summary>
        /// Сведения о наименовании представительства
        /// </summary>
        public СвНаимПолнТип СвНаим
        {
            get
            {
                if ((this.свНаимField == null))
                {
                    this.свНаимField = new СвНаимПолнТип();
                }
                return this.свНаимField;
            }
            set
            {
                this.свНаимField = value;
            }
        }

        /// <summary>
        /// Адрес (место расположения) на территории Российской Федерации (в структуре КЛАДР)
        /// </summary>
        public АдрРФЕГРЮЛТип АдрМНРФ
        {
            get
            {
                if ((this.адрМНРФField == null))
                {
                    this.адрМНРФField = new АдрРФЕГРЮЛТип();
                }
                return this.адрМНРФField;
            }
            set
            {
                this.адрМНРФField = value;
            }
        }

        /// <summary>
        /// Адрес (место расположения) на территории Российской Федерации (в структуре ФИАС)
        /// </summary>
        public АдрФИАСЕГРЮЛТип АдрМНФИАС
        {
            get
            {
                if ((this.адрМНФИАСField == null))
                {
                    this.адрМНФИАСField = new АдрФИАСЕГРЮЛТип();
                }
                return this.адрМНФИАСField;
            }
            set
            {
                this.адрМНФИАСField = value;
            }
        }

        /// <summary>
        /// Адрес (место расположения) за пределами территории Российской Федерации
        /// </summary>
        public АдрИнЕГРЮЛТип АдрМНИн
        {
            get
            {
                if ((this.адрМНИнField == null))
                {
                    this.адрМНИнField = new АдрИнЕГРЮЛТип();
                }
                return this.адрМНИнField;
            }
            set
            {
                this.адрМНИнField = value;
            }
        }

        /// <summary>
        /// Сведения об учете в налоговом органе по месту нахождения представительства
        /// </summary>
        public СвУчетНОПодраздТип СвУчетНОПредстав
        {
            get
            {
                if ((this.свУчетНОПредставField == null))
                {
                    this.свУчетНОПредставField = new СвУчетНОПодраздТип();
                }
                return this.свУчетНОПредставField;
            }
            set
            {
                this.свУчетНОПредставField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвПодраздСвПредстав));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПодраздСвПредстав object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвПодраздСвПредстав object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПодраздСвПредстав object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПодраздСвПредстав obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПодраздСвПредстав);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПодраздСвПредстав obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПодраздСвПредстав Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвПодраздСвПредстав)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПодраздСвПредстав object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвПодраздСвПредстав object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПодраздСвПредстав object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвПодраздСвПредстав obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПодраздСвПредстав);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПодраздСвПредстав obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПодраздСвПредстав obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПодраздСвПредстав LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвПодраздСвПредстав LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об участии в реорганизации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвРеорг
    {

        private ОгрДосСвТип огрДосСвField;

        private ФайлДокументСвЮЛСвРеоргСвСтатус свСтатусField;

        private ГРНДатаТип гРНДатаField;

        private List<ГРНДатаТип> гРНДатаИзмСостРеоргЮЛField;

        private List<ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ> свРеоргЮЛField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об ограничении доступа к сведениям об участии юридического лица в реорганизации
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// Сведения о форме реорганизации (статусе) юридического лица
        /// </summary>
        public ФайлДокументСвЮЛСвРеоргСвСтатус СвСтатус
        {
            get
            {
                if ((this.свСтатусField == null))
                {
                    this.свСтатусField = new ФайлДокументСвЮЛСвРеоргСвСтатус();
                }
                return this.свСтатусField;
            }
            set
            {
                this.свСтатусField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей сведения о начале реорганизации
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения записи, которой в ЕГРЮЛ внесены сведения об изменении состава участвующих в реорганизации юридических лиц
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ГРНДатаИзмСостРеоргЮЛ")]
        public List<ГРНДатаТип> ГРНДатаИзмСостРеоргЮЛ
        {
            get
            {
                if ((this.гРНДатаИзмСостРеоргЮЛField == null))
                {
                    this.гРНДатаИзмСостРеоргЮЛField = new List<ГРНДатаТип>();
                }
                return this.гРНДатаИзмСостРеоргЮЛField;
            }
            set
            {
                this.гРНДатаИзмСостРеоргЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения о юридических лицах, участвующих в реорганизации
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвРеоргЮЛ")]
        public List<ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ> СвРеоргЮЛ
        {
            get
            {
                if ((this.свРеоргЮЛField == null))
                {
                    this.свРеоргЮЛField = new List<ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ>();
                }
                return this.свРеоргЮЛField;
            }
            set
            {
                this.свРеоргЮЛField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвРеорг));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвРеорг object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвРеорг object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвРеорг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвРеорг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвРеорг);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвРеорг obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвРеорг Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвРеорг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвРеорг object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвРеорг object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвРеорг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвРеорг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвРеорг);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвРеорг obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвРеорг obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвРеорг LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвРеорг LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о форме реорганизации (статусе) юридического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвРеоргСвСтатус
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код формы реорганизации (статуса) юридического лица по справочнику СЮЛСТ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСтатусЮЛ { get; set; }

        /// <summary>
        /// Наименование формы реорганизации (статуса) юридического лица по справочнику СЮЛСТ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСтатусЮЛ { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвРеоргСвСтатус));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвРеоргСвСтатус object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвРеоргСвСтатус object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвРеоргСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвРеоргСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвРеоргСвСтатус);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвРеоргСвСтатус obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвРеоргСвСтатус Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвРеоргСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвРеоргСвСтатус object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвРеоргСвСтатус object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвРеоргСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвРеоргСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвРеоргСвСтатус);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвРеоргСвСтатус obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвРеоргСвСтатус obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвРеоргСвСтатус LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвРеоргСвСтатус LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о юридических лицах, участвующих в реорганизации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ
    {

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }

        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }

        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }

        /// <summary>
        /// Состояние юридического лица после завершения реорганизации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументСвЮЛСвРеоргСвРеоргЮЛСостЮЛпосле СостЮЛпосле { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СостЮЛпослеSpecified { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвРеоргСвРеоргЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлДокументСвЮЛСвРеоргСвРеоргЮЛСостЮЛпосле
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ПРЕКРАТИТ ДЕЯТЕЛЬНОСТЬ ПОСЛЕ РЕОРГАНИЗАЦИИ")]
        ПРЕКРАТИТДЕЯТЕЛЬНОСТЬПОСЛЕРЕОРГАНИЗАЦИИ,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ПРОДОЛЖИТ ДЕЯТЕЛЬНОСТЬ ПОСЛЕ РЕОРГАНИЗАЦИИ")]
        ПРОДОЛЖИТДЕЯТЕЛЬНОСТЬПОСЛЕРЕОРГАНИЗАЦИИ,
    }

    /// <summary>
    /// Сведения о правопредшественнике
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвПредш
    {

        private ОгрДосСвТип огрДосСвField;

        private ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг свЮЛсложнРеоргField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }

        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }

        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }


        /// <summary>
        /// Сведения об ограничении доступа к сведениям о правопредшественнике юридического лица
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// Сведения о юридическом лице, путем реорганизации которого был создан правопредшественник при реорганизации в форме выделения или разделения с одновременным присоединением или слиянием
        /// </summary>
        public ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг СвЮЛсложнРеорг
        {
            get
            {
                if ((this.свЮЛсложнРеоргField == null))
                {
                    this.свЮЛсложнРеоргField = new ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг();
                }
                return this.свЮЛсложнРеоргField;
            }
            set
            {
                this.свЮЛсложнРеоргField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвПредш));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПредш object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвПредш object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПредш object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПредш obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПредш);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПредш obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПредш Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвПредш)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПредш object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвПредш object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПредш object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвПредш obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПредш);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПредш obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПредш obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПредш LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвПредш LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о юридическом лице, путем реорганизации которого был создан правопредшественник при реорганизации в форме выделения или разделения с одновременным присоединением или слиянием
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }

        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }

        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвПредшСвЮЛсложнРеорг LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о крестьянском (фермерском) хозяйстве, на базе имущества которого создано юридическое лицо
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвКФХПредш
    {

        private СвФЛЕГРЮЛТип свФЛField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ОГРНИП крестьянского (фермерского) хозяйства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРНИП { get; set; }


        /// <summary>
        /// Сведения о фамилии, имени, отчестве и ИНН главы КФХ
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ
        {
            get
            {
                if ((this.свФЛField == null))
                {
                    this.свФЛField = new СвФЛЕГРЮЛТип();
                }
                return this.свФЛField;
            }
            set
            {
                this.свФЛField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвКФХПредш));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвКФХПредш object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвКФХПредш object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвКФХПредш object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвКФХПредш obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвКФХПредш);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвКФХПредш obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвКФХПредш Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвКФХПредш)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвКФХПредш object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвКФХПредш object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвКФХПредш object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвКФХПредш obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвКФХПредш);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвКФХПредш obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвКФХПредш obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвКФХПредш LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвКФХПредш LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о правопреемнике
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвПреем
    {

        private ОгрДосСвТип огрДосСвField;

        private ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг свЮЛсложнРеоргField;

        private ГРНДатаТип гРНДатаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }

        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }

        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }


        /// <summary>
        /// Сведения об ограничении доступа к сведениям о правопреемнике юридического лица
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// Сведения о юридическом лица, которое было создано в форме слияния с участием правопреемника, или к которому присоединился правопреемник при реорганизации в форме выделения или разделения с одновременным присоединением или слиянием
        /// </summary>
        public ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг СвЮЛсложнРеорг
        {
            get
            {
                if ((this.свЮЛсложнРеоргField == null))
                {
                    this.свЮЛсложнРеоргField = new ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг();
                }
                return this.свЮЛсложнРеоргField;
            }
            set
            {
                this.свЮЛсложнРеоргField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения
        /// </summary>
        public ГРНДатаТип ГРНДата
        {
            get
            {
                if ((this.гРНДатаField == null))
                {
                    this.гРНДатаField = new ГРНДатаТип();
                }
                return this.гРНДатаField;
            }
            set
            {
                this.гРНДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвПреем));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПреем object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвПреем object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПреем object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПреем obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПреем);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПреем obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПреем Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвПреем)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПреем object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвПреем object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПреем object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвПреем obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПреем);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПреем obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПреем obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПреем LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвПреем LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о юридическом лица, которое было создано в форме слияния с участием правопреемника, или к которому присоединился правопреемник при реорганизации в форме выделения или разделения с одновременным присоединением или слиянием
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }

        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }

        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвПреемСвЮЛсложнРеорг LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о крестьянском (фермерском) хозяйстве, которые внесены в ЕГРИП в связи с приведением правового статуса крестьянского (фермерского) хозяйства в соответствие с нормами части первой Гражданского кодекса Российской Федерации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвКФХПреем
    {

        private СвФЛЕГРЮЛТип свФЛField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ОГРНИП крестьянского (фермерского) хозяйства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРНИП { get; set; }


        /// <summary>
        /// Сведения о фамилии, имени, отчестве и ИНН главы КФХ
        /// </summary>
        public СвФЛЕГРЮЛТип СвФЛ
        {
            get
            {
                if ((this.свФЛField == null))
                {
                    this.свФЛField = new СвФЛЕГРЮЛТип();
                }
                return this.свФЛField;
            }
            set
            {
                this.свФЛField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвКФХПреем));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвКФХПреем object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвКФХПреем object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвКФХПреем object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвКФХПреем obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвКФХПреем);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвКФХПреем obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвКФХПреем Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвКФХПреем)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвКФХПреем object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвКФХПреем object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвКФХПреем object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвКФХПреем obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвКФХПреем);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвКФХПреем obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвКФХПреем obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвКФХПреем LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвКФХПреем LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о записях, внесенных в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвЗапЕГРЮЛ
    {

        private ОгрДосСвТип огрДосСвField;

        private ВидЗапТип видЗапField;

        private СвРегОргТип свРегОргField;

        private List<ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ> свЗаявФЛField;

        private List<ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок> сведПредДокField;

        private List<ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид> свСвидField;

        private ИдГРНДатаТип гРНДатаИспрПредField;

        private ИдГРНДатаТип гРНДатаНедПредField;

        private ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап свСтатусЗапField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Системный идентификатор записи
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string ИдЗап { get; set; }

        /// <summary>
        /// Государственный регистрационный номер записи
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ГРН { get; set; }

        /// <summary>
        /// Дата внесения записи в ЕГРЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаЗап { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаЗапSpecified { get; set; }


        /// <summary>
        /// Сведения об ограничении доступа к сведениям о данной записи
        /// </summary>
        public ОгрДосСвТип ОгрДосСв
        {
            get
            {
                if ((this.огрДосСвField == null))
                {
                    this.огрДосСвField = new ОгрДосСвТип();
                }
                return this.огрДосСвField;
            }
            set
            {
                this.огрДосСвField = value;
            }
        }

        /// <summary>
        /// Сведения о причине внесения записи в ЕГРЮЛ
        /// </summary>
        public ВидЗапТип ВидЗап
        {
            get
            {
                if ((this.видЗапField == null))
                {
                    this.видЗапField = new ВидЗапТип();
                }
                return this.видЗапField;
            }
            set
            {
                this.видЗапField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрирующем (налоговом) органе, внесшем запись в ЕГРЮЛ
        /// </summary>
        public СвРегОргТип СвРегОрг
        {
            get
            {
                if ((this.свРегОргField == null))
                {
                    this.свРегОргField = new СвРегОргТип();
                }
                return this.свРегОргField;
            }
            set
            {
                this.свРегОргField = value;
            }
        }

        /// <summary>
        /// Сведения о заявителе
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвЗаявФЛ")]
        public List<ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ> СвЗаявФЛ
        {
            get
            {
                if ((this.свЗаявФЛField == null))
                {
                    this.свЗаявФЛField = new List<ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ>();
                }
                return this.свЗаявФЛField;
            }
            set
            {
                this.свЗаявФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о документах, представленных при внесении записи в ЕГРЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СведПредДок")]
        public List<ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок> СведПредДок
        {
            get
            {
                if ((this.сведПредДокField == null))
                {
                    this.сведПредДокField = new List<ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок>();
                }
                return this.сведПредДокField;
            }
            set
            {
                this.сведПредДокField = value;
            }
        }

        /// <summary>
        /// Сведения о свидетельстве, подтверждающем факт внесения записи в ЕГРЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвСвид")]
        public List<ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид> СвСвид
        {
            get
            {
                if ((this.свСвидField == null))
                {
                    this.свСвидField = new List<ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид>();
                }
                return this.свСвидField;
            }
            set
            {
                this.свСвидField = value;
            }
        }

        /// <summary>
        /// ГРН и дата записи, в которую внесены исправления
        /// </summary>
        public ИдГРНДатаТип ГРНДатаИспрПред
        {
            get
            {
                if ((this.гРНДатаИспрПредField == null))
                {
                    this.гРНДатаИспрПредField = new ИдГРНДатаТип();
                }
                return this.гРНДатаИспрПредField;
            }
            set
            {
                this.гРНДатаИспрПредField = value;
            }
        }

        /// <summary>
        /// ГРН и дата записи, которая признана недействительной
        /// </summary>
        public ИдГРНДатаТип ГРНДатаНедПред
        {
            get
            {
                if ((this.гРНДатаНедПредField == null))
                {
                    this.гРНДатаНедПредField = new ИдГРНДатаТип();
                }
                return this.гРНДатаНедПредField;
            }
            set
            {
                this.гРНДатаНедПредField = value;
            }
        }

        /// <summary>
        /// Сведения о статусе записи
        /// </summary>
        public ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап СвСтатусЗап
        {
            get
            {
                if ((this.свСтатусЗапField == null))
                {
                    this.свСтатусЗапField = new ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап();
                }
                return this.свСтатусЗапField;
            }
            set
            {
                this.свСтатусЗапField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвЗапЕГРЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвЗапЕГРЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвЗапЕГРЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвЗапЕГРЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвЗапЕГРЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о заявителе
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ
    {

        private ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв видЗаявField;

        private ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ свЮЛField;

        private ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг свУпрОргField;

        private ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ свФЛField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Заявитель
        /// </summary>
        public ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв ВидЗаяв
        {
            get
            {
                if ((this.видЗаявField == null))
                {
                    this.видЗаявField = new ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв();
                }
                return this.видЗаявField;
            }
            set
            {
                this.видЗаявField = value;
            }
        }

        /// <summary>
        /// Сведения о юридическом лице, от имени которого действует заявитель
        /// </summary>
        public ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ СвЮЛ
        {
            get
            {
                if ((this.свЮЛField == null))
                {
                    this.свЮЛField = new ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ();
                }
                return this.свЮЛField;
            }
            set
            {
                this.свЮЛField = value;
            }
        }

        /// <summary>
        /// Сведения об управляющей компании
        /// </summary>
        public ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг СвУпрОрг
        {
            get
            {
                if ((this.свУпрОргField == null))
                {
                    this.свУпрОргField = new ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг();
                }
                return this.свУпрОргField;
            }
            set
            {
                this.свУпрОргField = value;
            }
        }

        /// <summary>
        /// Сведения о физическом лице - заявителе
        /// </summary>
        public ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ СвФЛ
        {
            get
            {
                if ((this.свФЛField == null))
                {
                    this.свФЛField = new ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ();
                }
                return this.свФЛField;
            }
            set
            {
                this.свФЛField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Заявитель
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код по справочнику СЗОЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСЗОЮЛ { get; set; }

        /// <summary>
        /// Наименование по справочнику СЗОЮЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСЗОЮЛ { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛВидЗаяв LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о юридическом лице, от имени которого действует заявитель
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }

        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }

        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об управляющей компании
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Основной государственный регистрационный номер юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }

        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }

        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвУпрОрг LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о физическом лице - заявителе
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ
    {

        private ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН свФИОИННField;

        private ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд свРождField;

        private ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ удЛичнФЛField;

        private ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ адресМЖРФField;

        private ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн адрМЖИнField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения о фамилии, имени, отчестве и ИНН физического лица
        /// </summary>
        public ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН СвФИОИНН
        {
            get
            {
                if ((this.свФИОИННField == null))
                {
                    this.свФИОИННField = new ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН();
                }
                return this.свФИОИННField;
            }
            set
            {
                this.свФИОИННField = value;
            }
        }

        /// <summary>
        /// Сведения о рождении
        /// </summary>
        public ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд СвРожд
        {
            get
            {
                if ((this.свРождField == null))
                {
                    this.свРождField = new ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд();
                }
                return this.свРождField;
            }
            set
            {
                this.свРождField = value;
            }
        }

        /// <summary>
        /// Сведения о документе, удостоверяющем личность
        /// </summary>
        public ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ УдЛичнФЛ
        {
            get
            {
                if ((this.удЛичнФЛField == null))
                {
                    this.удЛичнФЛField = new ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ();
                }
                return this.удЛичнФЛField;
            }
            set
            {
                this.удЛичнФЛField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места жительства в Российской Федерации (в структуре КЛАДР)
        /// </summary>
        public ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ АдресМЖРФ
        {
            get
            {
                if ((this.адресМЖРФField == null))
                {
                    this.адресМЖРФField = new ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ();
                }
                return this.адресМЖРФField;
            }
            set
            {
                this.адресМЖРФField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места жительства за пределами Российской Федерации
        /// </summary>
        public ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн АдрМЖИн
        {
            get
            {
                if ((this.адрМЖИнField == null))
                {
                    this.адрМЖИнField = new ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн();
                }
                return this.адрМЖИнField;
            }
            set
            {
                this.адрМЖИнField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о фамилии, имени, отчестве и ИНН физического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН
    {

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Фамилия
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Фамилия { get; set; }

        /// <summary>
        /// Имя
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Имя { get; set; }

        /// <summary>
        /// Отчество
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Отчество { get; set; }

        /// <summary>
        /// ИНН физического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИННФЛ { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвФИОИНН LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о рождении
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд
    {

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Дата рождения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРожд { get; set; }

        /// <summary>
        /// Место рождения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string МестоРожд { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРождПрДатаРожд ПрДатаРожд { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ПрДатаРождSpecified { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРожд LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛСвРождПрДатаРожд
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    /// <summary>
    /// Сведения о документе, удостоверяющем личность
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ
    {

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код вида документа по справочнику СПДУЛ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодВидДок { get; set; }

        /// <summary>
        /// Наименование вида документа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимДок { get; set; }

        /// <summary>
        /// Серия и номер документа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string СерНомДок { get; set; }

        /// <summary>
        /// Дата выдачи
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаДок { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаДокSpecified { get; set; }

        /// <summary>
        /// Кем выдан
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВыдДок { get; set; }

        /// <summary>
        /// Код подразделения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодВыдДок { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛУдЛичнФЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об адресе места жительства в Российской Федерации (в структуре КЛАДР)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ
    {

        private РегионТип регионField;

        private РайонТип районField;

        private ГородТип городField;

        private НаселПунктТип населПунктField;

        private УлицаТип улицаField;

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Индекс
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Индекс { get; set; }

        /// <summary>
        /// Код субъекта Российской Федерации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодРегион { get; set; }

        /// <summary>
        /// Код адреса по КЛАДР
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодАдрКладр { get; set; }

        /// <summary>
        /// Дом (владение и т.п.)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дом { get; set; }

        /// <summary>
        /// Корпус (строение и т.п.)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Корпус { get; set; }

        /// <summary>
        /// Квартира (офис и т.п.)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Кварт { get; set; }


        /// <summary>
        /// Субъект Российской Федерации
        /// </summary>
        public РегионТип Регион
        {
            get
            {
                if ((this.регионField == null))
                {
                    this.регионField = new РегионТип();
                }
                return this.регионField;
            }
            set
            {
                this.регионField = value;
            }
        }

        /// <summary>
        /// Район (улус и т.п.)
        /// </summary>
        public РайонТип Район
        {
            get
            {
                if ((this.районField == null))
                {
                    this.районField = new РайонТип();
                }
                return this.районField;
            }
            set
            {
                this.районField = value;
            }
        }

        /// <summary>
        /// Город (волость и т.п.)
        /// </summary>
        public ГородТип Город
        {
            get
            {
                if ((this.городField == null))
                {
                    this.городField = new ГородТип();
                }
                return this.городField;
            }
            set
            {
                this.городField = value;
            }
        }

        /// <summary>
        /// Населенный пункт (село и т.п.)
        /// </summary>
        public НаселПунктТип НаселПункт
        {
            get
            {
                if ((this.населПунктField == null))
                {
                    this.населПунктField = new НаселПунктТип();
                }
                return this.населПунктField;
            }
            set
            {
                this.населПунктField = value;
            }
        }

        /// <summary>
        /// Улица (проспект, переулок и т.п.)
        /// </summary>
        public УлицаТип Улица
        {
            get
            {
                if ((this.улицаField == null))
                {
                    this.улицаField = new УлицаТип();
                }
                return this.улицаField;
            }
            set
            {
                this.улицаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдресМЖРФ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об адресе места жительства за пределами Российской Федерации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн
    {

        private ГРНДатаТип гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код страны
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОКСМ { get; set; }

        /// <summary>
        /// Наименование страны
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСтран { get; set; }

        /// <summary>
        /// Адрес
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string АдрИн { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНДатаТип ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new ГРНДатаТип();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвЗаявФЛСвФЛАдрМЖИн LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о документах, представленных при внесении записи в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Наименование документа
        /// </summary>
        public string НаимДок { get; set; }

        /// <summary>
        /// Номер документа
        /// </summary>
        public string НомДок { get; set; }

        /// <summary>
        /// Дата документа
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime ДатаДок { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаДокSpecified { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСведПредДок LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о свидетельстве, подтверждающем факт внесения записи в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид
    {

        private ГРНДатаТип гРНДатаСвидНедField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Серия бланка свидетельства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Серия { get; set; }

        /// <summary>
        /// Номер бланка свидетельства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер { get; set; }

        /// <summary>
        /// Дата выдачи свидетельства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаВыдСвид { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРЮЛ записи, содержащей сведения о признании свидетельства недействительным по решению суда
        /// </summary>
        public ГРНДатаТип ГРНДатаСвидНед
        {
            get
            {
                if ((this.гРНДатаСвидНедField == null))
                {
                    this.гРНДатаСвидНедField = new ГРНДатаТип();
                }
                return this.гРНДатаСвидНедField;
            }
            set
            {
                this.гРНДатаСвидНедField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвСвид LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о статусе записи
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап
    {

        private ИдГРНДатаТип гРНДатаНедField;

        private List<ИдГРНДатаТип> гРНДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения записи, которой данная запись признана недействительной
        /// </summary>
        public ИдГРНДатаТип ГРНДатаНед
        {
            get
            {
                if ((this.гРНДатаНедField == null))
                {
                    this.гРНДатаНедField = new ИдГРНДатаТип();
                }
                return this.гРНДатаНедField;
            }
            set
            {
                this.гРНДатаНедField = value;
            }
        }

        /// <summary>
        /// ГРН и дата записи, которой внесены исправления в связи с технической ошибкой
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ГРНДатаИспр")]
        public List<ИдГРНДатаТип> ГРНДатаИспр
        {
            get
            {
                if ((this.гРНДатаИспрField == null))
                {
                    this.гРНДатаИспрField = new List<ИдГРНДатаТип>();
                }
                return this.гРНДатаИспрField;
            }
            set
            {
                this.гРНДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвЮЛСвЗапЕГРЮЛСвСтатусЗап LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлДокументСвЮЛСпрОПФ
    {

        /// <remarks/>
        ОКОПФ,

        /// <remarks/>
        КОПФ,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлВерсФорм
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4.06")]
        Item406,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлТипИнф
    {

        /// <remarks/>
        ЕГРЮЛ_ОТКР_СВЕД,

        /// <remarks/>
        ЕГРЮЛ_ЗАКР_СВЕД,

        /// <remarks/>
        ЕГРЮЛ_ОГР_СВЕД,
    }
}
