// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.1.854 Microsoft Reciprocal License (Ms-RL) 
//    <NameSpace>WorkWith_XSD</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>True</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>True</EnableEncoding><AutomaticProperties>True</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>Default</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace ActualXmlElasticsearch.Structures.EGRIP_405
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;


    /// <summary>
    /// Сведения, содержащиеся в Едином государственном реестре индивидуальных предпринимателей
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class Файл
    {

        private ФайлИдОтпр идОтпрField;

        private List<ФайлДокумент> документField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Идентификатор файла
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИдФайл { get; set; }

        /// <summary>
        /// Версия формата
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлВерсФорм ВерсФорм { get; set; }

        /// <summary>
        /// Тип информации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлТипИнф ТипИнф { get; set; }

        /// <summary>
        /// Версия передающей программы
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВерсПрог { get; set; }

        /// <summary>
        /// Количество документов
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string КолДок { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Structures.search search { get; set; }

        /// <summary>
        /// Сведения об отправителе
        /// </summary>
        public ФайлИдОтпр ИдОтпр
        {
            get
            {
                if ((this.идОтпрField == null))
                {
                    this.идОтпрField = new ФайлИдОтпр();
                }
                return this.идОтпрField;
            }
            set
            {
                this.идОтпрField = value;
            }
        }

        /// <summary>
        /// Состав и структура документа
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Документ")]
        public List<ФайлДокумент> Документ
        {
            get
            {
                if ((this.документField == null))
                {
                    this.документField = new List<ФайлДокумент>();
                }
                return this.документField;
            }
            set
            {
                this.документField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Файл));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Файл object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an Файл object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Файл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Файл obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Файл);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Файл obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Файл Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Файл)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Файл object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Файл object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Файл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Файл obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Файл);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Файл obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Файл obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Файл LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static Файл LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об отправителе
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлИдОтпр
    {

        private ФИО1Тип фИООтвField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Должность ответственного лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДолжОтв { get; set; }

        /// <summary>
        /// Номер контактного телефона
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Тлф { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("E-mail")]
        public string Email { get; set; }


        /// <summary>
        /// Фамилия, имя, отчество ответственного лица
        /// </summary>
        public ФИО1Тип ФИООтв
        {
            get
            {
                if ((this.фИООтвField == null))
                {
                    this.фИООтвField = new ФИО1Тип();
                }
                return this.фИООтвField;
            }
            set
            {
                this.фИООтвField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлИдОтпр));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлИдОтпр object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлИдОтпр object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлИдОтпр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлИдОтпр obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлИдОтпр);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлИдОтпр obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлИдОтпр Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлИдОтпр)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлИдОтпр object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлИдОтпр object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлИдОтпр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлИдОтпр obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлИдОтпр);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлИдОтпр obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлИдОтпр obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлИдОтпр LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлИдОтпр LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ФИО1Тип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Фамилия { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Имя { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Отчество { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФИО1Тип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФИО1Тип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФИО1Тип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФИО1Тип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФИО1Тип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФИО1Тип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФИО1Тип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФИО1Тип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФИО1Тип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФИО1Тип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФИО1Тип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФИО1Тип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФИО1Тип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФИО1Тип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФИО1Тип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФИО1Тип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФИО1Тип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФИО1Тип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ИдГРНИПДатаТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string ИдЗап { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ГРНИП { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаЗап { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ИдГРНИПДатаТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ИдГРНИПДатаТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ИдГРНИПДатаТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ИдГРНИПДатаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ИдГРНИПДатаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ИдГРНИПДатаТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ИдГРНИПДатаТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ИдГРНИПДатаТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ИдГРНИПДатаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ИдГРНИПДатаТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ИдГРНИПДатаТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ИдГРНИПДатаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ИдГРНИПДатаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ИдГРНИПДатаТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ИдГРНИПДатаТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ИдГРНИПДатаТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ИдГРНИПДатаТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ИдГРНИПДатаТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвРегОргТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодНО { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимНО { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвРегОргТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвРегОргТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвРегОргТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвРегОргТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвРегОргТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвРегОргТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвРегОргТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвРегОргТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвРегОргТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвРегОргТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвРегОргТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвРегОргТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвРегОргТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвРегОргТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвРегОргТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвРегОргТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвРегОргТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвРегОргТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ВидЗапТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСПВЗ { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимВидЗап { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ВидЗапТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ВидЗапТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ВидЗапТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ВидЗапТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ВидЗапТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ВидЗапТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ВидЗапТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ВидЗапТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ВидЗапТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ВидЗапТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ВидЗапТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ВидЗапТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ВидЗапТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ВидЗапТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ВидЗапТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ВидЗапТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ВидЗапТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ВидЗапТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвОКВЭДТип
    {

        private ГРНИПДатаТип гРНИПДатаField;

        private ГРНИПДатаТип гРНИПДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодОКВЭД { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимОКВЭД { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СвОКВЭДТипПрВерсОКВЭД ПрВерсОКВЭД { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ПрВерсОКВЭДSpecified { get; set; }


        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        public ГРНИПДатаТип ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвОКВЭДТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвОКВЭДТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвОКВЭДТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвОКВЭДТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвОКВЭДТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОКВЭДТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвОКВЭДТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвОКВЭДТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвОКВЭДТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвОКВЭДТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвОКВЭДТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвОКВЭДТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвОКВЭДТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвОКВЭДТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвОКВЭДТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвОКВЭДТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвОКВЭДТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвОКВЭДТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ГРНИПДатаТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ГРНИП { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаЗаписи { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ГРНИПДатаТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ГРНИПДатаТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ГРНИПДатаТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ГРНИПДатаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ГРНИПДатаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ГРНИПДатаТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ГРНИПДатаТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ГРНИПДатаТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ГРНИПДатаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ГРНИПДатаТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ГРНИПДатаТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ГРНИПДатаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ГРНИПДатаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ГРНИПДатаТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ГРНИПДатаТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ГРНИПДатаТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ГРНИПДатаТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ГРНИПДатаТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum СвОКВЭДТипПрВерсОКВЭД
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2001")]
        Item2001,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2014")]
        Item2014,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class НомерПТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Тип { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(НомерПТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current НомерПТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an НомерПТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output НомерПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out НомерПТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(НомерПТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out НомерПТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static НомерПТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((НомерПТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current НомерПТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an НомерПТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output НомерПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out НомерПТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(НомерПТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out НомерПТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out НомерПТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static НомерПТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static НомерПТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ТипНаимПТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Тип { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ТипНаимПТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ТипНаимПТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ТипНаимПТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ТипНаимПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ТипНаимПТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ТипНаимПТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ТипНаимПТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ТипНаимПТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ТипНаимПТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ТипНаимПТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ТипНаимПТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ТипНаимПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ТипНаимПТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ТипНаимПТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ТипНаимПТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ТипНаимПТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ТипНаимПТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ТипНаимПТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ВидНаимПТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Вид { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ВидНаимПТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ВидНаимПТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ВидНаимПТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ВидНаимПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ВидНаимПТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ВидНаимПТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ВидНаимПТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ВидНаимПТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ВидНаимПТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ВидНаимПТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ВидНаимПТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ВидНаимПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ВидНаимПТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ВидНаимПТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ВидНаимПТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ВидНаимПТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ВидНаимПТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ВидНаимПТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ВидНаимКодТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВидКод { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ВидНаимКодТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ВидНаимКодТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ВидНаимКодТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ВидНаимКодТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ВидНаимКодТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ВидНаимКодТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ВидНаимКодТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ВидНаимКодТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ВидНаимКодТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ВидНаимКодТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ВидНаимКодТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ВидНаимКодТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ВидНаимКодТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ВидНаимКодТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ВидНаимКодТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ВидНаимКодТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ВидНаимКодТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ВидНаимКодТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class АдрФИАСЕГРИПТип
    {

        private ВидНаимКодТип муниципРайонField;

        private ВидНаимКодТип городСелПоселенField;

        private ВидНаимПТип населенПунктField;

        private ТипНаимПТип элПланСтруктурField;

        private ТипНаимПТип элУлДорСетиField;

        private List<НомерПТип> зданиеField;

        private НомерПТип помещЗданияField;

        private НомерПТип помещКвартирыField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public string Регион { get; set; }

        public string НаимРегион { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИдНом { get; set; }


        public ВидНаимКодТип МуниципРайон
        {
            get
            {
                if ((this.муниципРайонField == null))
                {
                    this.муниципРайонField = new ВидНаимКодТип();
                }
                return this.муниципРайонField;
            }
            set
            {
                this.муниципРайонField = value;
            }
        }

        public ВидНаимКодТип ГородСелПоселен
        {
            get
            {
                if ((this.городСелПоселенField == null))
                {
                    this.городСелПоселенField = new ВидНаимКодТип();
                }
                return this.городСелПоселенField;
            }
            set
            {
                this.городСелПоселенField = value;
            }
        }

        public ВидНаимПТип НаселенПункт
        {
            get
            {
                if ((this.населенПунктField == null))
                {
                    this.населенПунктField = new ВидНаимПТип();
                }
                return this.населенПунктField;
            }
            set
            {
                this.населенПунктField = value;
            }
        }

        public ТипНаимПТип ЭлПланСтруктур
        {
            get
            {
                if ((this.элПланСтруктурField == null))
                {
                    this.элПланСтруктурField = new ТипНаимПТип();
                }
                return this.элПланСтруктурField;
            }
            set
            {
                this.элПланСтруктурField = value;
            }
        }

        public ТипНаимПТип ЭлУлДорСети
        {
            get
            {
                if ((this.элУлДорСетиField == null))
                {
                    this.элУлДорСетиField = new ТипНаимПТип();
                }
                return this.элУлДорСетиField;
            }
            set
            {
                this.элУлДорСетиField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Здание")]
        public List<НомерПТип> Здание
        {
            get
            {
                if ((this.зданиеField == null))
                {
                    this.зданиеField = new List<НомерПТип>();
                }
                return this.зданиеField;
            }
            set
            {
                this.зданиеField = value;
            }
        }

        public НомерПТип ПомещЗдания
        {
            get
            {
                if ((this.помещЗданияField == null))
                {
                    this.помещЗданияField = new НомерПТип();
                }
                return this.помещЗданияField;
            }
            set
            {
                this.помещЗданияField = value;
            }
        }

        public НомерПТип ПомещКвартиры
        {
            get
            {
                if ((this.помещКвартирыField == null))
                {
                    this.помещКвартирыField = new НомерПТип();
                }
                return this.помещКвартирыField;
            }
            set
            {
                this.помещКвартирыField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(АдрФИАСЕГРИПТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current АдрФИАСЕГРИПТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an АдрФИАСЕГРИПТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output АдрФИАСЕГРИПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out АдрФИАСЕГРИПТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(АдрФИАСЕГРИПТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out АдрФИАСЕГРИПТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static АдрФИАСЕГРИПТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((АдрФИАСЕГРИПТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current АдрФИАСЕГРИПТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an АдрФИАСЕГРИПТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output АдрФИАСЕГРИПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out АдрФИАСЕГРИПТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(АдрФИАСЕГРИПТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out АдрФИАСЕГРИПТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out АдрФИАСЕГРИПТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static АдрФИАСЕГРИПТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static АдрФИАСЕГРИПТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class УлицаТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТипУлица { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимУлица { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(УлицаТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current УлицаТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an УлицаТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output УлицаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out УлицаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(УлицаТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out УлицаТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static УлицаТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((УлицаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current УлицаТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an УлицаТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output УлицаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out УлицаТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(УлицаТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out УлицаТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out УлицаТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static УлицаТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static УлицаТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class НаселПунктТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТипНаселПункт { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимНаселПункт { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(НаселПунктТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current НаселПунктТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an НаселПунктТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output НаселПунктТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out НаселПунктТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(НаселПунктТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out НаселПунктТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static НаселПунктТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((НаселПунктТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current НаселПунктТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an НаселПунктТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output НаселПунктТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out НаселПунктТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(НаселПунктТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out НаселПунктТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out НаселПунктТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static НаселПунктТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static НаселПунктТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class ГородТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТипГород { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимГород { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ГородТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ГородТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ГородТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ГородТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ГородТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ГородТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ГородТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ГородТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ГородТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ГородТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ГородТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ГородТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ГородТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ГородТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ГородТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ГородТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ГородТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ГородТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class РайонТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТипРайон { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимРайон { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(РайонТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current РайонТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an РайонТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output РайонТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out РайонТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(РайонТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out РайонТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static РайонТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((РайонТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current РайонТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an РайонТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output РайонТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out РайонТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(РайонТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out РайонТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out РайонТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static РайонТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static РайонТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class РегионТип
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТипРегион { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимРегион { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(РегионТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current РегионТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an РегионТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output РегионТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out РегионТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(РегионТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out РегионТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static РегионТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((РегионТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current РегионТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an РегионТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output РегионТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out РегионТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(РегионТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out РегионТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out РегионТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static РегионТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static РегионТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class АдрРФТипВып
    {

        private РегионТип регионField;

        private РайонТип районField;

        private ГородТип городField;

        private НаселПунктТип населПунктField;

        private УлицаТип улицаField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Индекс { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодРегион { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодАдрКладр { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дом { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Корпус { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Кварт { get; set; }


        public РегионТип Регион
        {
            get
            {
                if ((this.регионField == null))
                {
                    this.регионField = new РегионТип();
                }
                return this.регионField;
            }
            set
            {
                this.регионField = value;
            }
        }

        public РайонТип Район
        {
            get
            {
                if ((this.районField == null))
                {
                    this.районField = new РайонТип();
                }
                return this.районField;
            }
            set
            {
                this.районField = value;
            }
        }

        public ГородТип Город
        {
            get
            {
                if ((this.городField == null))
                {
                    this.городField = new ГородТип();
                }
                return this.городField;
            }
            set
            {
                this.городField = value;
            }
        }

        public НаселПунктТип НаселПункт
        {
            get
            {
                if ((this.населПунктField == null))
                {
                    this.населПунктField = new НаселПунктТип();
                }
                return this.населПунктField;
            }
            set
            {
                this.населПунктField = value;
            }
        }

        public УлицаТип Улица
        {
            get
            {
                if ((this.улицаField == null))
                {
                    this.улицаField = new УлицаТип();
                }
                return this.улицаField;
            }
            set
            {
                this.улицаField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(АдрРФТипВып));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current АдрРФТипВып object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an АдрРФТипВып object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output АдрРФТипВып object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out АдрРФТипВып obj, out System.Exception exception)
        {
            exception = null;
            obj = default(АдрРФТипВып);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out АдрРФТипВып obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static АдрРФТипВып Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((АдрРФТипВып)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current АдрРФТипВып object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an АдрРФТипВып object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output АдрРФТипВып object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out АдрРФТипВып obj, out System.Exception exception)
        {
            exception = null;
            obj = default(АдрРФТипВып);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out АдрРФТипВып obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out АдрРФТипВып obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static АдрРФТипВып LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static АдрРФТипВып LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class УдЛичнТипР
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодВидДок { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимДок { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string СерНомДок { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаДок { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаДокSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВыдДок { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодВыдДок { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(УдЛичнТипР));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current УдЛичнТипР object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an УдЛичнТипР object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output УдЛичнТипР object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out УдЛичнТипР obj, out System.Exception exception)
        {
            exception = null;
            obj = default(УдЛичнТипР);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out УдЛичнТипР obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static УдЛичнТипР Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((УдЛичнТипР)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current УдЛичнТипР object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an УдЛичнТипР object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output УдЛичнТипР object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out УдЛичнТипР obj, out System.Exception exception)
        {
            exception = null;
            obj = default(УдЛичнТипР);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out УдЛичнТипР obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out УдЛичнТипР obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static УдЛичнТипР LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static УдЛичнТипР LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class СвФИОЗАГСТип
    {

        private ГРНИПДатаТип гРНИПДатаField;

        private ГРНИПДатаТип гРНИПДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Фамилия { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Имя { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Отчество { get; set; }


        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        public ГРНИПДатаТип ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвФИОЗАГСТип));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвФИОЗАГСТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an СвФИОЗАГСТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвФИОЗАГСТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвФИОЗАГСТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвФИОЗАГСТип);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out СвФИОЗАГСТип obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static СвФИОЗАГСТип Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((СвФИОЗАГСТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current СвФИОЗАГСТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an СвФИОЗАГСТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвФИОЗАГСТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out СвФИОЗАГСТип obj, out System.Exception exception)
        {
            exception = null;
            obj = default(СвФИОЗАГСТип);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out СвФИОЗАГСТип obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out СвФИОЗАГСТип obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static СвФИОЗАГСТип LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static СвФИОЗАГСТип LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Состав и структура документа
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокумент
    {

        private ФайлДокументСвИП свИПField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Идентификатор документа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИдДок { get; set; }


        /// <summary>
        /// Сведения об индивидуальном предпринимателе/крестьянском (фермерском) хозяйстве
        /// </summary>
        public ФайлДокументСвИП СвИП
        {
            get
            {
                if ((this.свИПField == null))
                {
                    this.свИПField = new ФайлДокументСвИП();
                }
                return this.свИПField;
            }
            set
            {
                this.свИПField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокумент));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокумент object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокумент object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокумент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокумент obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокумент);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокумент obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокумент Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокумент)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокумент object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокумент object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокумент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокумент obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокумент);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокумент obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокумент obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокумент LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокумент LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об индивидуальном предпринимателе/крестьянском (фермерском) хозяйстве
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИП
    {

        private ФайлДокументСвИПСвФЛ свФЛField;

        private СвФИОЗАГСТип свФИОЗАГСField;

        private ФайлДокументСвИПСвРожд свРождField;

        private ФайлДокументСвИПСвГражд свГраждField;

        private ФайлДокументСвИПСвУдЛичнФЛ свУдЛичнФЛField;

        private ФайлДокументСвИПСвПравЖитРФ свПравЖитРФField;

        private ФайлДокументСвИПСвАдрМЖ свАдрМЖField;

        private ФайлДокументСвИПСвАдрЭлПочты свАдрЭлПочтыField;

        private ФайлДокументСвИПСвРегИП свРегИПField;

        private ФайлДокументСвИПСвРегОрг свРегОргField;

        private ФайлДокументСвИПСвСтатус свСтатусField;

        private ФайлДокументСвИПСвПрекращ свПрекращField;

        private ФайлДокументСвИПСвУчетНО свУчетНОField;

        private ФайлДокументСвИПСвРегПФ свРегПФField;

        private ФайлДокументСвИПСвРегФСС свРегФССField;

        private ФайлДокументСвИПСвОКВЭД свОКВЭДField;

        private List<ФайлДокументСвИПСвЛицензия> свЛицензияField;

        private List<ФайлДокументСвИПСвЗапЕГРИП> свЗапЕГРИПField;

        private static System.Xml.Serialization.XmlSerializer serializer;



        //[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        //public DateTime ДатаПапки { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        //public DateTime ДатаГосреестра { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string НазваниеФайлаZip { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ОГРНДляПоиска { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ИННДляПоиска { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string НазваниеФайлаXml { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ВерсияФайлаXML { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ПолеДляПоиска { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string ПолеДляПоискаСРазбивкой { get; set; }

        //[System.Xml.Serialization.XmlAttributeAttribute()]
        //public string Реестр { get; set; }


        /// <summary>
        /// Дата формирования сведений из ЕГРИП в отношении индивидуального предпринимателя
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаВып { get; set; }

        /// <summary>
        /// Основной государственный регистрационный номер индивидуального предпринимателя
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРНИП { get; set; }

        /// <summary>
        /// Дата присвоения ОГРНИП
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаОГРНИП { get; set; }

        /// <summary>
        /// ИНН физического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИННФЛ { get; set; }

        /// <summary>
        /// Код вида предпринимательства: индивидуальный предприниматель/глава крестьянского (фермерского) хозяйства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументСвИПКодВидИП КодВидИП { get; set; }

        /// <summary>
        /// Наименование вида предпринимательства: индивидуальный предприниматель/глава крестьянского (фермерского) хозяйства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимВидИП { get; set; }


        /// <summary>
        /// Фамилия, имя, отчество и пол индивидуального предпринимателя или главы КФХ
        /// </summary>
        public ФайлДокументСвИПСвФЛ СвФЛ
        {
            get
            {
                if ((this.свФЛField == null))
                {
                    this.свФЛField = new ФайлДокументСвИПСвФЛ();
                }
                return this.свФЛField;
            }
            set
            {
                this.свФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о фамилии, имени, отчестве индивидуального предпринимателя или главы КФХ по данным ЗАГС
        /// </summary>
        public СвФИОЗАГСТип СвФИОЗАГС
        {
            get
            {
                if ((this.свФИОЗАГСField == null))
                {
                    this.свФИОЗАГСField = new СвФИОЗАГСТип();
                }
                return this.свФИОЗАГСField;
            }
            set
            {
                this.свФИОЗАГСField = value;
            }
        }

        /// <summary>
        /// Сведения о рождении
        /// </summary>
        public ФайлДокументСвИПСвРожд СвРожд
        {
            get
            {
                if ((this.свРождField == null))
                {
                    this.свРождField = new ФайлДокументСвИПСвРожд();
                }
                return this.свРождField;
            }
            set
            {
                this.свРождField = value;
            }
        }

        /// <summary>
        /// Сведения о гражданстве
        /// </summary>
        public ФайлДокументСвИПСвГражд СвГражд
        {
            get
            {
                if ((this.свГраждField == null))
                {
                    this.свГраждField = new ФайлДокументСвИПСвГражд();
                }
                return this.свГраждField;
            }
            set
            {
                this.свГраждField = value;
            }
        }

        /// <summary>
        /// Сведения о документе, удостоверяющем личность физического лица
        /// </summary>
        public ФайлДокументСвИПСвУдЛичнФЛ СвУдЛичнФЛ
        {
            get
            {
                if ((this.свУдЛичнФЛField == null))
                {
                    this.свУдЛичнФЛField = new ФайлДокументСвИПСвУдЛичнФЛ();
                }
                return this.свУдЛичнФЛField;
            }
            set
            {
                this.свУдЛичнФЛField = value;
            }
        }

        /// <summary>
        /// Сведения о документе, подтверждающем право иностранного гражданина или лица без гражданства временно или постоянно проживать на территории Российской Федерации
        /// </summary>
        public ФайлДокументСвИПСвПравЖитРФ СвПравЖитРФ
        {
            get
            {
                if ((this.свПравЖитРФField == null))
                {
                    this.свПравЖитРФField = new ФайлДокументСвИПСвПравЖитРФ();
                }
                return this.свПравЖитРФField;
            }
            set
            {
                this.свПравЖитРФField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе (месте жительства) индивидуального предпринимателя или главы КФХ
        /// </summary>
        public ФайлДокументСвИПСвАдрМЖ СвАдрМЖ
        {
            get
            {
                if ((this.свАдрМЖField == null))
                {
                    this.свАдрМЖField = new ФайлДокументСвИПСвАдрМЖ();
                }
                return this.свАдрМЖField;
            }
            set
            {
                this.свАдрМЖField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе электронной почты индивидуального предпринимателя или крестьянского (фермерского) хозяйства
        /// </summary>
        public ФайлДокументСвИПСвАдрЭлПочты СвАдрЭлПочты
        {
            get
            {
                if ((this.свАдрЭлПочтыField == null))
                {
                    this.свАдрЭлПочтыField = new ФайлДокументСвИПСвАдрЭлПочты();
                }
                return this.свАдрЭлПочтыField;
            }
            set
            {
                this.свАдрЭлПочтыField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрации индивидуального предпринимателя или крестьянского (фермерского) хозяйства
        /// </summary>
        public ФайлДокументСвИПСвРегИП СвРегИП
        {
            get
            {
                if ((this.свРегИПField == null))
                {
                    this.свРегИПField = new ФайлДокументСвИПСвРегИП();
                }
                return this.свРегИПField;
            }
            set
            {
                this.свРегИПField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрирующем органе по месту жительства индивидуального предпринимателя или главы КФХ
        /// </summary>
        public ФайлДокументСвИПСвРегОрг СвРегОрг
        {
            get
            {
                if ((this.свРегОргField == null))
                {
                    this.свРегОргField = new ФайлДокументСвИПСвРегОрг();
                }
                return this.свРегОргField;
            }
            set
            {
                this.свРегОргField = value;
            }
        }

        /// <summary>
        /// Сведения о состоянии (статусе) индивидуального предпринимателя, КФХ
        /// </summary>
        public ФайлДокументСвИПСвСтатус СвСтатус
        {
            get
            {
                if ((this.свСтатусField == null))
                {
                    this.свСтатусField = new ФайлДокументСвИПСвСтатус();
                }
                return this.свСтатусField;
            }
            set
            {
                this.свСтатусField = value;
            }
        }

        /// <summary>
        /// Сведения о прекращении деятельности в качестве индивидуального предпринимателя или о прекращении КФХ
        /// </summary>
        public ФайлДокументСвИПСвПрекращ СвПрекращ
        {
            get
            {
                if ((this.свПрекращField == null))
                {
                    this.свПрекращField = new ФайлДокументСвИПСвПрекращ();
                }
                return this.свПрекращField;
            }
            set
            {
                this.свПрекращField = value;
            }
        }

        /// <summary>
        /// Сведения об учете в налоговом органе
        /// </summary>
        public ФайлДокументСвИПСвУчетНО СвУчетНО
        {
            get
            {
                if ((this.свУчетНОField == null))
                {
                    this.свУчетНОField = new ФайлДокументСвИПСвУчетНО();
                }
                return this.свУчетНОField;
            }
            set
            {
                this.свУчетНОField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрации в качестве страхователя в территориальном органе Пенсионного фонда Российской Федерации
        /// </summary>
        public ФайлДокументСвИПСвРегПФ СвРегПФ
        {
            get
            {
                if ((this.свРегПФField == null))
                {
                    this.свРегПФField = new ФайлДокументСвИПСвРегПФ();
                }
                return this.свРегПФField;
            }
            set
            {
                this.свРегПФField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрации в качестве страхователя в исполнительном органе Фонда социального страхования Российской Федерации
        /// </summary>
        public ФайлДокументСвИПСвРегФСС СвРегФСС
        {
            get
            {
                if ((this.свРегФССField == null))
                {
                    this.свРегФССField = new ФайлДокументСвИПСвРегФСС();
                }
                return this.свРегФССField;
            }
            set
            {
                this.свРегФССField = value;
            }
        }

        /// <summary>
        /// Сведения о видах экономической деятельности по Общероссийскому классификатору видов экономической деятельности
        /// </summary>
        public ФайлДокументСвИПСвОКВЭД СвОКВЭД
        {
            get
            {
                if ((this.свОКВЭДField == null))
                {
                    this.свОКВЭДField = new ФайлДокументСвИПСвОКВЭД();
                }
                return this.свОКВЭДField;
            }
            set
            {
                this.свОКВЭДField = value;
            }
        }

        /// <summary>
        /// Сведения о лицензиях, выданных индивидуальному предпринимателю
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвЛицензия")]
        public List<ФайлДокументСвИПСвЛицензия> СвЛицензия
        {
            get
            {
                if ((this.свЛицензияField == null))
                {
                    this.свЛицензияField = new List<ФайлДокументСвИПСвЛицензия>();
                }
                return this.свЛицензияField;
            }
            set
            {
                this.свЛицензияField = value;
            }
        }

        /// <summary>
        /// Сведения о записях, внесенных в ЕГРИП
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвЗапЕГРИП")]
        public List<ФайлДокументСвИПСвЗапЕГРИП> СвЗапЕГРИП
        {
            get
            {
                if ((this.свЗапЕГРИПField == null))
                {
                    this.свЗапЕГРИПField = new List<ФайлДокументСвИПСвЗапЕГРИП>();
                }
                return this.свЗапЕГРИПField;
            }
            set
            {
                this.свЗапЕГРИПField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИП));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИП object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИП object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИП object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИП obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИП);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИП obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИП Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИП)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИП object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИП object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИП object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИП obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИП);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИП obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИП obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИП LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИП LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Фамилия, имя, отчество и пол индивидуального предпринимателя или главы КФХ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвФЛ
    {

        private ФИО1Тип фИОРусField;

        private ФИО1Тип фИОЛатField;

        private ГРНИПДатаТип гРНИПДатаField;

        private ГРНИПДатаТип гРНИПДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Пол
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументСвИПСвФЛПол Пол { get; set; }


        /// <summary>
        /// Фамилия, имя, отчество физического лица на русском языке
        /// </summary>
        public ФИО1Тип ФИОРус
        {
            get
            {
                if ((this.фИОРусField == null))
                {
                    this.фИОРусField = new ФИО1Тип();
                }
                return this.фИОРусField;
            }
            set
            {
                this.фИОРусField = value;
            }
        }

        /// <summary>
        /// Фамилия, имя, отчество физического лица с использованием букв латинского алфавита
        /// </summary>
        public ФИО1Тип ФИОЛат
        {
            get
            {
                if ((this.фИОЛатField == null))
                {
                    this.фИОЛатField = new ФИО1Тип();
                }
                return this.фИОЛатField;
            }
            set
            {
                this.фИОЛатField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНИПДатаТип ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвФЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвФЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвФЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвФЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвФЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвФЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвФЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвФЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвФЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлДокументСвИПСвФЛПол
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
    }

    /// <summary>
    /// Сведения о рождении
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвРожд
    {

        private ГРНИПДатаТип гРНИПДатаField;

        private ГРНИПДатаТип гРНИПДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Дата рождения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРожд { get; set; }

        /// <summary>
        /// Место рождения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string МестоРожд { get; set; }

        /// <summary>
        /// Признак полноты представляемой даты рождения физического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументСвИПСвРождПрДатаРожд ПрДатаРожд { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ПрДатаРождSpecified { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНИПДатаТип ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвРожд));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвРожд object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвРожд object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвРожд object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвРожд obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвРожд);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвРожд obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвРожд Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвРожд)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвРожд object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвРожд object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвРожд object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвРожд obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвРожд);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвРожд obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвРожд obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвРожд LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвРожд LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлДокументСвИПСвРождПрДатаРожд
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    /// <summary>
    /// Сведения о гражданстве
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвГражд
    {

        private ГРНИПДатаТип гРНИПДатаField;

        private ГРНИПДатаТип гРНИПДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Вид гражданства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументСвИПСвГраждВидГражд ВидГражд { get; set; }

        /// <summary>
        /// Код страны, гражданином которой является физическое лицо
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОКСМ { get; set; }

        /// <summary>
        /// Наименование страны по справочнику ОКСМ, гражданином которой является физическое лицо
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСтран { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНИПДатаТип ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвГражд));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвГражд object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвГражд object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвГражд object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвГражд obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвГражд);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвГражд obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвГражд Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвГражд)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвГражд object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвГражд object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвГражд object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвГражд obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвГражд);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвГражд obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвГражд obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвГражд LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвГражд LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлДокументСвИПСвГраждВидГражд
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }

    /// <summary>
    /// Сведения о документе, удостоверяющем личность физического лица
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвУдЛичнФЛ
    {

        private УдЛичнТипР удЛичнФЛField;

        private ГРНИПДатаТип гРНИПДатаField;

        private ГРНИПДатаТип гРНИПДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Данные документа, удостоверяющего личность
        /// </summary>
        public УдЛичнТипР УдЛичнФЛ
        {
            get
            {
                if ((this.удЛичнФЛField == null))
                {
                    this.удЛичнФЛField = new УдЛичнТипР();
                }
                return this.удЛичнФЛField;
            }
            set
            {
                this.удЛичнФЛField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНИПДатаТип ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвУдЛичнФЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвУдЛичнФЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвУдЛичнФЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвУдЛичнФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвУдЛичнФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвУдЛичнФЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвУдЛичнФЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвУдЛичнФЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвУдЛичнФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвУдЛичнФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвУдЛичнФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвУдЛичнФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвУдЛичнФЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвУдЛичнФЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвУдЛичнФЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвУдЛичнФЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвУдЛичнФЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвУдЛичнФЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о документе, подтверждающем право иностранного гражданина или лица без гражданства временно или постоянно проживать на территории Российской Федерации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвПравЖитРФ
    {

        private УдЛичнТипР докПравЖитРФField;

        private ГРНИПДатаТип гРНИПДатаField;

        private ГРНИПДатаТип гРНИПДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Срок действия документа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime СрокДействДок { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СрокДействДокSpecified { get; set; }


        /// <summary>
        /// Вид и данные документа, подтверждающего право физического лица временно или постоянно проживать на территории Российской Федерации
        /// </summary>
        public УдЛичнТипР ДокПравЖитРФ
        {
            get
            {
                if ((this.докПравЖитРФField == null))
                {
                    this.докПравЖитРФField = new УдЛичнТипР();
                }
                return this.докПравЖитРФField;
            }
            set
            {
                this.докПравЖитРФField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНИПДатаТип ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвПравЖитРФ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвПравЖитРФ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвПравЖитРФ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвПравЖитРФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвПравЖитРФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвПравЖитРФ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвПравЖитРФ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвПравЖитРФ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвПравЖитРФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвПравЖитРФ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвПравЖитРФ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвПравЖитРФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвПравЖитРФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвПравЖитРФ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвПравЖитРФ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвПравЖитРФ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвПравЖитРФ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвПравЖитРФ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об адресе (месте жительства) индивидуального предпринимателя или главы КФХ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвАдрМЖ
    {

        private АдрРФТипВып адресРФField;

        private АдрФИАСЕГРИПТип адрМЖФИАСField;

        private ГРНИПДатаТип гРНИПДатаField;

        private ГРНИПДатаТип гРНИПДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Адрес (место жительства) индивидуального предпринимателя или главы КФХ (в структуре КЛАДР)
        /// </summary>
        public АдрРФТипВып АдресРФ
        {
            get
            {
                if ((this.адресРФField == null))
                {
                    this.адресРФField = new АдрРФТипВып();
                }
                return this.адресРФField;
            }
            set
            {
                this.адресРФField = value;
            }
        }

        /// <summary>
        /// Адрес (место жительства) индивидуального предпринимателя или главы КФХ (в структуре ФИАС)
        /// </summary>
        public АдрФИАСЕГРИПТип АдрМЖФИАС
        {
            get
            {
                if ((this.адрМЖФИАСField == null))
                {
                    this.адрМЖФИАСField = new АдрФИАСЕГРИПТип();
                }
                return this.адрМЖФИАСField;
            }
            set
            {
                this.адрМЖФИАСField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНИПДатаТип ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвАдрМЖ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвАдрМЖ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвАдрМЖ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвАдрМЖ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвАдрМЖ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвАдрМЖ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвАдрМЖ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвАдрМЖ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвАдрМЖ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвАдрМЖ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвАдрМЖ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвАдрМЖ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвАдрМЖ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвАдрМЖ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвАдрМЖ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвАдрМЖ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвАдрМЖ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвАдрМЖ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об адресе электронной почты индивидуального предпринимателя или крестьянского (фермерского) хозяйства
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвАдрЭлПочты
    {

        private ГРНИПДатаТип гРНИПДатаField;

        private ГРНИПДатаТип гРНИПДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute("E-mail")]
        public string Email { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНИПДатаТип ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвАдрЭлПочты));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвАдрЭлПочты object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвАдрЭлПочты object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвАдрЭлПочты object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвАдрЭлПочты obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвАдрЭлПочты);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвАдрЭлПочты obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвАдрЭлПочты Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвАдрЭлПочты)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвАдрЭлПочты object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвАдрЭлПочты object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвАдрЭлПочты object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвАдрЭлПочты obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвАдрЭлПочты);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвАдрЭлПочты obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвАдрЭлПочты obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвАдрЭлПочты LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвАдрЭлПочты LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о регистрации индивидуального предпринимателя или крестьянского (фермерского) хозяйства
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвРегИП
    {

        private ФайлДокументСвИПСвРегИПСвКФХ свКФХField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Основной государственный регистрационный номер
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРНИП { get; set; }

        /// <summary>
        /// Дата присвоения ОГРНИП
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаОГРНИП { get; set; }

        /// <summary>
        /// Регистрационный номер, присвоенный до 1 января 2004 года
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string РегНом { get; set; }

        /// <summary>
        /// Дата регистрации до 1 января 2004 года
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРег { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаРегSpecified { get; set; }

        /// <summary>
        /// Наименование органа, зарегистрировавшего ИП или КФХ до 1 января 2004 года
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимРО { get; set; }


        /// <summary>
        /// Сведения о крестьянском (фермерском) хозяйстве, созданном до 1 января 1995 года, содержащиеся в ЕГРЮЛ
        /// </summary>
        public ФайлДокументСвИПСвРегИПСвКФХ СвКФХ
        {
            get
            {
                if ((this.свКФХField == null))
                {
                    this.свКФХField = new ФайлДокументСвИПСвРегИПСвКФХ();
                }
                return this.свКФХField;
            }
            set
            {
                this.свКФХField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвРегИП));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвРегИП object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвРегИП object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвРегИП object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвРегИП obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвРегИП);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвРегИП obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвРегИП Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвРегИП)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвРегИП object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвРегИП object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвРегИП object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвРегИП obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвРегИП);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвРегИП obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвРегИП obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвРегИП LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвРегИП LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о крестьянском (фермерском) хозяйстве, созданном до 1 января 1995 года, содержащиеся в ЕГРЮЛ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвРегИПСвКФХ
    {

        private ГРНИПДатаТип гРНИПДатаField;

        private ГРНИПДатаТип гРНИПДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ОГРН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }

        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }

        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНИПДатаТип ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвРегИПСвКФХ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвРегИПСвКФХ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвРегИПСвКФХ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвРегИПСвКФХ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвРегИПСвКФХ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвРегИПСвКФХ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвРегИПСвКФХ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвРегИПСвКФХ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвРегИПСвКФХ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвРегИПСвКФХ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвРегИПСвКФХ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвРегИПСвКФХ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвРегИПСвКФХ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвРегИПСвКФХ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвРегИПСвКФХ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвРегИПСвКФХ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвРегИПСвКФХ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвРегИПСвКФХ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о регистрирующем органе по месту жительства индивидуального предпринимателя или главы КФХ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвРегОрг
    {

        private ГРНИПДатаТип гРНИПДатаField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код органа по справочнику СОУН
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодНО { get; set; }

        /// <summary>
        /// Наименование регистрирующего (налогового) органа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимНО { get; set; }

        /// <summary>
        /// Адрес регистрирующего органа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string АдрРО { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвРегОрг));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвРегОрг object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвРегОрг object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвРегОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвРегОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвРегОрг);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвРегОрг obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвРегОрг Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвРегОрг)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвРегОрг object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвРегОрг object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвРегОрг object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвРегОрг obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвРегОрг);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвРегОрг obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвРегОрг obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвРегОрг LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвРегОрг LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о состоянии (статусе) индивидуального предпринимателя, КФХ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвСтатус
    {

        private ФайлДокументСвИПСвСтатусСвСтатус свСтатусField;

        private ФайлДокументСвИПСвСтатусСвРешИсклИП свРешИсклИПField;

        private ГРНИПДатаТип гРНИПДатаField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения о правоспособности (статусе) индивидуального предпринимателя, КФХ
        /// </summary>
        public ФайлДокументСвИПСвСтатусСвСтатус СвСтатус
        {
            get
            {
                if ((this.свСтатусField == null))
                {
                    this.свСтатусField = new ФайлДокументСвИПСвСтатусСвСтатус();
                }
                return this.свСтатусField;
            }
            set
            {
                this.свСтатусField = value;
            }
        }

        /// <summary>
        /// Сведения о решении о предстоящем исключении недействующего индивидуального предпринимателя из ЕГРИП и его публикации
        /// </summary>
        public ФайлДокументСвИПСвСтатусСвРешИсклИП СвРешИсклИП
        {
            get
            {
                if ((this.свРешИсклИПField == null))
                {
                    this.свРешИсклИПField = new ФайлДокументСвИПСвСтатусСвРешИсклИП();
                }
                return this.свРешИсклИПField;
            }
            set
            {
                this.свРешИсклИПField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвСтатус));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвСтатус object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвСтатус object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвСтатус);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвСтатус obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвСтатус Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвСтатус object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвСтатус object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвСтатус);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвСтатус obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвСтатус obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвСтатус LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвСтатус LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о правоспособности (статусе) индивидуального предпринимателя, КФХ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвСтатусСвСтатус
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код статуса по справочнику СИПСТ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСтатус { get; set; }

        /// <summary>
        /// Наименование статуса по справочнику СИПСТ (состояние)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСтатус { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвСтатусСвСтатус));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвСтатусСвСтатус object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвСтатусСвСтатус object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвСтатусСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвСтатусСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвСтатусСвСтатус);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвСтатусСвСтатус obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвСтатусСвСтатус Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвСтатусСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвСтатусСвСтатус object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвСтатусСвСтатус object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвСтатусСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвСтатусСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвСтатусСвСтатус);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвСтатусСвСтатус obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвСтатусСвСтатус obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвСтатусСвСтатус LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвСтатусСвСтатус LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о решении о предстоящем исключении недействующего индивидуального предпринимателя из ЕГРИП и его публикации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвСтатусСвРешИсклИП
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Дата решения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРеш { get; set; }

        /// <summary>
        /// Номер решения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомерРеш { get; set; }

        /// <summary>
        /// Дата публикации решения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаПубликации { get; set; }

        /// <summary>
        /// Номер журнала, в котором опубликовано решение
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомерЖурнала { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвСтатусСвРешИсклИП));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвСтатусСвРешИсклИП object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвСтатусСвРешИсклИП object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвСтатусСвРешИсклИП object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвСтатусСвРешИсклИП obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвСтатусСвРешИсклИП);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвСтатусСвРешИсклИП obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвСтатусСвРешИсклИП Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвСтатусСвРешИсклИП)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвСтатусСвРешИсклИП object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвСтатусСвРешИсклИП object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвСтатусСвРешИсклИП object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвСтатусСвРешИсклИП obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвСтатусСвРешИсклИП);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвСтатусСвРешИсклИП obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвСтатусСвРешИсклИП obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвСтатусСвРешИсклИП LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвСтатусСвРешИсклИП LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о прекращении деятельности в качестве индивидуального предпринимателя или о прекращении КФХ
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвПрекращ
    {

        private ФайлДокументСвИПСвПрекращСвСтатус свСтатусField;

        private ГРНИПДатаТип гРНИПДатаField;

        private ФайлДокументСвИПСвПрекращСвНовЮЛ свНовЮЛField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения о способе прекращения
        /// </summary>
        public ФайлДокументСвИПСвПрекращСвСтатус СвСтатус
        {
            get
            {
                if ((this.свСтатусField == null))
                {
                    this.свСтатусField = new ФайлДокументСвИПСвПрекращСвСтатус();
                }
                return this.свСтатусField;
            }
            set
            {
                this.свСтатусField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        /// <summary>
        /// Сведения о юридическом лице, созданном на базе крестьянского (фермерского) хозяйства
        /// </summary>
        public ФайлДокументСвИПСвПрекращСвНовЮЛ СвНовЮЛ
        {
            get
            {
                if ((this.свНовЮЛField == null))
                {
                    this.свНовЮЛField = new ФайлДокументСвИПСвПрекращСвНовЮЛ();
                }
                return this.свНовЮЛField;
            }
            set
            {
                this.свНовЮЛField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвПрекращ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвПрекращ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвПрекращ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвПрекращ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвПрекращ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвПрекращ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвПрекращ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвПрекращ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвПрекращ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвПрекращ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвПрекращ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвПрекращ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвПрекращ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвПрекращ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвПрекращ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвПрекращ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвПрекращ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвПрекращ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о способе прекращения
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвПрекращСвСтатус
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код способа прекращения по справочнику СИППД
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСтатус { get; set; }

        /// <summary>
        /// Наименование способа прекращения по справочнику СИППД
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимСтатус { get; set; }

        /// <summary>
        /// Дата прекращения
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаПрекращ { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвПрекращСвСтатус));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвПрекращСвСтатус object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвПрекращСвСтатус object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвПрекращСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвПрекращСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвПрекращСвСтатус);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвПрекращСвСтатус obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвПрекращСвСтатус Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвПрекращСвСтатус)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвПрекращСвСтатус object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвПрекращСвСтатус object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвПрекращСвСтатус object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвПрекращСвСтатус obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвПрекращСвСтатус);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвПрекращСвСтатус obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвПрекращСвСтатус obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвПрекращСвСтатус LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвПрекращСвСтатус LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о юридическом лице, созданном на базе крестьянского (фермерского) хозяйства
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвПрекращСвНовЮЛ
    {

        private ГРНИПДатаТип гРНИПДатаField;

        private ГРНИПДатаТип гРНИПДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Основной государственный регистрационный номер юридического лица, созданного на базе имущества крестьянского (фермерского) хозяйства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОГРН { get; set; }

        /// <summary>
        /// ИНН юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН { get; set; }

        /// <summary>
        /// Полное наименование юридического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимЮЛПолн { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНИПДатаТип ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвПрекращСвНовЮЛ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвПрекращСвНовЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвПрекращСвНовЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвПрекращСвНовЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвПрекращСвНовЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвПрекращСвНовЮЛ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвПрекращСвНовЮЛ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвПрекращСвНовЮЛ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвПрекращСвНовЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвПрекращСвНовЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвПрекращСвНовЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвПрекращСвНовЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвПрекращСвНовЮЛ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвПрекращСвНовЮЛ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвПрекращСвНовЮЛ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвПрекращСвНовЮЛ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвПрекращСвНовЮЛ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвПрекращСвНовЮЛ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об учете в налоговом органе
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвУчетНО
    {

        private ФайлДокументСвИПСвУчетНОСвНО свНОField;

        private ГРНИПДатаТип гРНИПДатаField;

        private ГРНИПДатаТип гРНИПДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ИНН физического лица
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИННФЛ { get; set; }

        /// <summary>
        /// Дата постановки на учет в налоговом органе
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаПостУч { get; set; }


        /// <summary>
        /// Сведения о налоговом органе, в котором ИП (глава КФХ) состоит (для ИП (КФХ), прекративших деятельность - состояли) на учете
        /// </summary>
        public ФайлДокументСвИПСвУчетНОСвНО СвНО
        {
            get
            {
                if ((this.свНОField == null))
                {
                    this.свНОField = new ФайлДокументСвИПСвУчетНОСвНО();
                }
                return this.свНОField;
            }
            set
            {
                this.свНОField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНИПДатаТип ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвУчетНО));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвУчетНО object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвУчетНО object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвУчетНО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвУчетНО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвУчетНО);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвУчетНО obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвУчетНО Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвУчетНО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвУчетНО object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвУчетНО object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвУчетНО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвУчетНО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвУчетНО);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвУчетНО obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвУчетНО obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвУчетНО LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвУчетНО LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о налоговом органе, в котором ИП (глава КФХ) состоит (для ИП (КФХ), прекративших деятельность - состояли) на учете
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвУчетНОСвНО
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код органа по справочнику СОУН
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодНО { get; set; }

        /// <summary>
        /// Наименование налогового органа
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимНО { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвУчетНОСвНО));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвУчетНОСвНО object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвУчетНОСвНО object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвУчетНОСвНО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвУчетНОСвНО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвУчетНОСвНО);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвУчетНОСвНО obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвУчетНОСвНО Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвУчетНОСвНО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвУчетНОСвНО object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвУчетНОСвНО object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвУчетНОСвНО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвУчетНОСвНО obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвУчетНОСвНО);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвУчетНОСвНО obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвУчетНОСвНО obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвУчетНОСвНО LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвУчетНОСвНО LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о регистрации в качестве страхователя в территориальном органе Пенсионного фонда Российской Федерации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвРегПФ
    {

        private ФайлДокументСвИПСвРегПФСвОргПФ свОргПФField;

        private ГРНИПДатаТип гРНИПДатаField;

        private ГРНИПДатаТип гРНИПДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Регистрационный номер в территориальном органе Пенсионного фонда Российской Федерации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string РегНомПФ { get; set; }

        /// <summary>
        /// Дата регистрации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРег { get; set; }


        /// <summary>
        /// Сведения о территориальном органе Пенсионного фонда Российской Федерации
        /// </summary>
        public ФайлДокументСвИПСвРегПФСвОргПФ СвОргПФ
        {
            get
            {
                if ((this.свОргПФField == null))
                {
                    this.свОргПФField = new ФайлДокументСвИПСвРегПФСвОргПФ();
                }
                return this.свОргПФField;
            }
            set
            {
                this.свОргПФField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНИПДатаТип ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвРегПФ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвРегПФ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвРегПФ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвРегПФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвРегПФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвРегПФ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвРегПФ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвРегПФ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвРегПФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвРегПФ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвРегПФ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвРегПФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвРегПФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвРегПФ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвРегПФ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвРегПФ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвРегПФ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвРегПФ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о территориальном органе Пенсионного фонда Российской Федерации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвРегПФСвОргПФ
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код по справочнику СТОПФ
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодПФ { get; set; }

        /// <summary>
        /// Наименование территориального органа Пенсионного фонда
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимПФ { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвРегПФСвОргПФ));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвРегПФСвОргПФ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвРегПФСвОргПФ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвРегПФСвОргПФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвРегПФСвОргПФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвРегПФСвОргПФ);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвРегПФСвОргПФ obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвРегПФСвОргПФ Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвРегПФСвОргПФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвРегПФСвОргПФ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвРегПФСвОргПФ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвРегПФСвОргПФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвРегПФСвОргПФ obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвРегПФСвОргПФ);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвРегПФСвОргПФ obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвРегПФСвОргПФ obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвРегПФСвОргПФ LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвРегПФСвОргПФ LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о регистрации в качестве страхователя в исполнительном органе Фонда социального страхования Российской Федерации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвРегФСС
    {

        private ФайлДокументСвИПСвРегФСССвОргФСС свОргФССField;

        private ГРНИПДатаТип гРНИПДатаField;

        private ГРНИПДатаТип гРНИПДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Регистрационный номер в исполнительном органе Фонда социального страхования Российской Федерации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string РегНомФСС { get; set; }

        /// <summary>
        /// Дата регистрации
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаРег { get; set; }


        /// <summary>
        /// Сведения об исполнительном органе Фонда социального страхования Российской Федерации
        /// </summary>
        public ФайлДокументСвИПСвРегФСССвОргФСС СвОргФСС
        {
            get
            {
                if ((this.свОргФССField == null))
                {
                    this.свОргФССField = new ФайлДокументСвИПСвРегФСССвОргФСС();
                }
                return this.свОргФССField;
            }
            set
            {
                this.свОргФССField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНИПДатаТип ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвРегФСС));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвРегФСС object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвРегФСС object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвРегФСС object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвРегФСС obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвРегФСС);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвРегФСС obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвРегФСС Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвРегФСС)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвРегФСС object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвРегФСС object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвРегФСС object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвРегФСС obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвРегФСС);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвРегФСС obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвРегФСС obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвРегФСС LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвРегФСС LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения об исполнительном органе Фонда социального страхования Российской Федерации
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвРегФСССвОргФСС
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Код по справочнику СТОФСС
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодФСС { get; set; }

        /// <summary>
        /// Наименование исполнительного органа Фонда социального страхования
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимФСС { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвРегФСССвОргФСС));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвРегФСССвОргФСС object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвРегФСССвОргФСС object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвРегФСССвОргФСС object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвРегФСССвОргФСС obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвРегФСССвОргФСС);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвРегФСССвОргФСС obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвРегФСССвОргФСС Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвРегФСССвОргФСС)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвРегФСССвОргФСС object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвРегФСССвОргФСС object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвРегФСССвОргФСС object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвРегФСССвОргФСС obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвРегФСССвОргФСС);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвРегФСССвОргФСС obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвРегФСССвОргФСС obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвРегФСССвОргФСС LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвРегФСССвОргФСС LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о видах экономической деятельности по Общероссийскому классификатору видов экономической деятельности
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвОКВЭД
    {

        private СвОКВЭДТип свОКВЭДОснField;

        private List<СвОКВЭДТип> свОКВЭДДопField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Сведения об основном виде деятельности
        /// </summary>
        public СвОКВЭДТип СвОКВЭДОсн
        {
            get
            {
                if ((this.свОКВЭДОснField == null))
                {
                    this.свОКВЭДОснField = new СвОКВЭДТип();
                }
                return this.свОКВЭДОснField;
            }
            set
            {
                this.свОКВЭДОснField = value;
            }
        }

        /// <summary>
        /// Сведения о дополнительном виде деятельности
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвОКВЭДДоп")]
        public List<СвОКВЭДТип> СвОКВЭДДоп
        {
            get
            {
                if ((this.свОКВЭДДопField == null))
                {
                    this.свОКВЭДДопField = new List<СвОКВЭДТип>();
                }
                return this.свОКВЭДДопField;
            }
            set
            {
                this.свОКВЭДДопField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвОКВЭД));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвОКВЭД object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвОКВЭД object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвОКВЭД object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвОКВЭД obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвОКВЭД);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвОКВЭД obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвОКВЭД Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвОКВЭД)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвОКВЭД object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвОКВЭД object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвОКВЭД object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвОКВЭД obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвОКВЭД);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвОКВЭД obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвОКВЭД obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвОКВЭД LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвОКВЭД LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о лицензиях, выданных индивидуальному предпринимателю
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвЛицензия
    {

        private List<string> наимЛицВидДеятField;

        private List<string> местоДейстЛицField;

        private ГРНИПДатаТип гРНИПДатаField;

        private ГРНИПДатаТип гРНИПДатаИспрField;

        private ФайлДокументСвИПСвЛицензияСвПриостЛиц свПриостЛицField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Наименование лицензирующего органа, выдавшего или переоформившего лицензию
        /// </summary>
        public string ЛицОргВыдЛиц { get; set; }

        /// <summary>
        /// Серия и номер лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомЛиц { get; set; }

        /// <summary>
        /// Дата лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаЛиц { get; set; }

        /// <summary>
        /// Дата начала действия лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаНачЛиц { get; set; }

        /// <summary>
        /// Дата окончания действия лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаОкончЛиц { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаОкончЛицSpecified { get; set; }


        /// <summary>
        /// Наименование лицензируемого вида деятельности, на который выдана лицензия
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("НаимЛицВидДеят")]
        public List<string> НаимЛицВидДеят
        {
            get
            {
                if ((this.наимЛицВидДеятField == null))
                {
                    this.наимЛицВидДеятField = new List<string>();
                }
                return this.наимЛицВидДеятField;
            }
            set
            {
                this.наимЛицВидДеятField = value;
            }
        }

        /// <summary>
        /// Сведения об адресе места осуществления лицензируемого вида деятельности
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("МестоДейстЛиц")]
        public List<string> МестоДейстЛиц
        {
            get
            {
                if ((this.местоДейстЛицField == null))
                {
                    this.местоДейстЛицField = new List<string>();
                }
                return this.местоДейстЛицField;
            }
            set
            {
                this.местоДейстЛицField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНИПДатаТип ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        /// <summary>
        /// Сведения о приостановлении действия лицензии
        /// </summary>
        public ФайлДокументСвИПСвЛицензияСвПриостЛиц СвПриостЛиц
        {
            get
            {
                if ((this.свПриостЛицField == null))
                {
                    this.свПриостЛицField = new ФайлДокументСвИПСвЛицензияСвПриостЛиц();
                }
                return this.свПриостЛицField;
            }
            set
            {
                this.свПриостЛицField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвЛицензия));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвЛицензия object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвЛицензия object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвЛицензия object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвЛицензия obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвЛицензия);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвЛицензия obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвЛицензия Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвЛицензия)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвЛицензия object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвЛицензия object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвЛицензия object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвЛицензия obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвЛицензия);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвЛицензия obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвЛицензия obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвЛицензия LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвЛицензия LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о приостановлении действия лицензии
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвЛицензияСвПриостЛиц
    {

        private ГРНИПДатаТип гРНИПДатаField;

        private ГРНИПДатаТип гРНИПДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Дата приостановления действия лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаПриостЛиц { get; set; }

        /// <summary>
        /// Наименование лицензирующего органа, приостановившего действие лицензии
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ЛицОргПриостЛиц { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей указанные сведения
        /// </summary>
        public ГРНИПДатаТип ГРНИПДата
        {
            get
            {
                if ((this.гРНИПДатаField == null))
                {
                    this.гРНИПДатаField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаField;
            }
            set
            {
                this.гРНИПДатаField = value;
            }
        }

        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи об исправлении технической ошибки в указанных сведениях
        /// </summary>
        public ГРНИПДатаТип ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвЛицензияСвПриостЛиц));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвЛицензияСвПриостЛиц object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвЛицензияСвПриостЛиц object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвЛицензияСвПриостЛиц object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвЛицензияСвПриостЛиц obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвЛицензияСвПриостЛиц);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвЛицензияСвПриостЛиц obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвЛицензияСвПриостЛиц Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвЛицензияСвПриостЛиц)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвЛицензияСвПриостЛиц object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвЛицензияСвПриостЛиц object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвЛицензияСвПриостЛиц object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвЛицензияСвПриостЛиц obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвЛицензияСвПриостЛиц);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвЛицензияСвПриостЛиц obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвЛицензияСвПриостЛиц obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвЛицензияСвПриостЛиц LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвЛицензияСвПриостЛиц LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о записях, внесенных в ЕГРИП
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвЗапЕГРИП
    {

        private ВидЗапТип видЗапField;

        private СвРегОргТип свРегОргField;

        private List<ФайлДокументСвИПСвЗапЕГРИПСведПредДок> сведПредДокField;

        private List<ФайлДокументСвИПСвЗапЕГРИПСвСвид> свСвидField;

        private ИдГРНИПДатаТип гРНИПДатаИспрПредField;

        private ИдГРНИПДатаТип гРНИПДатаНедПредField;

        private ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап свСтатусЗапField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Системный идентификатор записи
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string ИдЗап { get; set; }

        /// <summary>
        /// Государственный регистрационный номер записи
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ГРНИП { get; set; }

        /// <summary>
        /// Дата внесения записи в ЕГРИП
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаЗап { get; set; }


        /// <summary>
        /// Сведения о причине внесения записи в ЕГРИП
        /// </summary>
        public ВидЗапТип ВидЗап
        {
            get
            {
                if ((this.видЗапField == null))
                {
                    this.видЗапField = new ВидЗапТип();
                }
                return this.видЗапField;
            }
            set
            {
                this.видЗапField = value;
            }
        }

        /// <summary>
        /// Сведения о регистрирующем (налоговом) органе, внесшем запись в ЕГРИП
        /// </summary>
        public СвРегОргТип СвРегОрг
        {
            get
            {
                if ((this.свРегОргField == null))
                {
                    this.свРегОргField = new СвРегОргТип();
                }
                return this.свРегОргField;
            }
            set
            {
                this.свРегОргField = value;
            }
        }

        /// <summary>
        /// Сведения о документах, представленных при внесении записи в ЕГРИП
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СведПредДок")]
        public List<ФайлДокументСвИПСвЗапЕГРИПСведПредДок> СведПредДок
        {
            get
            {
                if ((this.сведПредДокField == null))
                {
                    this.сведПредДокField = new List<ФайлДокументСвИПСвЗапЕГРИПСведПредДок>();
                }
                return this.сведПредДокField;
            }
            set
            {
                this.сведПредДокField = value;
            }
        }

        /// <summary>
        /// Сведения о свидетельстве, подтверждающем факт внесения записи в ЕГРИП
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("СвСвид")]
        public List<ФайлДокументСвИПСвЗапЕГРИПСвСвид> СвСвид
        {
            get
            {
                if ((this.свСвидField == null))
                {
                    this.свСвидField = new List<ФайлДокументСвИПСвЗапЕГРИПСвСвид>();
                }
                return this.свСвидField;
            }
            set
            {
                this.свСвидField = value;
            }
        }

        /// <summary>
        /// ГРН и дата записи, в которую внесены исправления
        /// </summary>
        public ИдГРНИПДатаТип ГРНИПДатаИспрПред
        {
            get
            {
                if ((this.гРНИПДатаИспрПредField == null))
                {
                    this.гРНИПДатаИспрПредField = new ИдГРНИПДатаТип();
                }
                return this.гРНИПДатаИспрПредField;
            }
            set
            {
                this.гРНИПДатаИспрПредField = value;
            }
        }

        /// <summary>
        /// ГРН и дата записи, которая признана недействительной
        /// </summary>
        public ИдГРНИПДатаТип ГРНИПДатаНедПред
        {
            get
            {
                if ((this.гРНИПДатаНедПредField == null))
                {
                    this.гРНИПДатаНедПредField = new ИдГРНИПДатаТип();
                }
                return this.гРНИПДатаНедПредField;
            }
            set
            {
                this.гРНИПДатаНедПредField = value;
            }
        }

        /// <summary>
        /// Сведения о статусе записи
        /// </summary>
        public ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап СвСтатусЗап
        {
            get
            {
                if ((this.свСтатусЗапField == null))
                {
                    this.свСтатусЗапField = new ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап();
                }
                return this.свСтатусЗапField;
            }
            set
            {
                this.свСтатусЗапField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвЗапЕГРИП));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвЗапЕГРИП object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвЗапЕГРИП object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвЗапЕГРИП object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвЗапЕГРИП obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвЗапЕГРИП);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвЗапЕГРИП obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвЗапЕГРИП Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвЗапЕГРИП)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвЗапЕГРИП object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвЗапЕГРИП object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвЗапЕГРИП object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвЗапЕГРИП obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвЗапЕГРИП);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвЗапЕГРИП obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвЗапЕГРИП obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвЗапЕГРИП LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвЗапЕГРИП LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о документах, представленных при внесении записи в ЕГРИП
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвЗапЕГРИПСведПредДок
    {

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Наименование документа
        /// </summary>
        public string НаимДок { get; set; }

        /// <summary>
        /// Номер документа
        /// </summary>
        public string НомДок { get; set; }

        /// <summary>
        /// Дата документа
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime ДатаДок { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДатаДокSpecified { get; set; }


        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвЗапЕГРИПСведПредДок));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвЗапЕГРИПСведПредДок object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвЗапЕГРИПСведПредДок object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвЗапЕГРИПСведПредДок object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвЗапЕГРИПСведПредДок obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвЗапЕГРИПСведПредДок);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвЗапЕГРИПСведПредДок obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвЗапЕГРИПСведПредДок Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвЗапЕГРИПСведПредДок)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвЗапЕГРИПСведПредДок object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвЗапЕГРИПСведПредДок object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвЗапЕГРИПСведПредДок object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвЗапЕГРИПСведПредДок obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвЗапЕГРИПСведПредДок);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвЗапЕГРИПСведПредДок obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвЗапЕГРИПСведПредДок obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвЗапЕГРИПСведПредДок LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвЗапЕГРИПСведПредДок LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о свидетельстве, подтверждающем факт внесения записи в ЕГРИП
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвЗапЕГРИПСвСвид
    {

        private ГРНИПДатаТип гРНИПДатаСвидНедField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Серия бланка свидетельства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Серия { get; set; }

        /// <summary>
        /// Номер бланка свидетельства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер { get; set; }

        /// <summary>
        /// Дата выдачи свидетельства
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime ДатаВыдСвид { get; set; }


        /// <summary>
        /// ГРН и дата внесения в ЕГРИП записи, содержащей сведения о признании свидетельства недействительным по решению суда
        /// </summary>
        public ГРНИПДатаТип ГРНИПДатаСвидНед
        {
            get
            {
                if ((this.гРНИПДатаСвидНедField == null))
                {
                    this.гРНИПДатаСвидНедField = new ГРНИПДатаТип();
                }
                return this.гРНИПДатаСвидНедField;
            }
            set
            {
                this.гРНИПДатаСвидНедField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвЗапЕГРИПСвСвид));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвЗапЕГРИПСвСвид object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвЗапЕГРИПСвСвид object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвЗапЕГРИПСвСвид object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвЗапЕГРИПСвСвид obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвЗапЕГРИПСвСвид);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвЗапЕГРИПСвСвид obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвЗапЕГРИПСвСвид Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвЗапЕГРИПСвСвид)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвЗапЕГРИПСвСвид object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвЗапЕГРИПСвСвид object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвЗапЕГРИПСвСвид object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвЗапЕГРИПСвСвид obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвЗапЕГРИПСвСвид);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвЗапЕГРИПСвСвид obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвЗапЕГРИПСвСвид obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвЗапЕГРИПСвСвид LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвЗапЕГРИПСвСвид LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Сведения о статусе записи
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап
    {

        private ИдГРНИПДатаТип гРНИПДатаНедField;

        private List<ИдГРНИПДатаТип> гРНИПДатаИспрField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// ГРН и дата внесения записи, которой запись признана недействительной
        /// </summary>
        public ИдГРНИПДатаТип ГРНИПДатаНед
        {
            get
            {
                if ((this.гРНИПДатаНедField == null))
                {
                    this.гРНИПДатаНедField = new ИдГРНИПДатаТип();
                }
                return this.гРНИПДатаНедField;
            }
            set
            {
                this.гРНИПДатаНедField = value;
            }
        }

        /// <summary>
        /// ГРН и дата записи, которой внесены исправления в связи с технической ошибкой
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ГРНИПДатаИспр")]
        public List<ИдГРНИПДатаТип> ГРНИПДатаИспр
        {
            get
            {
                if ((this.гРНИПДатаИспрField == null))
                {
                    this.гРНИПДатаИспрField = new List<ИдГРНИПДатаТип>();
                }
                return this.гРНИПДатаИспрField;
            }
            set
            {
                this.гРНИПДатаИспрField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.Default);
        }

        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.Default, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.Default);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.Default);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.Default, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.Default);
        }

        public static ФайлДокументСвИПСвЗапЕГРИПСвСтатусЗап LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлДокументСвИПКодВидИП
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлВерсФорм
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4.05")]
        Item405,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum ФайлТипИнф
    {

        /// <remarks/>
        ЕГРИП_ОТКР_СВЕД,

        /// <remarks/>
        ЕГРИП_ЗАКР_СВЕД,

        /// <remarks/>
        ЕГРИП_ОГР_СВЕД,
    }
}
